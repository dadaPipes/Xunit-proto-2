{
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | xunit",
    "summary": "Introduction"
  },
  "docs/v3/getting-started/create-unit-test-project.html": {
    "href": "docs/v3/getting-started/create-unit-test-project.html",
    "title": "Create the unit test project | xunit",
    "summary": "Create the unit test project From the command line, create a folder for your test project, change into it, and then create the project using dotnet new: $ mkdir MyFirstUnitTests $ cd MyFirstUnitTests $ dotnet new xunit3 The template \"xUnit.net v3 Test Project\" was created successfully. Processing post-creation actions... Restoring /.../MyFirstUnitTests/MyFirstUnitTests.csproj: Determining projects to restore... Restored /.../MyFirstUnitTests/MyFirstUnitTests.csproj (in 1.48 sec). Restore succeeded. The generated project file should look something like this: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> <OutputType>Exe</OutputType> <RootNamespace>MyFirstUnitTests</RootNamespace> <TargetFramework>net8.0</TargetFramework> <!-- To enable the Microsoft Testing Platform 'dotnet test' experience, add property: <TestingPlatformDotnetTestSupport>true</TestingPlatformDotnetTestSupport> To enable the Microsoft Testing Platform native command line experience, add property: <UseMicrosoftTestingPlatformRunner>true</UseMicrosoftTestingPlatformRunner> For more information on Microsoft Testing Platform support in xUnit.net, please visit: https://xunit.net/docs/getting-started/v3/microsoft-testing-platform --> </PropertyGroup> <ItemGroup> <Content Include=\"xunit.runner.json\" CopyToOutputDirectory=\"PreserveNewest\" /> </ItemGroup> <ItemGroup> <Using Include=\"Xunit\" /> </ItemGroup> <ItemGroup> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" /> <PackageReference Include=\"xunit.v3\" Version=\"1.0.0\" /> <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.0\" /> </ItemGroup> </Project> Let’s quickly review what’s in this project file: ImplicitUsings enables implicit using statements in your project. In addition to the default set of implicit using statements, you can see below that we’ve added an implicit using for the Xunit namespace where the most common xUnit.net types come from. More information about implicit usings Nullable is enabled in this default template. Our libraries including nullable annotations to help you find when you may be accidentally dealing with null values. For example, Assert.NotNull is decorated in such a way that the compiler knows, if this assertion did not fail, then the value passed to it is known to not be null. More information about nullable reference types OutputType is set to Exe, because unit test projects in xUnit.net v3 are stand-alone executables that can be directly run. We will see examples of this later in this document. More information about xUnit.net v3 and stand-alone executables TargetFramework is set to net8.0 (which is the latest LTS build as of the writing of this document). More information about target frameworks We have included an xunit.runner.json file in your project by default. You can edit this file and place configuration values into it. More information about xUnit.net configuration files We have included three package references: xunit.v3 is the core package needed to write unit tests for xUnit.net v3 xunit.runner.visualstudio and Microsoft.NET.Test.Sdk are used to enable support for dotnet test and Visual Studio Test Explorer A single unit test was also generated (UnitTest1.cs in this example): namespace MyFirstUnitTests; public class UnitTest1 { [Fact] public void Test1() { Assert.True(true); } } Now let’s verify that everything is working by running our tests with dotnet run: $ dotnet run xUnit.net v3 In-Process Runner v1.0.0+fd19795321 (64-bit .NET 8.0.8) Discovering: MyFirstUnitTests Discovered: MyFirstUnitTests Starting: MyFirstUnitTests Finished: MyFirstUnitTests === TEST EXECUTION SUMMARY === MyFirstUnitTests Total: 1, Errors: 0, Failed: 0, Skipped: 0, Not Run: 0, Time: 0.059s Note You can pass command line options to the test runner when using dotnet run, but you must add -- before passing any command line options. The reason for this is that the .NET SDK differentiates command line options before the -- as command line options for dotnet run itself vs. command line options after the -- as command line options for the program. Try running dotnet run -? and dotnet run -- -? to see the difference. Excellent! Let’s go replace that sample unit test with our first real tests."
  },
  "docs/v3/getting-started/download-net-sdk.html": {
    "href": "docs/v3/getting-started/download-net-sdk.html",
    "title": "Download the .NET SDK | xunit",
    "summary": "Download the .NET SDK The .NET SDK is available for download for Windows, Linux, and macOS. Once you’ve downloaded and installed the SDK, open a fresh command prompt of your choice (CMD, PowerShell, bash, etc.) and make sure that you can access the command line by typing dotnet --version. You should be rewarded with a single line, describing the version of the .NET SDK you have installed: $ dotnet --version 8.0.404 Note The first time you run the dotnet command, it may perform some post-installation steps. Once these one-time actions are done, it will execute your command."
  },
  "docs/v3/getting-started/getting-started.html": {
    "href": "docs/v3/getting-started/getting-started.html",
    "title": "Getting Started with xUnit.net v3 | xunit",
    "summary": "Getting Started with xUnit.net v3 Last updated: yyyy mm dd Using .NET or .NET Framework with the .NET SDK command line In this document, we will demonstrate getting started with xUnit.net v3 when targeting .NET 6 (or later) and/or .NET Framework 4.7.2 (or later), showing you how to write and run your first set of unit tests. We will be using the .NET SDK command line. source"
  },
  "docs/v3/getting-started/install-the-NET-SDK-templates.html": {
    "href": "docs/v3/getting-started/install-the-NET-SDK-templates.html",
    "title": "Install the .NET SDK templates | xunit",
    "summary": "Install the .NET SDK templates We ship templates for creating new projects, and they must be installed before they can be used. From your command prompt, type: dotnet new install xunit.v3.templates You should see the output similar to this: $ dotnet new install xunit.v3.templates The following template packages will be installed: xunit.v3.templates Success: xunit.v3.templates::1.0.0 installed the following templates: Template Name Short Name Language Tags ------------------------------ ---------------- ---------- ---------- xUnit.net v3 Extension Project xunit3-extension [C#],F#,VB Test/xUnit xUnit.net v3 Test Project xunit3 [C#],F#,VB Test/xUnit As of this writing, we ship two templates (xunit3 and xunit3-extension), in three languages (C#, F#, and VB.NET)."
  },
  "docs/v3/getting-started/running-tests.html": {
    "href": "docs/v3/getting-started/running-tests.html",
    "title": "Running tests with | xunit",
    "summary": "Running tests with Visual Studio Visual Studio Code JetBrains Rider .NET Test Note These screen shots were taken with Visual Studio 2022 version 17.11.0. Your screen may look slightly different if you have a newer version. Visual Studio contains a test runner called Test Explorer that can run unit tests from a variety of third party test frameworks, including xUnit.net. The inclusion of xunit.runner.visualstudio (and Microsoft.NET.Test.Sdk) allows Test Explorer to find and run our tests. Visual Studio works on solutions rather than projects. If your project doesn’t have a solution file yet, you can use the .NET SDK to create one. Run the following two commands from your project folder: $ dotnet new sln The template \"Solution File\" was created successfully. $ dotnet sln add . Project `MyFirstUnitTests.csproj` added to the solution. Now open your solution with Visual Studio. Build your solution after it has opened. Make sure Test Explorer is visible (go to Test > Test Explorer). Running tests in Test Explorer After a moment of discovery, you should see the list of discovered tests: IMAGE By default, the test list is arranged by project, namespace, class, and finally test method. In this case, the MyFirstTheory method shows 3 sub-items, as that is a data theory with 3 data rows. Clicking the run button (the double play button) in the Test Explorer tool bar will run your tests: IMAGE You can double click on any test in the list to be taken directly to the source code for the test in question. Running tests from your source code You should notice after the build is complete that your unit test source becomes decorated with small blue i icons that indicate that there is a runnable test: IMAGE Clicking the i will pop up a panel that will allow you to Run or Debug your tests, as well as navigate to the test inside Test Explorer. After running the tests, you’ll see that the icons now change to indicate which tests are currently passing vs. failing: IMAGE Note These screen shots were taken with Visual Studio Code version 1.92.2 and C# Dev Kit extension version 1.9.55. Your screen may look slightly different if you have newer versions. To be able to build C# test projects and run their tests, install the C# Dev Kit extension into Visual Studio Code. The inclusion of xunit.runner.visualstudio (and Microsoft.NET.Test.Sdk) allows the Visual Studio Code testing panel (and the C# extension) to find and run our tests. From the command prompt, open Visual Studio code on your project folder by running: code . Using the side bar on the left, click the Explorer side bar (it’s probably already selected by default), and make sure Solution Explorer is visible. You should see something like this: IMAGE To build your project, right click on “MyFirstUnitTests” and choose “Build”. Running tests in the Testing side bar Once the project has finished building, click on the Testing panel. After a moment of discovery, you should see the list of discovered tests: IMAGE By default, the test list is arranged by project, namespace, class, and finally test method. In this case, the MyFirstTheory method shows 3 sub-items, as that is a data theory with 3 data rows. Clicking the run button (the double play button) in the Testing panel tool bar will run your tests: IMAGE You can double click on any test in the list to be taken directly to the source code for the test in question. Running tests from your source code Once the project has finished building, you should notice that your unit test source becomes decorated with play icons that you can click to run your tests: IMAGE After running the tests, you’ll see that the icons now change to indicate which tests are currently passing vs. failing, and failed tests will include failure information inline with your source code: IMAGE Note These screen shots were taken with Rider 2024.2. Your screen may look slightly different if you have a newer version. Rider contains a Tests tool window that can run tests from a variety of third party test frameworks, including xUnit.net. The inclusion of xunit.runner.visualstudio (and Microsoft.NET.Test.Sdk) allows the Tests tool window to find and run our tests. Open your project in Rider. Build the project by right clicking on it and choosing “Build Selected Projects”. Running tests in the Tests tool window Once the project has finished building, click on the Tests tool window. After a moment of discovery, you should see the list of discovered tests: IMAGE By default, the test list is arranged by project, namespace, class, and finally test method. Clicking the run button (the double play button) in the Tests tool window will run your tests: IMAGE You can double click on any test in the list to be taken directly to the source code for the test in question. Running tests from your source code Once the project has finished building, you should notice that your unit test source becomes decorated with play icons that you can click to run your tests: IMAGE After running the tests, you’ll see that the icons now change to indicate which tests are currently passing vs. failing: IMAGE In addition to directly running your test project, the inclusion of xunit.runner.visualstudio (and Microsoft.NET.Test.Sdk) means that you can also use the test runner build into the .NET SDK. It has different command line options (compare dotnet run -- -? with dotnet test -?). The output from this runner will look different than the built-in runner: $ dotnet test Determining projects to restore... All projects are up-to-date for restore. MyFirstUnitTests -> /.../MyFirstUnitTests/bin/Debug/net8.0/MyFirstUnitTests.dll Test run for /.../MyFirstUnitTests/bin/Debug/net8.0/MyFirstUnitTests.dll (.NETCoreApp,Version=v8.0) VSTest version 17.11.1 (x64) Starting test execution, please wait... A total of 1 test files matched the specified pattern. [xUnit.net 00:00:00.53] MyFirstUnitTests.UnitTest1.FailingTest [FAIL] [xUnit.net 00:00:00.53] MyFirstUnitTests.UnitTest1.MyFirstTheory(value: 6) [FAIL] Failed MyFirstUnitTests.UnitTest1.FailingTest [11 ms] Error Message: Assert.Equal() Failure: Values differ Expected: 5 Actual: 4 Stack Trace: at MyFirstUnitTests.UnitTest1.FailingTest() in /.../MyFirstUnitTests/UnitTest1.cs:line 14 Failed MyFirstUnitTests.UnitTest1.MyFirstTheory(value: 6) [< 1 ms] Error Message: Assert.True() Failure Expected: True Actual: False Stack Trace: at MyFirstUnitTests.UnitTest1.MyFirstTheory(Int32 value) in /.../MyFirstUnitTests/UnitTest1.cs:line 28 Failed! - Failed: 2, Passed: 3, Skipped: 0, Total: 5, Duration: 35 ms - MyFirstUnitTests.dll (net8.0)"
  },
  "docs/v3/getting-started/write-your-first-tests.html": {
    "href": "docs/v3/getting-started/write-your-first-tests.html",
    "title": "Write your first tests | xunit",
    "summary": "Write your first tests Using your favorite text editor, open the UnitTest1.cs file and replace the existing test with two new ones: namespace MyFirstUnitTests; public class UnitTest1 { [Fact] public void PassingTest() { Assert.Equal(4, Add(2, 2)); } [Fact] public void FailingTest() { Assert.Equal(5, Add(2, 2)); } int Add(int x, int y) { return x + y; } } If we run the tests again, we should see something like this: $ dotnet run xUnit.net v3 In-Process Runner v1.0.0+fd19795321 (64-bit .NET 8.0.8) Discovering: MyFirstUnitTests Discovered: MyFirstUnitTests Starting: MyFirstUnitTests MyFirstUnitTests.UnitTest1.FailingTest [FAIL] Assert.Equal() Failure: Values differ Expected: 5 Actual: 4 Stack Trace: UnitTest1.cs(14,0): at MyFirstUnitTests.UnitTest1.FailingTest() Finished: MyFirstUnitTests === TEST EXECUTION SUMMARY === MyFirstUnitTests Total: 2, Errors: 0, Failed: 1, Skipped: 0, Not Run: 0, Time: 0.097s We can see that we have one passing test, and one failing test. That’s exactly what we would expect given what we wrote. Now that we’re gotten our first tests to run, let’s introduce one more way to write tests: using theories."
  },
  "docs/v3/getting-started/write-your-first-theory.html": {
    "href": "docs/v3/getting-started/write-your-first-theory.html",
    "title": "Write your first theory | xunit",
    "summary": "Write your first theory You may have wondered why your first unit tests use an attribute named [Fact] rather than one with a more traditional name like Test. xUnit.net includes support for two different major types of unit tests: facts and theories. When describing the difference between facts and theories, we like to say: Facts are tests which are always true. They test invariant conditions. Theories are tests which are only true for a particular set of data. A good example of this is testing numeric algorithms. Let’s say you want to test an algorithm which determines whether a number is odd or not. If you’re writing the positive-side tests (odd numbers), then feeding even numbers into the test would cause it fail, and not because the test or algorithm is wrong. Let’s add a theory to our existing facts (including a bit of bad data, so we can see it fail): [Theory] [InlineData(3)] [InlineData(5)] [InlineData(6)] public void MyFirstTheory(int value) { Assert.True(IsOdd(value)); } bool IsOdd(int value) { return value % 2 == 1; } This time when we run our tests, we see a second failure, for our theory that was given 6: $ dotnet run xUnit.net v3 In-Process Runner v1.0.0+fd19795321 (64-bit .NET 8.0.8) Discovering: MyFirstUnitTests Discovered: MyFirstUnitTests Starting: MyFirstUnitTests MyFirstUnitTests.UnitTest1.FailingTest [FAIL] Assert.Equal() Failure: Values differ Expected: 5 Actual: 4 Stack Trace: UnitTest1.cs(14,0): at MyFirstUnitTests.UnitTest1.FailingTest() MyFirstUnitTests.UnitTest1.MyFirstTheory(value: 6) [FAIL] Assert.True() Failure Expected: True Actual: False Stack Trace: UnitTest1.cs(28,0): at MyFirstUnitTests.UnitTest1.MyFirstTheory(Int32 value) Finished: MyFirstUnitTests === TEST EXECUTION SUMMARY === MyFirstUnitTests Total: 5, Errors: 0, Failed: 2, Skipped: 0, Not Run: 0, Time: 0.085s Although we’ve only written 3 test methods, the test runner actually ran 5 tests; that’s because each theory with its data set is a separate test. Note also that the runner tells you exactly which set of data failed, because it includes the parameter values in the name of the test."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | xunit",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "v3/2.0.0/Xunit.AssemblyFixtureAttribute.html": {
    "href": "v3/2.0.0/Xunit.AssemblyFixtureAttribute.html",
    "title": "Class AssemblyFixtureAttribute | xunit",
    "summary": "Class AssemblyFixtureAttribute Namespace Xunit Assembly xunit.v3.core.dll Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of the fixture data is initialized before any test in the assembly are run (including InitializeAsync() if it's implemented). After all the tests in the assembly have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the fixture type. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)] public sealed class AssemblyFixtureAttribute : Attribute, IAssemblyFixtureAttribute Inheritance object Attribute AssemblyFixtureAttribute Implements IAssemblyFixtureAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors AssemblyFixtureAttribute(Type) Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of the fixture data is initialized before any test in the assembly are run (including InitializeAsync() if it's implemented). After all the tests in the assembly have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the fixture type. public AssemblyFixtureAttribute(Type assemblyFixtureType) Parameters assemblyFixtureType Type The assembly fixture class type Properties AssemblyFixtureType Gets the fixture type. public Type AssemblyFixtureType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.AssemblyHelper.html": {
    "href": "v3/2.0.0/Xunit.AssemblyHelper.html",
    "title": "Class AssemblyHelper | xunit",
    "summary": "Class AssemblyHelper Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll This class provides assistance with assembly resolution for missing assemblies. public class AssemblyHelper : MarshalByRefObject, IDisposable Inheritance object MarshalByRefObject AssemblyHelper Implements IDisposable Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors AssemblyHelper(string) Constructs an instance using the given directory for resolution. public AssemblyHelper(string directory) Parameters directory string The directory to use for resolving assemblies. AssemblyHelper(string, IMessageSink?) Constructs an instance using the given directory for resolution. public AssemblyHelper(string directory, IMessageSink? diagnosticMessageSink) Parameters directory string The directory to use for resolving assemblies. diagnosticMessageSink IMessageSink The message sink to send diagnostics messages to. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission. SubscribeResolveForAssembly(string, IMessageSink?) Subscribes to the appropriate assembly resolution event, to provide automatic assembly resolution for an assembly and any of its dependencies. Depending on the target platform, this may include the use of the .deps.json file generated during the build process. public static IDisposable? SubscribeResolveForAssembly(string assemblyFileName, IMessageSink? diagnosticMessageSink = null) Parameters assemblyFileName string diagnosticMessageSink IMessageSink Returns IDisposable An object which, when disposed, un-subscribes. SubscribeResolveForAssembly(Type, IMessageSink?) Subscribes to the appropriate assembly resolution event, to provide automatic assembly resolution for an assembly and any of its dependencies. Depending on the target platform, this may include the use of the .deps.json file generated during the build process. public static IDisposable? SubscribeResolveForAssembly(Type typeInAssembly, IMessageSink? diagnosticMessageSink = null) Parameters typeInAssembly Type diagnosticMessageSink IMessageSink Returns IDisposable An object which, when disposed, un-subscribes."
  },
  "v3/2.0.0/Xunit.AssemblyUtility.html": {
    "href": "v3/2.0.0/Xunit.AssemblyUtility.html",
    "title": "Class AssemblyUtility | xunit",
    "summary": "Class AssemblyUtility Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Utility functions for assemblies. public static class AssemblyUtility Inheritance object AssemblyUtility Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAssemblyMetadata(string) Gets metadata (including target framework and xUnit.net version) for the given assembly (on disk). This uses Mono Cecil to prevent officially loading the assembly into memory. public static AssemblyMetadata? GetAssemblyMetadata(string assemblyFileName) Parameters assemblyFileName string The assembly filename. Returns AssemblyMetadata The assembly metadata, if the assembly was found; null, otherwise."
  },
  "v3/2.0.0/Xunit.Assert.RaisedEvent-1.html": {
    "href": "v3/2.0.0/Xunit.Assert.RaisedEvent-1.html",
    "title": "Class Assert.RaisedEvent<T> | xunit",
    "summary": "Class Assert.RaisedEvent<T> Namespace Xunit Assembly xunit.v3.assert.dll Represents a raised event after the fact. public class Assert.RaisedEvent<T> Type Parameters T The type of the event arguments. Inheritance object Assert.RaisedEvent<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors RaisedEvent(object?, T) Creates a new instance of the Assert.RaisedEvent<T> class. public RaisedEvent(object? sender, T args) Parameters sender object The sender of the event. args T The event arguments RaisedEvent(T) Creates a new instance of the Assert.RaisedEvent<T> class. public RaisedEvent(T args) Parameters args T The event arguments Properties Arguments The event arguments. public T Arguments { get; } Property Value T Sender The sender of the event. When the event is recorded via Action<T> rather than EventHandler<TEventArgs>, this value will always be null, since there is no sender value when using actions. public object? Sender { get; } Property Value object"
  },
  "v3/2.0.0/Xunit.Assert.html": {
    "href": "v3/2.0.0/Xunit.Assert.html",
    "title": "Class Assert | xunit",
    "summary": "Class Assert Namespace Xunit Assembly xunit.v3.assert.dll Contains various static methods that are used to verify that conditions are met during the process of running tests. public class Assert Inheritance object Assert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Assert() Initializes a new instance of the Assert class. protected Assert() Methods AllAsync<T>(IEnumerable<T>, Func<T, int, Task>) Verifies that all items in the collection pass when executed against action. The item index is provided to the action, in addition to the item. public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, int, Task> action) Parameters collection IEnumerable<T> The collection action Func<T, int, Task> The action to test each item against Returns Task Type Parameters T The type of the object to be verified Exceptions AllException Thrown when the collection contains at least one non-matching element AllAsync<T>(IEnumerable<T>, Func<T, Task>) Verifies that all items in the collection pass when executed against action. public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, Task> action) Parameters collection IEnumerable<T> The collection action Func<T, Task> The action to test each item against Returns Task Type Parameters T The type of the object to be verified Exceptions AllException Thrown when the collection contains at least one non-matching element All<T>(IEnumerable<T>, Action<T, int>) Verifies that all items in the collection pass when executed against action. The item index is provided to the action, in addition to the item. public static void All<T>(IEnumerable<T> collection, Action<T, int> action) Parameters collection IEnumerable<T> The collection action Action<T, int> The action to test each item against Type Parameters T The type of the object to be verified Exceptions AllException Thrown when the collection contains at least one non-matching element All<T>(IEnumerable<T>, Action<T>) Verifies that all items in the collection pass when executed against action. public static void All<T>(IEnumerable<T> collection, Action<T> action) Parameters collection IEnumerable<T> The collection action Action<T> The action to test each item against Type Parameters T The type of the object to be verified Exceptions AllException Thrown when the collection contains at least one non-matching element CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[]) Verifies that a collection contains exactly a given number of elements, which meet the criteria provided by the element inspectors. public static Task CollectionAsync<T>(IEnumerable<T> collection, params Func<T, Task>[] elementInspectors) Parameters collection IEnumerable<T> The collection to be inspected elementInspectors Func<T, Task>[] The element inspectors, which inspect each element in turn. The total number of element inspectors must exactly match the number of elements in the collection. Returns Task Type Parameters T The type of the object to be verified Collection<T>(IEnumerable<T>, params Action<T>[]) Verifies that a collection contains exactly a given number of elements, which meet the criteria provided by the element inspectors. public static void Collection<T>(IEnumerable<T> collection, params Action<T>[] elementInspectors) Parameters collection IEnumerable<T> The collection to be inspected elementInspectors Action<T>[] The element inspectors, which inspect each element in turn. The total number of element inspectors must exactly match the number of elements in the collection. Type Parameters T The type of the object to be verified Contains(Memory<char>, Memory<char>) Verifies that a string contains a given sub-string, using the current culture. public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString) Parameters expectedSubstring Memory<char> The sub-string expected to be in the string actualString Memory<char> The string to be inspected Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(Memory<char>, Memory<char>, StringComparison) Verifies that a string contains a given sub-string, using the given comparison type. public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Memory<char> The sub-string expected to be in the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(Memory<char>, ReadOnlyMemory<char>) Verifies that a string contains a given sub-string, using the current culture. public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString) Parameters expectedSubstring Memory<char> The sub-string expected to be in the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string contains a given sub-string, using the given comparison type. public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Memory<char> The sub-string expected to be in the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(ReadOnlyMemory<char>, Memory<char>) Verifies that a string contains a given sub-string, using the current culture. public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected to be in the string actualString Memory<char> The string to be inspected Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison) Verifies that a string contains a given sub-string, using the given comparison type. public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected to be in the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>) Verifies that a string contains a given sub-string, using the current culture. public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected to be in the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string contains a given sub-string, using the given comparison type. public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected to be in the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(ReadOnlySpan<char>, ReadOnlySpan<char>) Verifies that a string contains a given string, using the current culture. public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString) Parameters expectedSubstring ReadOnlySpan<char> The string expected to be in the string actualString ReadOnlySpan<char> The string to be inspected Exceptions ContainsException Thrown when the string is not present inside the string Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string contains a given string, using the given comparison type. public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlySpan<char> The string expected to be in the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the string is not present inside the string Contains(ReadOnlySpan<char>, Span<char>) Verifies that a string contains a given string, using the current culture. public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString) Parameters expectedSubstring ReadOnlySpan<char> The string expected to be in the string actualString Span<char> The string to be inspected Exceptions ContainsException Thrown when the string is not present inside the string Contains(ReadOnlySpan<char>, Span<char>, StringComparison) Verifies that a string contains a given string, using the given comparison type. public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlySpan<char> The string expected to be in the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the string is not present inside the string Contains(Span<char>, ReadOnlySpan<char>) Verifies that a string contains a given string, using the current culture. public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString) Parameters expectedSubstring Span<char> The string expected to be in the string actualString ReadOnlySpan<char> The string to be inspected Exceptions ContainsException Thrown when the string is not present inside the string Contains(Span<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string contains a given string, using the given comparison type. public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Span<char> The string expected to be in the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the string is not present inside the string Contains(Span<char>, Span<char>) Verifies that a string contains a given string, using the current culture. public static void Contains(Span<char> expectedSubstring, Span<char> actualString) Parameters expectedSubstring Span<char> The string expected to be in the string actualString Span<char> The string to be inspected Exceptions ContainsException Thrown when the string is not present inside the string Contains(Span<char>, Span<char>, StringComparison) Verifies that a string contains a given string, using the given comparison type. public static void Contains(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Span<char> The string expected to be in the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the string is not present inside the string Contains(string, string?) Verifies that a string contains a given sub-string, using the current culture. public static void Contains(string expectedSubstring, string? actualString) Parameters expectedSubstring string The sub-string expected to be in the string actualString string The string to be inspected Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains(string, string?, StringComparison) Verifies that a string contains a given sub-string, using the given comparison type. public static void Contains(string expectedSubstring, string? actualString, StringComparison comparisonType) Parameters expectedSubstring string The sub-string expected to be in the string actualString string The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the sub-string is not present inside the string Contains<T>(IEnumerable<T>, Predicate<T>) Verifies that a collection contains a given object. public static void Contains<T>(IEnumerable<T> collection, Predicate<T> filter) Parameters collection IEnumerable<T> The collection to be inspected filter Predicate<T> The filter used to find the item you're ensuring the collection contains Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the collection Contains<T>(Memory<T>, Memory<T>) Verifies that a Memory contains a given sub-Memory public static void Contains<T>(Memory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory Memory<T> The sub-Memory expected to be in the Memory actualMemory Memory<T> The Memory to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-Memory is not present inside the Memory Contains<T>(Memory<T>, ReadOnlyMemory<T>) Verifies that a Memory contains a given sub-Memory public static void Contains<T>(Memory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory Memory<T> The sub-Memory expected to be in the Memory actualMemory ReadOnlyMemory<T> The Memory to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-Memory is not present inside the Memory Contains<T>(ReadOnlyMemory<T>, Memory<T>) Verifies that a Memory contains a given sub-Memory public static void Contains<T>(ReadOnlyMemory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory ReadOnlyMemory<T> The sub-Memory expected to be in the Memory actualMemory Memory<T> The Memory to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-Memory is not present inside the Memory Contains<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>) Verifies that a Memory contains a given sub-Memory public static void Contains<T>(ReadOnlyMemory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory ReadOnlyMemory<T> The sub-Memory expected to be in the Memory actualMemory ReadOnlyMemory<T> The Memory to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-Memory is not present inside the Memory Contains<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Verifies that a span contains a given sub-span public static void Contains<T>(ReadOnlySpan<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan ReadOnlySpan<T> The sub-span expected to be in the span actualSpan ReadOnlySpan<T> The span to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-span is not present inside the span Contains<T>(ReadOnlySpan<T>, Span<T>) Verifies that a span contains a given sub-span public static void Contains<T>(ReadOnlySpan<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan ReadOnlySpan<T> The sub-span expected to be in the span actualSpan Span<T> The span to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-span is not present inside the span Contains<T>(Span<T>, ReadOnlySpan<T>) Verifies that a span contains a given sub-span public static void Contains<T>(Span<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan Span<T> The sub-span expected to be in the span actualSpan ReadOnlySpan<T> The span to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-span is not present inside the span Contains<T>(Span<T>, Span<T>) Verifies that a span contains a given sub-span public static void Contains<T>(Span<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan Span<T> The sub-span expected to be in the span actualSpan Span<T> The span to be inspected Type Parameters T Exceptions ContainsException Thrown when the sub-span is not present inside the span Contains<T>(T, HashSet<T>) Verifies that the hashset contains the given object. public static void Contains<T>(T expected, HashSet<T> set) Parameters expected T The object expected to be in the set set HashSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set Contains<T>(T, IEnumerable<T>) Verifies that a collection contains a given object. public static void Contains<T>(T expected, IEnumerable<T> collection) Parameters expected T The object expected to be in the collection collection IEnumerable<T> The collection to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the collection Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>) Verifies that a collection contains a given object, using an equality comparer. public static void Contains<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters expected T The object expected to be in the collection collection IEnumerable<T> The collection to be inspected comparer IEqualityComparer<T> The comparer used to equate objects in the collection with the expected object Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the collection Contains<T>(T, ISet<T>) Verifies that the set contains the given object. public static void Contains<T>(T expected, ISet<T> set) Parameters expected T The object expected to be in the set set ISet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set Contains<T>(T, SortedSet<T>) Verifies that the sorted hashset contains the given object. public static void Contains<T>(T expected, SortedSet<T> set) Parameters expected T The object expected to be in the set set SortedSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set Contains<T>(T, ImmutableHashSet<T>) Verifies that the immutable hashset contains the given object. public static void Contains<T>(T expected, ImmutableHashSet<T> set) Parameters expected T The object expected to be in the set set ImmutableHashSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set Contains<T>(T, ImmutableSortedSet<T>) Verifies that the immutable sorted hashset contains the given object. public static void Contains<T>(T expected, ImmutableSortedSet<T> set) Parameters expected T The object expected to be in the set set ImmutableSortedSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set Contains<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>) Verifies that a dictionary contains a given key. public static TValue Contains<TKey, TValue>(TKey expected, ConcurrentDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection ConcurrentDictionary<TKey, TValue> The collection to be inspected. Returns TValue The value associated with expected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions ContainsException Thrown when the object is not present in the collection Contains<TKey, TValue>(TKey, Dictionary<TKey, TValue>) Verifies that a dictionary contains a given key. public static TValue Contains<TKey, TValue>(TKey expected, Dictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection Dictionary<TKey, TValue> The collection to be inspected. Returns TValue The value associated with expected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions ContainsException Thrown when the object is not present in the collection Contains<TKey, TValue>(TKey, IDictionary<TKey, TValue>) Verifies that a dictionary contains a given key. public static TValue Contains<TKey, TValue>(TKey expected, IDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection IDictionary<TKey, TValue> The collection to be inspected. Returns TValue The value associated with expected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions ContainsException Thrown when the object is not present in the collection Contains<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>) Verifies that a read-only dictionary contains a given key. public static TValue Contains<TKey, TValue>(TKey expected, IReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection IReadOnlyDictionary<TKey, TValue> The collection to be inspected. Returns TValue The value associated with expected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions ContainsException Thrown when the object is not present in the collection Contains<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>) Verifies that a dictionary contains a given key. public static TValue Contains<TKey, TValue>(TKey expected, ImmutableDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection ImmutableDictionary<TKey, TValue> The collection to be inspected. Returns TValue The value associated with expected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions ContainsException Thrown when the object is not present in the collection Contains<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>) Verifies that a dictionary contains a given key. public static TValue Contains<TKey, TValue>(TKey expected, ReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection ReadOnlyDictionary<TKey, TValue> The collection to be inspected. Returns TValue The value associated with expected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions ContainsException Thrown when the object is not present in the collection Distinct<T>(IEnumerable<T>) Verifies that a collection contains each object only once. public static void Distinct<T>(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection to be inspected Type Parameters T The type of the object to be compared Exceptions DistinctException Thrown when an object is present inside the collection more than once Distinct<T>(IEnumerable<T>, IEqualityComparer<T>) Verifies that a collection contains each object only once. public static void Distinct<T>(IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters collection IEnumerable<T> The collection to be inspected comparer IEqualityComparer<T> The comparer used to equate objects in the collection with the expected object Type Parameters T The type of the object to be compared Exceptions DistinctException Thrown when an object is present inside the collection more than once DoesNotContain(Memory<char>, Memory<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString) Parameters expectedSubstring Memory<char> The sub-string expected not to be in the string actualString Memory<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Memory<char>, Memory<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Memory<char> The sub-string expected not to be in the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Memory<char>, ReadOnlyMemory<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString) Parameters expectedSubstring Memory<char> The sub-string expected not to be in the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Memory<char> The sub-string expected not to be in the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlyMemory<char>, Memory<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected not to be in the string actualString Memory<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected not to be in the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected not to be in the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlyMemory<char> The sub-string expected not to be in the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString) Parameters expectedSubstring ReadOnlySpan<char> The sub-string expected not to be in the string actualString ReadOnlySpan<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlySpan<char> The sub-string expected not to be in the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlySpan<char>, Span<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString) Parameters expectedSubstring ReadOnlySpan<char> The sub-string expected not to be in the string actualString Span<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring ReadOnlySpan<char> The sub-string expected not to be in the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Span<char>, ReadOnlySpan<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString) Parameters expectedSubstring Span<char> The sub-string expected not to be in the string actualString ReadOnlySpan<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Span<char> The sub-string expected not to be in the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Span<char>, Span<char>) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString) Parameters expectedSubstring Span<char> The sub-string expected not to be in the string actualString Span<char> The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(Span<char>, Span<char>, StringComparison) Verifies that a string does not contain a given sub-string, using the given comparison type. public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedSubstring Span<char> The sub-string expected not to be in the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(string, string?) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(string expectedSubstring, string? actualString) Parameters expectedSubstring string The sub-string expected not to be in the string actualString string The string to be inspected Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain(string, string?, StringComparison) Verifies that a string does not contain a given sub-string, using the current culture. public static void DoesNotContain(string expectedSubstring, string? actualString, StringComparison comparisonType) Parameters expectedSubstring string The sub-string expected not to be in the string actualString string The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions DoesNotContainException Thrown when the sub-string is present inside the string DoesNotContain<T>(IEnumerable<T>, Predicate<T>) Verifies that a collection does not contain a given object. public static void DoesNotContain<T>(IEnumerable<T> collection, Predicate<T> filter) Parameters collection IEnumerable<T> The collection to be inspected filter Predicate<T> The filter used to find the item you're ensuring the collection does not contain Type Parameters T The type of the object to be compared Exceptions DoesNotContainException Thrown when the object is present inside the collection DoesNotContain<T>(Memory<T>, Memory<T>) Verifies that a Memory does not contain a given sub-Memory public static void DoesNotContain<T>(Memory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory Memory<T> The sub-Memory expected not to be in the Memory actualMemory Memory<T> The Memory to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-Memory is present inside the Memory DoesNotContain<T>(Memory<T>, ReadOnlyMemory<T>) Verifies that a Memory does not contain a given sub-Memory public static void DoesNotContain<T>(Memory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory Memory<T> The sub-Memory expected not to be in the Memory actualMemory ReadOnlyMemory<T> The Memory to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-Memory is present inside the Memory DoesNotContain<T>(ReadOnlyMemory<T>, Memory<T>) Verifies that a Memory does not contain a given sub-Memory public static void DoesNotContain<T>(ReadOnlyMemory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory ReadOnlyMemory<T> The sub-Memory expected not to be in the Memory actualMemory Memory<T> The Memory to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-Memory is present inside the Memory DoesNotContain<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>) Verifies that a Memory does not contain a given sub-Memory public static void DoesNotContain<T>(ReadOnlyMemory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T> Parameters expectedSubMemory ReadOnlyMemory<T> The sub-Memory expected not to be in the Memory actualMemory ReadOnlyMemory<T> The Memory to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-Memory is present inside the Memory DoesNotContain<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Verifies that a span does not contain a given sub-span public static void DoesNotContain<T>(ReadOnlySpan<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan ReadOnlySpan<T> The sub-span expected not to be in the span actualSpan ReadOnlySpan<T> The span to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-span is present inside the span DoesNotContain<T>(ReadOnlySpan<T>, Span<T>) Verifies that a span does not contain a given sub-span public static void DoesNotContain<T>(ReadOnlySpan<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan ReadOnlySpan<T> The sub-span expected not to be in the span actualSpan Span<T> The span to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-span is present inside the span DoesNotContain<T>(Span<T>, ReadOnlySpan<T>) Verifies that a span does not contain a given sub-span public static void DoesNotContain<T>(Span<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan Span<T> The sub-span expected not to be in the span actualSpan ReadOnlySpan<T> The span to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-span is present inside the span DoesNotContain<T>(Span<T>, Span<T>) Verifies that a span does not contain a given sub-span public static void DoesNotContain<T>(Span<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T> Parameters expectedSubSpan Span<T> The sub-span expected not to be in the span actualSpan Span<T> The span to be inspected Type Parameters T Exceptions DoesNotContainException Thrown when the sub-span is present inside the span DoesNotContain<T>(T, HashSet<T>) Verifies that the hashset does not contain the given item. public static void DoesNotContain<T>(T expected, HashSet<T> set) Parameters expected T The object expected to be in the set set HashSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set DoesNotContain<T>(T, IEnumerable<T>) Verifies that a collection does not contain a given object. public static void DoesNotContain<T>(T expected, IEnumerable<T> collection) Parameters expected T The object that is expected not to be in the collection collection IEnumerable<T> The collection to be inspected Type Parameters T The type of the object to be compared Exceptions DoesNotContainException Thrown when the object is present inside the collection DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>) Verifies that a collection does not contain a given object, using an equality comparer. public static void DoesNotContain<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer) Parameters expected T The object that is expected not to be in the collection collection IEnumerable<T> The collection to be inspected comparer IEqualityComparer<T> The comparer used to equate objects in the collection with the expected object Type Parameters T The type of the object to be compared Exceptions DoesNotContainException Thrown when the object is present inside the collection DoesNotContain<T>(T, ISet<T>) Verifies that the set does not contain the given item. public static void DoesNotContain<T>(T expected, ISet<T> set) Parameters expected T The object that is expected not to be in the set set ISet<T> The set to be inspected Type Parameters T The type of the object to be compared Exceptions DoesNotContainException Thrown when the object is present inside the set DoesNotContain<T>(T, SortedSet<T>) Verifies that the sorted hashset does not contain the given item. public static void DoesNotContain<T>(T expected, SortedSet<T> set) Parameters expected T The object expected to be in the set set SortedSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set DoesNotContain<T>(T, ImmutableHashSet<T>) Verifies that the immutable hashset does not contain the given item. public static void DoesNotContain<T>(T expected, ImmutableHashSet<T> set) Parameters expected T The object expected to be in the set set ImmutableHashSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set DoesNotContain<T>(T, ImmutableSortedSet<T>) Verifies that the immutable sorted hashset does not contain the given item. public static void DoesNotContain<T>(T expected, ImmutableSortedSet<T> set) Parameters expected T The object expected to be in the set set ImmutableSortedSet<T> The set to be inspected Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the object is not present in the set DoesNotContain<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>) Verifies that a dictionary does not contain a given key. public static void DoesNotContain<TKey, TValue>(TKey expected, ConcurrentDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection ConcurrentDictionary<TKey, TValue> The collection to be inspected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions DoesNotContainException Thrown when the object is present in the collection DoesNotContain<TKey, TValue>(TKey, Dictionary<TKey, TValue>) Verifies that a dictionary does not contain a given key. public static void DoesNotContain<TKey, TValue>(TKey expected, Dictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection Dictionary<TKey, TValue> The collection to be inspected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions DoesNotContainException Thrown when the object is present in the collection DoesNotContain<TKey, TValue>(TKey, IDictionary<TKey, TValue>) Verifies that a dictionary does not contain a given key. public static void DoesNotContain<TKey, TValue>(TKey expected, IDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection IDictionary<TKey, TValue> The collection to be inspected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions DoesNotContainException Thrown when the object is present in the collection DoesNotContain<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>) Verifies that a dictionary does not contain a given key. public static void DoesNotContain<TKey, TValue>(TKey expected, IReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection IReadOnlyDictionary<TKey, TValue> The collection to be inspected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions DoesNotContainException Thrown when the object is present in the collection DoesNotContain<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>) Verifies that a dictionary does not contain a given key. public static void DoesNotContain<TKey, TValue>(TKey expected, ImmutableDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection ImmutableDictionary<TKey, TValue> The collection to be inspected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions DoesNotContainException Thrown when the object is present in the collection DoesNotContain<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>) Verifies that a dictionary does not contain a given key. public static void DoesNotContain<TKey, TValue>(TKey expected, ReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull Parameters expected TKey The object expected to be in the collection. collection ReadOnlyDictionary<TKey, TValue> The collection to be inspected. Type Parameters TKey The type of the keys of the object to be verified. TValue The type of the values of the object to be verified. Exceptions DoesNotContainException Thrown when the object is present in the collection DoesNotMatch(string, string?) Verifies that a string does not match a regular expression. public static void DoesNotMatch(string expectedRegexPattern, string? actualString) Parameters expectedRegexPattern string The regex pattern expected not to match actualString string The string to be inspected Exceptions DoesNotMatchException Thrown when the string matches the regex pattern DoesNotMatch(Regex, string?) Verifies that a string does not match a regular expression. public static void DoesNotMatch(Regex expectedRegex, string? actualString) Parameters expectedRegex Regex The regex expected not to match actualString string The string to be inspected Exceptions DoesNotMatchException Thrown when the string matches the regex Empty(IEnumerable) Verifies that a collection is empty. public static void Empty(IEnumerable collection) Parameters collection IEnumerable The collection to be inspected Exceptions ArgumentNullException Thrown when the collection is null EmptyException Thrown when the collection is not empty Empty(string) Verifies that a string is empty. public static void Empty(string value) Parameters value string The string value to be inspected Exceptions ArgumentNullException Thrown when the string is null EmptyException Thrown when the string is not empty EndsWith(Memory<char>, Memory<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString) Parameters expectedEndString Memory<char> The sub-string expected to be at the end of the string actualString Memory<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Memory<char>, Memory<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString Memory<char> The sub-string expected to be at the end of the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Memory<char>, ReadOnlyMemory<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString) Parameters expectedEndString Memory<char> The sub-string expected to be at the end of the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString Memory<char> The sub-string expected to be at the end of the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlyMemory<char>, Memory<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString) Parameters expectedEndString ReadOnlyMemory<char> The sub-string expected to be at the end of the string actualString Memory<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString ReadOnlyMemory<char> The sub-string expected to be at the end of the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString) Parameters expectedEndString ReadOnlyMemory<char> The sub-string expected to be at the end of the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString ReadOnlyMemory<char> The sub-string expected to be at the end of the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString) Parameters expectedEndString ReadOnlySpan<char> The sub-string expected to be at the end of the string actualString ReadOnlySpan<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString ReadOnlySpan<char> The sub-string expected to be at the end of the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlySpan<char>, Span<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString) Parameters expectedEndString ReadOnlySpan<char> The sub-string expected to be at the end of the string actualString Span<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString ReadOnlySpan<char> The sub-string expected to be at the end of the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Span<char>, ReadOnlySpan<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString) Parameters expectedEndString Span<char> The sub-string expected to be at the end of the string actualString ReadOnlySpan<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString Span<char> The sub-string expected to be at the end of the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Span<char>, Span<char>) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(Span<char> expectedEndString, Span<char> actualString) Parameters expectedEndString Span<char> The sub-string expected to be at the end of the string actualString Span<char> The string to be inspected Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(Span<char>, Span<char>, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(Span<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedEndString Span<char> The sub-string expected to be at the end of the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions EndsWithException Thrown when the string does not end with the expected sub-string EndsWith(string?, string?) Verifies that a string ends with a given sub-string, using the current culture. public static void EndsWith(string? expectedEndString, string? actualString) Parameters expectedEndString string The sub-string expected to be at the end of the string actualString string The string to be inspected Exceptions ContainsException Thrown when the string does not end with the expected sub-string EndsWith(string?, string?, StringComparison) Verifies that a string ends with a given sub-string, using the given comparison type. public static void EndsWith(string? expectedEndString, string? actualString, StringComparison comparisonType) Parameters expectedEndString string The sub-string expected to be at the end of the string actualString string The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the string does not end with the expected sub-string Equal(DateTime, DateTime) Verifies that two DateTime values are equal. public static void Equal(DateTime expected, DateTime actual) Parameters expected DateTime The expected value actual DateTime The value to be compared against Equal(DateTime, DateTime, TimeSpan) Verifies that two DateTime values are equal, within the precision given by precision. public static void Equal(DateTime expected, DateTime actual, TimeSpan precision) Parameters expected DateTime The expected value actual DateTime The value to be compared against precision TimeSpan The allowed difference in time where the two dates are considered equal Equal(DateTimeOffset, DateTimeOffset) Verifies that two DateTimeOffset values are equal. public static void Equal(DateTimeOffset expected, DateTimeOffset actual) Parameters expected DateTimeOffset The expected value actual DateTimeOffset The value to be compared against Equal(DateTimeOffset, DateTimeOffset, TimeSpan) Verifies that two DateTimeOffset values are equal, within the precision given by precision. public static void Equal(DateTimeOffset expected, DateTimeOffset actual, TimeSpan precision) Parameters expected DateTimeOffset The expected value actual DateTimeOffset The value to be compared against precision TimeSpan The allowed difference in time where the two dates are considered equal Equal(decimal, decimal, int) Verifies that two decimal values are equal, within the number of decimal places given by precision. The values are rounded before comparison. public static void Equal(decimal expected, decimal actual, int precision) Parameters expected decimal The expected value actual decimal The value to be compared against precision int The number of decimal places (valid values: 0-28) Equal(double, double, double) Verifies that two double values are equal, within the tolerance given by tolerance (positive or negative). public static void Equal(double expected, double actual, double tolerance) Parameters expected double The expected value actual double The value to be compared against tolerance double The allowed difference between values Equal(double, double, int) Verifies that two double values are equal, within the number of decimal places given by precision. The values are rounded before comparison. public static void Equal(double expected, double actual, int precision) Parameters expected double The expected value actual double The value to be compared against precision int The number of decimal places (valid values: 0-15) Equal(double, double, int, MidpointRounding) Verifies that two double values are equal, within the number of decimal places given by precision. The values are rounded before comparison. The rounding method to use is given by rounding public static void Equal(double expected, double actual, int precision, MidpointRounding rounding) Parameters expected double The expected value actual double The value to be compared against precision int The number of decimal places (valid values: 0-15) rounding MidpointRounding Rounding method to use to process a number that is midway between two numbers Equal(Memory<char>, Memory<char>) Verifies that two strings are equivalent. public static void Equal(Memory<char> expected, Memory<char> actual) Parameters expected Memory<char> The expected string value. actual Memory<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(Memory<char>, Memory<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(Memory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected Memory<char> The expected string value. actual Memory<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(Memory<char>, ReadOnlyMemory<char>) Verifies that two strings are equivalent. public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual) Parameters expected Memory<char> The expected string value. actual ReadOnlyMemory<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected Memory<char> The expected string value. actual ReadOnlyMemory<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlyMemory<char>, Memory<char>) Verifies that two strings are equivalent. public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual) Parameters expected ReadOnlyMemory<char> The expected string value. actual Memory<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected ReadOnlyMemory<char> The expected string value. actual Memory<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>) Verifies that two strings are equivalent. public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual) Parameters expected ReadOnlyMemory<char> The expected string value. actual ReadOnlyMemory<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected ReadOnlyMemory<char> The expected string value. actual ReadOnlyMemory<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlySpan<char>, ReadOnlySpan<char>) Verifies that two strings are equivalent. public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual) Parameters expected ReadOnlySpan<char> The expected string value. actual ReadOnlySpan<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected ReadOnlySpan<char> The expected string value. actual ReadOnlySpan<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlySpan<char>, Span<char>) Verifies that two strings are equivalent. public static void Equal(ReadOnlySpan<char> expected, Span<char> actual) Parameters expected ReadOnlySpan<char> The expected string value. actual Span<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(ReadOnlySpan<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected ReadOnlySpan<char> The expected string value. actual Span<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats spaces and tabs (in any non-zero quantity) as equivalent. ignoreAllWhiteSpace bool If set to true, removes all whitespaces and tabs before comparing. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(float, float, int) Verifies that two float values are equal, within the number of decimal places given by precision. The values are rounded before comparison. public static void Equal(float expected, float actual, int precision) Parameters expected float The expected value actual float The value to be compared against precision int The number of decimal places (valid values: 0-15) Equal(float, float, int, MidpointRounding) Verifies that two float values are equal, within the number of decimal places given by precision. The values are rounded before comparison. The rounding method to use is given by rounding public static void Equal(float expected, float actual, int precision, MidpointRounding rounding) Parameters expected float The expected value actual float The value to be compared against precision int The number of decimal places (valid values: 0-15) rounding MidpointRounding Rounding method to use to process a number that is midway between two numbers Equal(float, float, float) Verifies that two float values are equal, within the tolerance given by tolerance (positive or negative). public static void Equal(float expected, float actual, float tolerance) Parameters expected float The expected value actual float The value to be compared against tolerance float The allowed difference between values Equal(Span<char>, ReadOnlySpan<char>) Verifies that two strings are equivalent. public static void Equal(Span<char> expected, ReadOnlySpan<char> actual) Parameters expected Span<char> The expected string value. actual ReadOnlySpan<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(Span<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected Span<char> The expected string value. actual ReadOnlySpan<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats spaces and tabs (in any non-zero quantity) as equivalent. ignoreAllWhiteSpace bool If set to true, ignores all white space differences during comparison. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(Span<char>, Span<char>) Verifies that two strings are equivalent. public static void Equal(Span<char> expected, Span<char> actual) Parameters expected Span<char> The expected string value. actual Span<char> The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(Span<char>, Span<char>, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(Span<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected Span<char> The expected string value. actual Span<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats spaces and tabs (in any non-zero quantity) as equivalent. ignoreAllWhiteSpace bool If set to true, ignores all white space differences during comparison. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal(string?, string?) Verifies that two strings are equivalent. public static void Equal(string? expected, string? actual) Parameters expected string The expected string value. actual string The actual string value. Exceptions EqualException Thrown when the strings are not equivalent. Equal(string?, string?, bool, bool, bool, bool) Verifies that two strings are equivalent. public static void Equal(string? expected, string? actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected string The expected string value. actual string The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Exceptions EqualException Thrown when the strings are not equivalent. Equal<T>(IEnumerable<T>?, IEnumerable<T>?) Verifies that two sequences are equivalent, using a default comparer. public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual) Parameters expected IEnumerable<T> The expected value actual IEnumerable<T> The value to be compared against Type Parameters T The type of the objects to be compared Exceptions EqualException Thrown when the objects are not equal Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>) Verifies that two sequences are equivalent, using a custom equatable comparer. public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer) Parameters expected IEnumerable<T> The expected value actual IEnumerable<T> The value to be compared against comparer IEqualityComparer<T> The comparer used to compare the two objects Type Parameters T The type of the objects to be compared Exceptions EqualException Thrown when the objects are not equal Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>) Verifies that two collections are equal, using a comparer function against items in the two collections. public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer) Parameters expected IEnumerable<T> The expected value actual IEnumerable<T> The value to be compared against comparer Func<T, T, bool> The function to compare two items for equality Type Parameters T The type of the objects to be compared Equal<T>(Memory<T>, Memory<T>) Verifies that two Memory values are equivalent. public static void Equal<T>(Memory<T> expectedMemory, Memory<T> actualMemory) where T : IEquatable<T> Parameters expectedMemory Memory<T> The expected Memory value. actualMemory Memory<T> The actual Memory value. Type Parameters T Exceptions EqualException Thrown when the Memory values are not equivalent. Equal<T>(Memory<T>, ReadOnlyMemory<T>) Verifies that two Memory values are equivalent. public static void Equal<T>(Memory<T> expectedMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T> Parameters expectedMemory Memory<T> The expected Memory value. actualMemory ReadOnlyMemory<T> The actual Memory value. Type Parameters T Exceptions EqualException Thrown when the Memory values are not equivalent. Equal<T>(ReadOnlyMemory<T>, Memory<T>) Verifies that two Memory values are equivalent. public static void Equal<T>(ReadOnlyMemory<T> expectedMemory, Memory<T> actualMemory) where T : IEquatable<T> Parameters expectedMemory ReadOnlyMemory<T> The expected Memory value. actualMemory Memory<T> The actual Memory value. Type Parameters T Exceptions EqualException Thrown when the Memory values are not equivalent. Equal<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>) Verifies that two Memory values are equivalent. public static void Equal<T>(ReadOnlyMemory<T> expectedMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T> Parameters expectedMemory ReadOnlyMemory<T> The expected Memory value. actualMemory ReadOnlyMemory<T> The actual Memory value. Type Parameters T Exceptions EqualException Thrown when the Memory values are not equivalent. Equal<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Verifies that two spans contain the same values in the same order. public static void Equal<T>(ReadOnlySpan<T> expectedSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T> Parameters expectedSpan ReadOnlySpan<T> The expected span value. actualSpan ReadOnlySpan<T> The actual span value. Type Parameters T Exceptions EqualException Thrown when the spans are not equal. Equal<T>(ReadOnlySpan<T>, Span<T>) Verifies that two spans contain the same values in the same order. public static void Equal<T>(ReadOnlySpan<T> expectedSpan, Span<T> actualSpan) where T : IEquatable<T> Parameters expectedSpan ReadOnlySpan<T> The expected span value. actualSpan Span<T> The actual span value. Type Parameters T Exceptions EqualException Thrown when the spans are not equal. Equal<T>(ReadOnlySpan<T>, T[]) Verifies that a span and an array contain the same values in the same order. public static void Equal<T>(ReadOnlySpan<T> expectedSpan, T[] actualArray) where T : IEquatable<T> Parameters expectedSpan ReadOnlySpan<T> The expected span value. actualArray T[] The actual array value. Type Parameters T Exceptions EqualException Thrown when the collections are not equal. Equal<T>(Span<T>, ReadOnlySpan<T>) Verifies that two spans contain the same values in the same order. public static void Equal<T>(Span<T> expectedSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T> Parameters expectedSpan Span<T> The expected span value. actualSpan ReadOnlySpan<T> The actual span value. Type Parameters T Exceptions EqualException Thrown when the spans are not equal. Equal<T>(Span<T>, Span<T>) Verifies that two spans contain the same values in the same order. public static void Equal<T>(Span<T> expectedSpan, Span<T> actualSpan) where T : IEquatable<T> Parameters expectedSpan Span<T> The expected span value. actualSpan Span<T> The actual span value. Type Parameters T Exceptions EqualException Thrown when the spans are not equal. Equal<T>(T, T) Verifies that two objects are equal, using a default comparer. public static void Equal<T>(T expected, T actual) Parameters expected T The expected value actual T The value to be compared against Type Parameters T The type of the objects to be compared Equal<T>(T, T, IEqualityComparer<T>) Verifies that two objects are equal, using a custom equatable comparer. public static void Equal<T>(T expected, T actual, IEqualityComparer<T> comparer) Parameters expected T The expected value actual T The value to be compared against comparer IEqualityComparer<T> The comparer used to compare the two objects Type Parameters T The type of the objects to be compared Equal<T>(T, T, Func<T, T, bool>) Verifies that two objects are equal, using a custom comparer function. public static void Equal<T>(T expected, T actual, Func<T, T, bool> comparer) Parameters expected T The expected value actual T The value to be compared against comparer Func<T, T, bool> The comparer used to compare the two objects Type Parameters T The type of the objects to be compared Equal<T>(T[], T[]) Verifies that two arrays of un-managed type T are equal, using Span<T>.SequenceEqual. This can be significantly faster than generic enumerables, when the collections are actually equal, because the system can optimize packed-memory comparisons for value type arrays. public static void Equal<T>(T[] expected, T[] actual) where T : unmanaged, IEquatable<T> Parameters expected T[] The expected value actual T[] The value to be compared against Type Parameters T The type of items whose arrays are to be compared Remarks If SequenceEqual<T>(Span<T>, ReadOnlySpan<T>) fails, a call to Equal<T>(T, T) is made, to provide a more meaningful error message. Equivalent(object?, object?, bool) Verifies that two objects are equivalent, using a default comparer. This comparison is done without regard to type, and only inspects public property and field values for individual equality. Deep equivalence tests (meaning, property or fields which are themselves complex types) are supported. With strict mode off, object comparison allows actual to have extra public members that aren't part of expected, and collection comparison allows actual to have more data in it than is present in expected; with strict mode on, those rules are tightened to require exact member list (for objects) or data (for collections). public static void Equivalent(object? expected, object? actual, bool strict = false) Parameters expected object The expected value actual object The actual value strict bool A flag which enables strict comparison mode Fail(string?) Indicates that the test should immediately fail. public static void Fail(string? message = null) Parameters message string The optional failure message False(bool) Verifies that the condition is false. public static void False(bool condition) Parameters condition bool The condition to be tested Exceptions FalseException Thrown if the condition is not false False(bool, string?) Verifies that the condition is false. public static void False(bool condition, string? userMessage) Parameters condition bool The condition to be tested userMessage string The message to show when the condition is not false Exceptions FalseException Thrown if the condition is not false False(bool?) Verifies that the condition is false. public static void False(bool? condition) Parameters condition bool? The condition to be tested Exceptions FalseException Thrown if the condition is not false False(bool?, string?) Verifies that the condition is false. public static void False(bool? condition, string? userMessage) Parameters condition bool? The condition to be tested userMessage string The message to show when the condition is not false Exceptions FalseException Thrown if the condition is not false InRange<T>(T, T, T) Verifies that a value is within a given range. public static void InRange<T>(T actual, T low, T high) where T : IComparable Parameters actual T The actual value to be evaluated low T The (inclusive) low value of the range high T The (inclusive) high value of the range Type Parameters T The type of the value to be compared Exceptions InRangeException Thrown when the value is not in the given range InRange<T>(T, T, T, IComparer<T>) Verifies that a value is within a given range, using a comparer. public static void InRange<T>(T actual, T low, T high, IComparer<T> comparer) Parameters actual T The actual value to be evaluated low T The (inclusive) low value of the range high T The (inclusive) high value of the range comparer IComparer<T> The comparer used to evaluate the value's range Type Parameters T The type of the value to be compared Exceptions InRangeException Thrown when the value is not in the given range IsAssignableFrom(Type, object?) Verifies that an object is of the given type or a derived type. public static void IsAssignableFrom(Type expectedType, object? @object) Parameters expectedType Type The type the object should be object object The object to be evaluated Exceptions IsAssignableFromException Thrown when the object is not the given type IsAssignableFrom<T>(object?) Verifies that an object is of the given type or a derived type. public static T IsAssignableFrom<T>(object? @object) Parameters object object The object to be evaluated Returns T The object, casted to type T when successful Type Parameters T The type the object should be Exceptions IsAssignableFromException Thrown when the object is not the given type IsNotAssignableFrom(Type, object?) Verifies that an object is not of the given type or a derived type. public static void IsNotAssignableFrom(Type expectedType, object? @object) Parameters expectedType Type The type the object should not be object object The object to be evaluated Exceptions IsNotAssignableFromException Thrown when the object is of the given type IsNotAssignableFrom<T>(object?) Verifies that an object is not of the given type or a derived type. public static void IsNotAssignableFrom<T>(object? @object) Parameters object object The object to be evaluated Type Parameters T The type the object should not be Exceptions IsNotAssignableFromException Thrown when the object is of the given type IsNotType(Type, object?) Verifies that an object is not exactly the given type. public static void IsNotType(Type expectedType, object? @object) Parameters expectedType Type The type the object should not be object object The object to be evaluated Exceptions IsNotTypeException Thrown when the object is the given type IsNotType(Type, object?, bool) Verifies that an object is not of the given type. public static void IsNotType(Type expectedType, object? @object, bool exactMatch) Parameters expectedType Type The type the object should not be object object The object to be evaluated exactMatch bool Will only fail with an exact type match when true is passed; will fail with a compatible type match when false is passed. Exceptions IsNotTypeException Thrown when the object is the given type IsNotType<T>(object?) Verifies that an object is not exactly the given type. public static void IsNotType<T>(object? @object) Parameters object object The object to be evaluated Type Parameters T The type the object should not be Exceptions IsNotTypeException Thrown when the object is the given type IsNotType<T>(object?, bool) Verifies that an object is not of the given type. public static void IsNotType<T>(object? @object, bool exactMatch) Parameters object object The object to be evaluated exactMatch bool Will only fail with an exact type match when true is passed; will fail with a compatible type match when false is passed. Type Parameters T The type the object should not be Exceptions IsNotTypeException Thrown when the object is the given type IsType(Type, object?) Verifies that an object is exactly the given type (and not a derived type). public static void IsType(Type expectedType, object? @object) Parameters expectedType Type The type the object should be object object The object to be evaluated Exceptions IsTypeException Thrown when the object is not the given type IsType(Type, object?, bool) Verifies that an object is of the given type. public static void IsType(Type expectedType, object? @object, bool exactMatch) Parameters expectedType Type The type the object should be object object The object to be evaluated exactMatch bool Will only pass with an exact type match when true is passed; will pass with a compatible type match when false is passed. Exceptions IsTypeException Thrown when the object is not the given type IsType<T>(object?) Verifies that an object is exactly the given type (and not a derived type). public static T IsType<T>(object? @object) Parameters object object The object to be evaluated Returns T The object, casted to type T when successful Type Parameters T The type the object should be Exceptions IsTypeException Thrown when the object is not the given type IsType<T>(object?, bool) Verifies that an object of is the given type. public static T IsType<T>(object? @object, bool exactMatch) Parameters object object The object to be evaluated exactMatch bool Will only pass with an exact type match when true is passed; will pass with a compatible type match when false is passed. Returns T The object, casted to type T when successful Type Parameters T The type the object should be Exceptions IsTypeException Thrown when the object is not the given type Matches(string, string?) Verifies that a string matches a regular expression. public static void Matches(string expectedRegexPattern, string? actualString) Parameters expectedRegexPattern string The regex pattern expected to match actualString string The string to be inspected Exceptions MatchesException Thrown when the string does not match the regex pattern Matches(Regex, string?) Verifies that a string matches a regular expression. public static void Matches(Regex expectedRegex, string? actualString) Parameters expectedRegex Regex The regex expected to match actualString string The string to be inspected Exceptions MatchesException Thrown when the string does not match the regex Multiple(params Action[]) Runs multiple checks, collecting the exceptions from each one, and then bundles all failures up into a single assertion failure. public static void Multiple(params Action[] checks) Parameters checks Action[] The individual assertions to run, as actions. NotEmpty(IEnumerable) Verifies that a collection is not empty. public static void NotEmpty(IEnumerable collection) Parameters collection IEnumerable The collection to be inspected Exceptions ArgumentNullException Thrown when a null collection is passed NotEmptyException Thrown when the collection is empty NotEqual(decimal, decimal, int) Verifies that two decimal values are not equal, within the number of decimal places given by precision. public static void NotEqual(decimal expected, decimal actual, int precision) Parameters expected decimal The expected value actual decimal The value to be compared against precision int The number of decimal places (valid values: 0-28) NotEqual(double, double, double) Verifies that two double values are not equal, within the tolerance given by tolerance (positive or negative). public static void NotEqual(double expected, double actual, double tolerance) Parameters expected double The expected value actual double The value to be compared against tolerance double The allowed difference between values NotEqual(double, double, int) Verifies that two double values are not equal, within the number of decimal places given by precision. public static void NotEqual(double expected, double actual, int precision) Parameters expected double The expected value actual double The value to be compared against precision int The number of decimal places (valid values: 0-15) NotEqual(double, double, int, MidpointRounding) Verifies that two double values are not equal, within the number of decimal places given by precision. The values are rounded before comparison. The rounding method to use is given by rounding public static void NotEqual(double expected, double actual, int precision, MidpointRounding rounding) Parameters expected double The expected value actual double The value to be compared against precision int The number of decimal places (valid values: 0-15) rounding MidpointRounding Rounding method to use to process a number that is midway between two numbers NotEqual(float, float, int) Verifies that two float values are not equal, within the number of decimal places given by precision. public static void NotEqual(float expected, float actual, int precision) Parameters expected float The expected value actual float The value to be compared against precision int The number of decimal places (valid values: 0-15) NotEqual(float, float, int, MidpointRounding) Verifies that two float values are not equal, within the number of decimal places given by precision. The values are rounded before comparison. The rounding method to use is given by rounding public static void NotEqual(float expected, float actual, int precision, MidpointRounding rounding) Parameters expected float The expected value actual float The value to be compared against precision int The number of decimal places (valid values: 0-15) rounding MidpointRounding Rounding method to use to process a number that is midway between two numbers NotEqual(float, float, float) Verifies that two float values are not equal, within the tolerance given by tolerance (positive or negative). public static void NotEqual(float expected, float actual, float tolerance) Parameters expected float The expected value actual float The value to be compared against tolerance float The allowed difference between values NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?) Verifies that two sequences are not equivalent, using a default comparer. public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual) Parameters expected IEnumerable<T> The expected object actual IEnumerable<T> The actual object Type Parameters T The type of the objects to be compared Exceptions NotEqualException Thrown when the objects are equal NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>) Verifies that two sequences are not equivalent, using a custom equality comparer. public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer) Parameters expected IEnumerable<T> The expected object actual IEnumerable<T> The actual object comparer IEqualityComparer<T> The comparer used to compare the two objects Type Parameters T The type of the objects to be compared Exceptions NotEqualException Thrown when the objects are equal NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>) Verifies that two collections are not equal, using a comparer function against items in the two collections. public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer) Parameters expected IEnumerable<T> The expected value actual IEnumerable<T> The value to be compared against comparer Func<T, T, bool> The function to compare two items for equality Type Parameters T The type of the objects to be compared NotEqual<T>(T, T) Verifies that two objects are not equal, using a default comparer. public static void NotEqual<T>(T expected, T actual) Parameters expected T The expected object actual T The actual object Type Parameters T The type of the objects to be compared NotEqual<T>(T, T, IEqualityComparer<T>) Verifies that two objects are not equal, using a custom equality comparer. public static void NotEqual<T>(T expected, T actual, IEqualityComparer<T> comparer) Parameters expected T The expected object actual T The actual object comparer IEqualityComparer<T> The comparer used to examine the objects Type Parameters T The type of the objects to be compared NotEqual<T>(T, T, Func<T, T, bool>) Verifies that two objects are not equal, using a custom equality comparer function. public static void NotEqual<T>(T expected, T actual, Func<T, T, bool> comparer) Parameters expected T The expected object actual T The actual object comparer Func<T, T, bool> The comparer used to examine the objects Type Parameters T The type of the objects to be compared NotEqual<T>(T[], T[]) Verifies that two arrays of un-managed type T are not equal, using Span<T>.SequenceEqual. public static void NotEqual<T>(T[] expected, T[] actual) where T : unmanaged, IEquatable<T> Parameters expected T[] The expected value actual T[] The value to be compared against Type Parameters T The type of items whose arrays are to be compared NotInRange<T>(T, T, T) Verifies that a value is not within a given range, using the default comparer. public static void NotInRange<T>(T actual, T low, T high) where T : IComparable Parameters actual T The actual value to be evaluated low T The (inclusive) low value of the range high T The (inclusive) high value of the range Type Parameters T The type of the value to be compared Exceptions NotInRangeException Thrown when the value is in the given range NotInRange<T>(T, T, T, IComparer<T>) Verifies that a value is not within a given range, using a comparer. public static void NotInRange<T>(T actual, T low, T high, IComparer<T> comparer) Parameters actual T The actual value to be evaluated low T The (inclusive) low value of the range high T The (inclusive) high value of the range comparer IComparer<T> The comparer used to evaluate the value's range Type Parameters T The type of the value to be compared Exceptions NotInRangeException Thrown when the value is in the given range NotNull(object?) Verifies that an object reference is not null. public static void NotNull(object? @object) Parameters object object The object to be validated Exceptions NotNullException Thrown when the object reference is null NotNull<T>(T?) Verifies that a nullable struct value is not null. public static T NotNull<T>(T? value) where T : struct Parameters value T? The value to e validated Returns T The non-null value Type Parameters T The type of the struct Exceptions NotNullException Thrown when the value is null NotSame(object?, object?) Verifies that two objects are not the same instance. public static void NotSame(object? expected, object? actual) Parameters expected object The expected object instance actual object The actual object instance Exceptions NotSameException Thrown when the objects are the same instance NotStrictEqual<T>(T, T) Verifies that two objects are strictly not equal, using the type's default comparer. public static void NotStrictEqual<T>(T expected, T actual) Parameters expected T The expected object actual T The actual object Type Parameters T The type of the objects to be compared Null(object?) Verifies that an object reference is null. public static void Null(object? @object) Parameters object object The object to be inspected Exceptions NullException Thrown when the object reference is not null Null<T>(T?) Verifies that a nullable struct value is null. public static void Null<T>(T? value) where T : struct Parameters value T? The value to be inspected Type Parameters T Exceptions NullException Thrown when the value is not null ProperSubset<T>(ISet<T>, ISet<T>?) Verifies that a set is a proper subset of another set. public static void ProperSubset<T>(ISet<T> expectedSubset, ISet<T>? actual) Parameters expectedSubset ISet<T> The expected subset actual ISet<T> The set expected to be a proper subset Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the actual set is not a proper subset of the expected set ProperSuperset<T>(ISet<T>, ISet<T>?) Verifies that a set is a proper superset of another set. public static void ProperSuperset<T>(ISet<T> expectedSuperset, ISet<T>? actual) Parameters expectedSuperset ISet<T> The expected superset actual ISet<T> The set expected to be a proper superset Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the actual set is not a proper superset of the expected set PropertyChanged(INotifyPropertyChanged, string, Action) Verifies that the provided object raised PropertyChanged as a result of executing the given test code. public static void PropertyChanged(INotifyPropertyChanged @object, string propertyName, Action testCode) Parameters object INotifyPropertyChanged The object which should raise the notification propertyName string The property name for which the notification should be raised testCode Action The test code which should cause the notification to be raised Exceptions PropertyChangedException Thrown when the notification is not raised PropertyChangedAsync(INotifyPropertyChanged, string, Func<Task>) Verifies that the provided object raised PropertyChanged as a result of executing the given test code. public static Task PropertyChangedAsync(INotifyPropertyChanged @object, string propertyName, Func<Task> testCode) Parameters object INotifyPropertyChanged The object which should raise the notification propertyName string The property name for which the notification should be raised testCode Func<Task> The test code which should cause the notification to be raised Returns Task Exceptions PropertyChangedException Thrown when the notification is not raised Raises(Action<Action>, Action<Action>, Action) Verifies that an event is raised. public static void Raises(Action<Action> attach, Action<Action> detach, Action testCode) Parameters attach Action<Action> Code to attach the event handler detach Action<Action> Code to detach the event handler testCode Action A delegate to the code to be tested Exceptions RaisesException Thrown when the expected event was not raised. RaisesAny(Action<EventHandler>, Action<EventHandler>, Action) Verifies that an event is raised. public static Assert.RaisedEvent<EventArgs> RaisesAny(Action<EventHandler> attach, Action<EventHandler> detach, Action testCode) Parameters attach Action<EventHandler> Code to attach the event handler detach Action<EventHandler> Code to detach the event handler testCode Action A delegate to the code to be tested Returns Assert.RaisedEvent<EventArgs> The event sender and arguments wrapped in an object Exceptions RaisesException Thrown when the expected event was not raised. RaisesAnyAsync(Action<EventHandler>, Action<EventHandler>, Func<Task>) Verifies that an event is raised. public static Task<Assert.RaisedEvent<EventArgs>> RaisesAnyAsync(Action<EventHandler> attach, Action<EventHandler> detach, Func<Task> testCode) Parameters attach Action<EventHandler> Code to attach the event handler detach Action<EventHandler> Code to detach the event handler testCode Func<Task> A delegate to the code to be tested Returns Task<Assert.RaisedEvent<EventArgs>> The event sender and arguments wrapped in an object Exceptions RaisesException Thrown when the expected event was not raised. RaisesAnyAsync<T>(Action<Action<T>>, Action<Action<T>>, Func<Task>) Verifies that an event with the exact or a derived event args is raised. public static Task<Assert.RaisedEvent<T>> RaisesAnyAsync<T>(Action<Action<T>> attach, Action<Action<T>> detach, Func<Task> testCode) Parameters attach Action<Action<T>> Code to attach the event handler detach Action<Action<T>> Code to detach the event handler testCode Func<Task> A delegate to the code to be tested Returns Task<Assert.RaisedEvent<T>> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. RaisesAnyAsync<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Func<Task>) Verifies that an event with the exact or a derived event args is raised. public static Task<Assert.RaisedEvent<T>> RaisesAnyAsync<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Func<Task> testCode) Parameters attach Action<EventHandler<T>> Code to attach the event handler detach Action<EventHandler<T>> Code to detach the event handler testCode Func<Task> A delegate to the code to be tested Returns Task<Assert.RaisedEvent<T>> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. RaisesAny<T>(Action<Action<T>>, Action<Action<T>>, Action) Verifies that an event with the exact or a derived event args is raised. public static Assert.RaisedEvent<T> RaisesAny<T>(Action<Action<T>> attach, Action<Action<T>> detach, Action testCode) Parameters attach Action<Action<T>> Code to attach the event handler detach Action<Action<T>> Code to detach the event handler testCode Action A delegate to the code to be tested Returns Assert.RaisedEvent<T> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. RaisesAny<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Action) Verifies that an event with the exact or a derived event args is raised. public static Assert.RaisedEvent<T> RaisesAny<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Action testCode) Parameters attach Action<EventHandler<T>> Code to attach the event handler detach Action<EventHandler<T>> Code to detach the event handler testCode Action A delegate to the code to be tested Returns Assert.RaisedEvent<T> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. RaisesAsync(Action<Action>, Action<Action>, Func<Task>) Verifies that an event is raised. public static Task RaisesAsync(Action<Action> attach, Action<Action> detach, Func<Task> testCode) Parameters attach Action<Action> Code to attach the event handler detach Action<Action> Code to detach the event handler testCode Func<Task> A delegate to the code to be tested Returns Task The event sender and arguments wrapped in an object Exceptions RaisesException Thrown when the expected event was not raised. RaisesAsync<T>(Action<Action<T>>, Action<Action<T>>, Func<Task>) Verifies that an event with the exact event args (and not a derived type) is raised. public static Task<Assert.RaisedEvent<T>> RaisesAsync<T>(Action<Action<T>> attach, Action<Action<T>> detach, Func<Task> testCode) Parameters attach Action<Action<T>> Code to attach the event handler detach Action<Action<T>> Code to detach the event handler testCode Func<Task> A delegate to the code to be tested Returns Task<Assert.RaisedEvent<T>> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. RaisesAsync<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Func<Task>) Verifies that an event with the exact event args (and not a derived type) is raised. public static Task<Assert.RaisedEvent<T>> RaisesAsync<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Func<Task> testCode) Parameters attach Action<EventHandler<T>> Code to attach the event handler detach Action<EventHandler<T>> Code to detach the event handler testCode Func<Task> A delegate to the code to be tested Returns Task<Assert.RaisedEvent<T>> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. Raises<T>(Action<Action<T>>, Action<Action<T>>, Action) Verifies that an event with the exact event args is raised. public static Assert.RaisedEvent<T> Raises<T>(Action<Action<T>> attach, Action<Action<T>> detach, Action testCode) Parameters attach Action<Action<T>> Code to attach the event handler detach Action<Action<T>> Code to detach the event handler testCode Action A delegate to the code to be tested Returns Assert.RaisedEvent<T> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. Raises<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Action) Verifies that an event with the exact event args is raised. public static Assert.RaisedEvent<T> Raises<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Action testCode) Parameters attach Action<EventHandler<T>> Code to attach the event handler detach Action<EventHandler<T>> Code to detach the event handler testCode Action A delegate to the code to be tested Returns Assert.RaisedEvent<T> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. Raises<T>(Func<RaisedEvent<T>?>, Action, Action, Action) Verifies that an event with the exact event args is raised. public static Assert.RaisedEvent<T> Raises<T>(Func<Assert.RaisedEvent<T>?> handler, Action attach, Action detach, Action testCode) Parameters handler Func<Assert.RaisedEvent<T>> Code returning the raised event attach Action Code to attach the event handler detach Action Code to detach the event handler testCode Action A delegate to the code to be tested Returns Assert.RaisedEvent<T> The event sender and arguments wrapped in an object Type Parameters T The type of the event arguments to expect Exceptions RaisesException Thrown when the expected event was not raised. RecordException(Action) Records any exception which is thrown by the given code. protected static Exception? RecordException(Action testCode) Parameters testCode Action The code which may thrown an exception. Returns Exception Returns the exception that was thrown by the code; null, otherwise. RecordException(Func<object?>, string) Records any exception which is thrown by the given code that has a return value. Generally used for testing property accessors. protected static Exception? RecordException(Func<object?> testCode, string asyncMethodName) Parameters testCode Func<object> The code which may thrown an exception. asyncMethodName string The name of the async method the user should've called if they accidentally passed in an async function Returns Exception Returns the exception that was thrown by the code; null, otherwise. RecordExceptionAsync(Func<Task>) Records any exception which is thrown by the given task. protected static Task<Exception?> RecordExceptionAsync(Func<Task> testCode) Parameters testCode Func<Task> The task which may thrown an exception. Returns Task<Exception> Returns the exception that was thrown by the code; null, otherwise. Same(object?, object?) Verifies that two objects are the same instance. public static void Same(object? expected, object? actual) Parameters expected object The expected object instance actual object The actual object instance Exceptions SameException Thrown when the objects are not the same instance Single(IEnumerable) Verifies that the given collection contains only a single element of the given type. public static object? Single(IEnumerable collection) Parameters collection IEnumerable The collection. Returns object The single item in the collection. Exceptions SingleException Thrown when the collection does not contain exactly one element. Single(IEnumerable, object?) Verifies that the given collection contains only a single element of the given value. The collection may or may not contain other values. public static void Single(IEnumerable collection, object? expected) Parameters collection IEnumerable The collection. expected object The value to find in the collection. Exceptions SingleException Thrown when the collection does not contain exactly one element. Single<T>(IEnumerable<T>) Verifies that the given collection contains only a single element of the given type. public static T Single<T>(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection. Returns T The single item in the collection. Type Parameters T The collection type. Exceptions SingleException Thrown when the collection does not contain exactly one element. Single<T>(IEnumerable<T>, Predicate<T>) Verifies that the given collection contains only a single element of the given type which matches the given predicate. The collection may or may not contain other values which do not match the given predicate. public static T Single<T>(IEnumerable<T> collection, Predicate<T> predicate) Parameters collection IEnumerable<T> The collection. predicate Predicate<T> The item matching predicate. Returns T The single item in the filtered collection. Type Parameters T The collection type. Exceptions SingleException Thrown when the filtered collection does not contain exactly one element. Skip(string) Skips the current test. Used when determining whether a test should be skipped happens at runtime rather than at discovery time. public static void Skip(string reason) Parameters reason string The message to indicate why the test was skipped SkipUnless(bool, string) Will skip the current test unless condition evaluates to true. public static void SkipUnless(bool condition, string reason) Parameters condition bool When true, the test will continue to run; when false, the test will be skipped reason string The message to indicate why the test was skipped SkipWhen(bool, string) Will skip the current test when condition evaluates to true. public static void SkipWhen(bool condition, string reason) Parameters condition bool When true, the test will be skipped; when false, the test will continue to run reason string The message to indicate why the test was skipped StartsWith(Memory<char>, Memory<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString) Parameters expectedStartString Memory<char> The sub-string expected to be at the start of the string actualString Memory<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Memory<char>, Memory<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString Memory<char> The sub-string expected to be at the start of the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Memory<char>, ReadOnlyMemory<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString) Parameters expectedStartString Memory<char> The sub-string expected to be at the start of the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString Memory<char> The sub-string expected to be at the start of the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlyMemory<char>, Memory<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString) Parameters expectedStartString ReadOnlyMemory<char> The sub-string expected to be at the start of the string actualString Memory<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString ReadOnlyMemory<char> The sub-string expected to be at the start of the string actualString Memory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>) Verifies that a string starts with a given sub-string, using the default StringComparison.CurrentCulture comparison type. public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString) Parameters expectedStartString ReadOnlyMemory<char> The sub-string expected to be at the start of the string actualString ReadOnlyMemory<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString ReadOnlyMemory<char> The sub-string expected to be at the start of the string actualString ReadOnlyMemory<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString) Parameters expectedStartString ReadOnlySpan<char> The sub-string expected to be at the start of the string actualString ReadOnlySpan<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString ReadOnlySpan<char> The sub-string expected to be at the start of the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlySpan<char>, Span<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString) Parameters expectedStartString ReadOnlySpan<char> The sub-string expected to be at the start of the string actualString Span<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString ReadOnlySpan<char> The sub-string expected to be at the start of the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Span<char>, ReadOnlySpan<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString) Parameters expectedStartString Span<char> The sub-string expected to be at the start of the string actualString ReadOnlySpan<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString Span<char> The sub-string expected to be at the start of the string actualString ReadOnlySpan<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Span<char>, Span<char>) Verifies that a string starts with a given sub-string, using the current culture. public static void StartsWith(Span<char> expectedStartString, Span<char> actualString) Parameters expectedStartString Span<char> The sub-string expected to be at the start of the string actualString Span<char> The string to be inspected Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(Span<char>, Span<char>, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(Span<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture) Parameters expectedStartString Span<char> The sub-string expected to be at the start of the string actualString Span<char> The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions StartsWithException Thrown when the string does not start with the expected sub-string StartsWith(string?, string?) Verifies that a string starts with a given string, using the current culture. public static void StartsWith(string? expectedStartString, string? actualString) Parameters expectedStartString string The string expected to be at the start of the string actualString string The string to be inspected Exceptions ContainsException Thrown when the string does not start with the expected sub-string StartsWith(string?, string?, StringComparison) Verifies that a string starts with a given sub-string, using the given comparison type. public static void StartsWith(string? expectedStartString, string? actualString, StringComparison comparisonType) Parameters expectedStartString string The sub-string expected to be at the start of the string actualString string The string to be inspected comparisonType StringComparison The type of string comparison to perform Exceptions ContainsException Thrown when the string does not start with the expected sub-string StrictEqual<T>(T, T) Verifies that two objects are strictly equal, using the type's default comparer. public static void StrictEqual<T>(T expected, T actual) Parameters expected T The expected value actual T The value to be compared against Type Parameters T The type of the objects to be compared Subset<T>(ISet<T>, ISet<T>?) Verifies that a set is a subset of another set. public static void Subset<T>(ISet<T> expectedSubset, ISet<T>? actual) Parameters expectedSubset ISet<T> The expected subset actual ISet<T> The set expected to be a subset Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the actual set is not a subset of the expected set Superset<T>(ISet<T>, ISet<T>?) Verifies that a set is a superset of another set. public static void Superset<T>(ISet<T> expectedSuperset, ISet<T>? actual) Parameters expectedSuperset ISet<T> The expected superset actual ISet<T> The set expected to be a superset Type Parameters T The type of the object to be verified Exceptions ContainsException Thrown when the actual set is not a superset of the expected set Throws(Type, Action) Verifies that the exact exception is thrown (and not a derived exception type). public static Exception Throws(Type exceptionType, Action testCode) Parameters exceptionType Type The type of the exception expected to be thrown testCode Action A delegate to the code to be tested Returns Exception The exception that was thrown, when successful Throws(Type, Func<object?>) Verifies that the exact exception is thrown (and not a derived exception type). Generally used to test property accessors. public static Exception Throws(Type exceptionType, Func<object?> testCode) Parameters exceptionType Type The type of the exception expected to be thrown testCode Func<object> A delegate to the code to be tested Returns Exception The exception that was thrown, when successful ThrowsAnyAsync<T>(Func<Task>) Verifies that the exact exception or a derived exception type is thrown. public static Task<T> ThrowsAnyAsync<T>(Func<Task> testCode) where T : Exception Parameters testCode Func<Task> A delegate to the task to be tested Returns Task<T> The exception that was thrown, when successful Type Parameters T The type of the exception expected to be thrown ThrowsAny<T>(Action) Verifies that the exact exception or a derived exception type is thrown. public static T ThrowsAny<T>(Action testCode) where T : Exception Parameters testCode Action A delegate to the code to be tested Returns T The exception that was thrown, when successful Type Parameters T The type of the exception expected to be thrown ThrowsAny<T>(Func<object?>) Verifies that the exact exception or a derived exception type is thrown. Generally used to test property accessors. public static T ThrowsAny<T>(Func<object?> testCode) where T : Exception Parameters testCode Func<object> A delegate to the code to be tested Returns T The exception that was thrown, when successful Type Parameters T The type of the exception expected to be thrown ThrowsAsync(Type, Func<Task>) Verifies that the exact exception is thrown (and not a derived exception type). public static Task<Exception> ThrowsAsync(Type exceptionType, Func<Task> testCode) Parameters exceptionType Type The type of the exception expected to be thrown testCode Func<Task> A delegate to the task to be tested Returns Task<Exception> The exception that was thrown, when successful ThrowsAsync<T>(Func<Task>) Verifies that the exact exception is thrown (and not a derived exception type). public static Task<T> ThrowsAsync<T>(Func<Task> testCode) where T : Exception Parameters testCode Func<Task> A delegate to the task to be tested Returns Task<T> The exception that was thrown, when successful Type Parameters T The type of the exception expected to be thrown ThrowsAsync<T>(string?, Func<Task>) Verifies that the exact exception is thrown (and not a derived exception type), where the exception derives from ArgumentException and has the given parameter name. public static Task<T> ThrowsAsync<T>(string? paramName, Func<Task> testCode) where T : ArgumentException Parameters paramName string The parameter name that is expected to be in the exception testCode Func<Task> A delegate to the task to be tested Returns Task<T> The exception that was thrown, when successful Type Parameters T Throws<T>(Action) Verifies that the exact exception is thrown (and not a derived exception type). public static T Throws<T>(Action testCode) where T : Exception Parameters testCode Action A delegate to the code to be tested Returns T The exception that was thrown, when successful Type Parameters T The type of the exception expected to be thrown Throws<T>(Func<object?>) Verifies that the exact exception is thrown (and not a derived exception type). Generally used to test property accessors. public static T Throws<T>(Func<object?> testCode) where T : Exception Parameters testCode Func<object> A delegate to the code to be tested Returns T The exception that was thrown, when successful Type Parameters T The type of the exception expected to be thrown Throws<T>(string?, Action) Verifies that the exact exception is thrown (and not a derived exception type), where the exception derives from ArgumentException and has the given parameter name. public static T Throws<T>(string? paramName, Action testCode) where T : ArgumentException Parameters paramName string The parameter name that is expected to be in the exception testCode Action A delegate to the code to be tested Returns T The exception that was thrown, when successful Type Parameters T Throws<T>(string?, Func<object?>) Verifies that the exact exception is thrown (and not a derived exception type), where the exception derives from ArgumentException and has the given parameter name. public static T Throws<T>(string? paramName, Func<object?> testCode) where T : ArgumentException Parameters paramName string The parameter name that is expected to be in the exception testCode Func<object> A delegate to the code to be tested Returns T The exception that was thrown, when successful Type Parameters T True(bool) Verifies that an expression is true. public static void True(bool condition) Parameters condition bool The condition to be inspected Exceptions TrueException Thrown when the condition is false True(bool, string?) Verifies that an expression is true. public static void True(bool condition, string? userMessage) Parameters condition bool The condition to be inspected userMessage string The message to be shown when the condition is false Exceptions TrueException Thrown when the condition is false True(bool?) Verifies that an expression is true. public static void True(bool? condition) Parameters condition bool? The condition to be inspected Exceptions TrueException Thrown when the condition is false True(bool?, string?) Verifies that an expression is true. public static void True(bool? condition, string? userMessage) Parameters condition bool? The condition to be inspected userMessage string The message to be shown when the condition is false Exceptions TrueException Thrown when the condition is false"
  },
  "v3/2.0.0/Xunit.AssertEquivalenceComparer-1.html": {
    "href": "v3/2.0.0/Xunit.AssertEquivalenceComparer-1.html",
    "title": "Class AssertEquivalenceComparer<T> | xunit",
    "summary": "Class AssertEquivalenceComparer<T> Namespace Xunit Assembly xunit.v3.assert.dll An implementation of IEqualityComparer<T> that uses the same logic from Equivalent(object?, object?, bool). public class AssertEquivalenceComparer<T> : IEqualityComparer<T> Type Parameters T The item type being compared Inheritance object AssertEquivalenceComparer<T> Implements IEqualityComparer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks A generic version of this is provided so that it can be used with Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>) to ensure strict ordering of collections while doing equivalence comparisons for the items inside the collection, per https://github.com/xunit/xunit/discussions/3186. Constructors AssertEquivalenceComparer(bool) Initializes a new instance of the AssertEquivalenceComparer<T> class. public AssertEquivalenceComparer(bool strict) Parameters strict bool A flag indicating whether comparisons should be strict. Methods Equals(T?, T?) public bool Equals(T? x, T? y) Parameters x T y T Returns bool GetHashCode(T) public int GetHashCode(T obj) Parameters obj T Returns int"
  },
  "v3/2.0.0/Xunit.AssertEquivalenceComparer.html": {
    "href": "v3/2.0.0/Xunit.AssertEquivalenceComparer.html",
    "title": "Class AssertEquivalenceComparer | xunit",
    "summary": "Class AssertEquivalenceComparer Namespace Xunit Assembly xunit.v3.assert.dll An implementation of IEqualityComparer that uses the same logic from Equivalent(object?, object?, bool). public class AssertEquivalenceComparer : IEqualityComparer Inheritance object AssertEquivalenceComparer Implements IEqualityComparer Inherited Members object.Equals(object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors AssertEquivalenceComparer(bool) Initializes a new instance of the AssertEquivalenceComparer class. public AssertEquivalenceComparer(bool strict) Parameters strict bool A flag indicating whether comparisons should be strict. Methods Equals(object?, object?) public bool Equals(object? x, object? y) Parameters x object y object Returns bool GetHashCode(object) public int GetHashCode(object obj) Parameters obj object Returns int"
  },
  "v3/2.0.0/Xunit.CaptureConsoleAttribute.html": {
    "href": "v3/2.0.0/Xunit.CaptureConsoleAttribute.html",
    "title": "Class CaptureConsoleAttribute | xunit",
    "summary": "Class CaptureConsoleAttribute Namespace Xunit Assembly xunit.v3.core.dll Captures Console output (Out and/or Error) and reports it to the test output helper. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)] public sealed class CaptureConsoleAttribute : BeforeAfterTestAttribute, IBeforeAfterTestAttribute Inheritance object Attribute BeforeAfterTestAttribute CaptureConsoleAttribute Implements IBeforeAfterTestAttribute Inherited Members BeforeAfterTestAttribute.After(MethodInfo, IXunitTest) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CaptureError Gets or sets a flag to indicate whether to override Error. public bool CaptureError { get; set; } Property Value bool CaptureOut Gets or sets a flag to indicate whether to override Out (which includes the Write and WriteLine methods on Console). public bool CaptureOut { get; set; } Property Value bool Methods Before(MethodInfo, IXunitTest) This method is called before the test method is executed. public override void Before(MethodInfo methodUnderTest, IXunitTest test) Parameters methodUnderTest MethodInfo The method under test test IXunitTest The current ITest"
  },
  "v3/2.0.0/Xunit.CaptureTraceAttribute.html": {
    "href": "v3/2.0.0/Xunit.CaptureTraceAttribute.html",
    "title": "Class CaptureTraceAttribute | xunit",
    "summary": "Class CaptureTraceAttribute Namespace Xunit Assembly xunit.v3.core.dll Captures Trace and Debug output and reports it to the test output helper. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)] public sealed class CaptureTraceAttribute : BeforeAfterTestAttribute, IBeforeAfterTestAttribute Inheritance object Attribute BeforeAfterTestAttribute CaptureTraceAttribute Implements IBeforeAfterTestAttribute Inherited Members BeforeAfterTestAttribute.After(MethodInfo, IXunitTest) Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Before(MethodInfo, IXunitTest) This method is called before the test method is executed. public override void Before(MethodInfo methodUnderTest, IXunitTest test) Parameters methodUnderTest MethodInfo The method under test test IXunitTest The current ITest"
  },
  "v3/2.0.0/Xunit.ClassDataAttribute.html": {
    "href": "v3/2.0.0/Xunit.ClassDataAttribute.html",
    "title": "Class ClassDataAttribute | xunit",
    "summary": "Class ClassDataAttribute Namespace Xunit Assembly xunit.v3.core.dll Provides a data source for a data theory, with the data coming from a class which must implement IEnumerable<object?[]>. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class ClassDataAttribute : DataAttribute, IDataAttribute Inheritance object Attribute DataAttribute ClassDataAttribute Implements IDataAttribute Inherited Members DataAttribute.Explicit DataAttribute.ExplicitAsNullable DataAttribute.Skip DataAttribute.TestDisplayName DataAttribute.Timeout DataAttribute.TimeoutAsNullable DataAttribute.Traits Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ClassDataAttribute(Type) Provides a data source for a data theory, with the data coming from a class which must implement IEnumerable<object?[]>. public ClassDataAttribute(Type @class) Parameters class Type The class that provides the data. Properties Class Gets the type of the class that provides the data. public Type Class { get; } Property Value Type Methods ConvertDataRow(object) Converts an item yielded by the data attribute to an ITheoryDataRow, for return from GetData(MethodInfo, DisposalTracker). Items yielded will typically be object[], ITheoryDataRow, or System.Runtime.CompilerServices.ITuple, but this override will allow derived attribute types to support additional data items. If the data item cannot be converted, this method will throw ArgumentException. protected override ITheoryDataRow ConvertDataRow(object dataRow) Parameters dataRow object An item yielded from the data member. Returns ITheoryDataRow An ITheoryDataRow suitable for return from GetData(MethodInfo, DisposalTracker). Exceptions ArgumentException Thrown when dataRow does not point to a valid data row (must be compatible with object[] or ITheoryDataRow). GetData(MethodInfo, DisposalTracker) Returns the data to be used to test the theory. public override ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(MethodInfo testMethod, DisposalTracker disposalTracker) Parameters testMethod MethodInfo The test method the data attribute is attached to disposalTracker DisposalTracker The disposal tracker used to dispose the data Returns ValueTask<IReadOnlyCollection<ITheoryDataRow>> SupportsDiscoveryEnumeration() Returns true if the data attribute supports enumeration during discovery; false otherwise. Data attributes with expensive computational costs and/or randomized data sets should return false. public override bool SupportsDiscoveryEnumeration() Returns bool"
  },
  "v3/2.0.0/Xunit.CollectionAttribute-1.html": {
    "href": "v3/2.0.0/Xunit.CollectionAttribute-1.html",
    "title": "Class CollectionAttribute<TCollectionDefinition> | xunit",
    "summary": "Class CollectionAttribute<TCollectionDefinition> Namespace Xunit Assembly xunit.v3.core.dll Used to declare a specific test collection for a test class. Equivalent to using CollectionAttribute with the type-based constructor. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class CollectionAttribute<TCollectionDefinition> : Attribute, ICollectionAttribute Type Parameters TCollectionDefinition The type for the collection definition. Inheritance object Attribute CollectionAttribute<TCollectionDefinition> Implements ICollectionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks .NET Framework does not support generic attributes. Please use the non-generic CollectionAttribute when targeting .NET Framework. Properties Name Gets the name of the collection. public string Name { get; } Property Value string Type Gets the collection definition type. Returns null if the collection is purely based on name. public Type? Type { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.CollectionAttribute.html": {
    "href": "v3/2.0.0/Xunit.CollectionAttribute.html",
    "title": "Class CollectionAttribute | xunit",
    "summary": "Class CollectionAttribute Namespace Xunit Assembly xunit.v3.core.dll Used to declare a specific test collection for a test class. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class CollectionAttribute : Attribute, ICollectionAttribute Inheritance object Attribute CollectionAttribute Implements ICollectionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors CollectionAttribute(string) Initializes a new instance of the CollectionAttribute class, with the given collection name. public CollectionAttribute(string name) Parameters name string The test collection name. CollectionAttribute(Type) Initializes a new instance of the CollectionAttribute class based on a collection definition type, with an auto-generated name based on that type. Equivalent to using CollectionAttribute<TCollectionDefinition>. public CollectionAttribute(Type type) Parameters type Type The type representing the collection fixture. Properties Name Gets the name of the collection. If CollectionAttribute(string) was called, will return the provided name; if CollectionAttribute(Type) was called, will return a synthetic name for the type. public string Name { get; } Property Value string Type Gets the collection definition type. Returns null if the collection is purely based on name. public Type? Type { get; } Property Value Type Methods GetCollectionNameForType(Type) Gets the collection name that will result for a given type. public static string GetCollectionNameForType(Type type) Parameters type Type The collection type Returns string"
  },
  "v3/2.0.0/Xunit.CollectionBehavior.html": {
    "href": "v3/2.0.0/Xunit.CollectionBehavior.html",
    "title": "Enum CollectionBehavior | xunit",
    "summary": "Enum CollectionBehavior Namespace Xunit Assembly xunit.v3.core.dll Defines the built-in behavior types for collections in xUnit.net. public enum CollectionBehavior Fields CollectionPerAssembly = 0 By default, generates a collection per assembly, and any test classes that are not decorated with CollectionAttribute or CollectionAttribute<TCollectionDefinition> (or any class that implements ICollectionAttribute) will be placed into the assembly-level collection. CollectionPerClass = 1 By default, generates a collection per test class for any test classes that are not decorated with CollectionAttribute or CollectionAttribute<TCollectionDefinition> (or any class that implements ICollectionAttribute)."
  },
  "v3/2.0.0/Xunit.CollectionBehaviorAttribute.html": {
    "href": "v3/2.0.0/Xunit.CollectionBehaviorAttribute.html",
    "title": "Class CollectionBehaviorAttribute | xunit",
    "summary": "Class CollectionBehaviorAttribute Namespace Xunit Assembly xunit.v3.core.dll Default implementation of ICollectionBehaviorAttribute. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)] public sealed class CollectionBehaviorAttribute : Attribute, ICollectionBehaviorAttribute Inheritance object Attribute CollectionBehaviorAttribute Implements ICollectionBehaviorAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors CollectionBehaviorAttribute() Initializes a new instance of the CollectionBehaviorAttribute class. Uses the default collection behavior (CollectionPerClass). public CollectionBehaviorAttribute() CollectionBehaviorAttribute(Type) Initializes a new instance of the CollectionBehaviorAttribute class with the given custom collection behavior. public CollectionBehaviorAttribute(Type collectionFactoryType) Parameters collectionFactoryType Type The factory type CollectionBehaviorAttribute(CollectionBehavior) Initializes a new instance of the CollectionBehaviorAttribute class with the given built-in collection behavior. public CollectionBehaviorAttribute(CollectionBehavior collectionBehavior) Parameters collectionBehavior CollectionBehavior The collection behavior for the assembly. Properties CollectionFactoryType Gets the collection factory type specified by this collection behavior attribute. public Type? CollectionFactoryType { get; } Property Value Type DisableTestParallelization Determines whether tests in this assembly are run in parallel. public bool DisableTestParallelization { get; set; } Property Value bool MaxParallelThreads Determines how many tests can run in parallel with each other. If set to 0, the system will use ProcessorCount. If set to a negative number, then there will be no limit to the number of threads. public int MaxParallelThreads { get; set; } Property Value int ParallelAlgorithm Determines the parallel algorithm used when running tests in parallel. public ParallelAlgorithm ParallelAlgorithm { get; set; } Property Value ParallelAlgorithm"
  },
  "v3/2.0.0/Xunit.CollectionDefinitionAttribute.html": {
    "href": "v3/2.0.0/Xunit.CollectionDefinitionAttribute.html",
    "title": "Class CollectionDefinitionAttribute | xunit",
    "summary": "Class CollectionDefinitionAttribute Namespace Xunit Assembly xunit.v3.core.dll Used to declare a test collection container class. The container class gives developers a place to attach interfaces like IClassFixture<TFixture> and ICollectionFixture<TFixture> that will be applied to all tests classes that are members of the test collection. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class CollectionDefinitionAttribute : Attribute Inheritance object Attribute CollectionDefinitionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors CollectionDefinitionAttribute() Initializes a new instance of the CollectionDefinitionAttribute class. Use this constructor when collection references by test classes use the generic CollectionAttribute<TCollectionDefinition> attribute or refer to the fixture class using CollectionAttribute(Type). public CollectionDefinitionAttribute() CollectionDefinitionAttribute(string) Initializes a new instance of the CollectionDefinitionAttribute class. Use this constructor when collection references by test classes use CollectionAttribute(string). public CollectionDefinitionAttribute(string name) Parameters name string The test collection name. Properties DisableParallelization Determines whether tests in this collection runs in parallel with any other collections. public bool DisableParallelization { get; set; } Property Value bool Name Gets the collection defintion name, if one was provided. public string? Name { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.FactAttribute.html": {
    "href": "v3/2.0.0/Xunit.FactAttribute.html",
    "title": "Class FactAttribute | xunit",
    "summary": "Class FactAttribute Namespace Xunit Assembly xunit.v3.core.dll Attribute that is applied to a method to indicate that it is a fact that should be run by the default test runner. [XunitTestCaseDiscoverer(typeof(FactDiscoverer))] [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class FactAttribute : Attribute, IFactAttribute Inheritance object Attribute FactAttribute Implements IFactAttribute Derived TheoryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties DisplayName Gets the name of the test to be used when the test is skipped. When null is returned, will cause a default display name to be used. public string? DisplayName { get; set; } Property Value string Explicit Gets a flag which indicates whether the test should only be run explicitly. An explicit test is skipped by default unless explicit tests are requested to be run. public bool Explicit { get; set; } Property Value bool Skip Gets the skip reason for the test. When null is returned, the test is not skipped. public string? Skip { get; set; } Property Value string Remarks Skipping is conditional based on whether SkipWhen or SkipUnless is set. SkipExceptions Gets exceptions that, when thrown, will cause the test to be skipped rather than failed. public Type[]? SkipExceptions { get; set; } Property Value Type[] Remarks The skip reason will be the exception's message. SkipType Gets the type to retrieve SkipUnless or SkipWhen from. If not set, then the property will be retrieved from the unit test class. public Type? SkipType { get; set; } Property Value Type SkipUnless Gets the name of a public static property on the test class which returns bool to indicate whether the test should be skipped (false) or not (true). public string? SkipUnless { get; set; } Property Value string Remarks This property cannot be set if SkipWhen is set. Setting both will result in a failed test. To ensure compile-time safety and easier refactoring, use the nameof operator, e.g., SkipUnless = nameof(IsConditionMet). SkipWhen Gets the name of a public static property on the test class which returns bool to indicate whether the test should be skipped (true) or not (false). public string? SkipWhen { get; set; } Property Value string Remarks This property cannot be set if SkipUnless is set. Setting both will result in a failed test. To avoid issues during refactoring, it is recommended to use the nameof operator to reference the property, e.g., SkipWhen = nameof(IsTestSkipped). Timeout Gets the timeout for test (in milliseconds). When 0 is returned, the test will not have a timeout. public int Timeout { get; set; } Property Value int Remarks WARNING: Using this with Aggressive will result in undefined behavior. Test timing and timeouts are only reliable when using Conservative (or when parallelization is disabled completely)."
  },
  "v3/2.0.0/Xunit.FrontControllerFindAndRunSettings.html": {
    "href": "v3/2.0.0/Xunit.FrontControllerFindAndRunSettings.html",
    "title": "Class FrontControllerFindAndRunSettings | xunit",
    "summary": "Class FrontControllerFindAndRunSettings Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Contains the information by FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). public class FrontControllerFindAndRunSettings : FrontControllerSettingsBase Inheritance object FrontControllerSettingsBase FrontControllerFindAndRunSettings Inherited Members FrontControllerSettingsBase.LaunchOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors FrontControllerFindAndRunSettings(ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, XunitFilters?) Contains the information by FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). public FrontControllerFindAndRunSettings(ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, XunitFilters? filters = null) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The options used during discovery executionOptions ITestFrameworkExecutionOptions The options used during execution filters XunitFilters The optional filters (when not provided, finds all tests) Properties DiscoveryOptions The options used during discovery. public ITestFrameworkDiscoveryOptions DiscoveryOptions { get; } Property Value ITestFrameworkDiscoveryOptions ExecutionOptions The options used during execution. public ITestFrameworkExecutionOptions ExecutionOptions { get; } Property Value ITestFrameworkExecutionOptions Filters Get the test case filters used during discovery. public XunitFilters Filters { get; } Property Value XunitFilters"
  },
  "v3/2.0.0/Xunit.FrontControllerFindSettings.html": {
    "href": "v3/2.0.0/Xunit.FrontControllerFindSettings.html",
    "title": "Class FrontControllerFindSettings | xunit",
    "summary": "Class FrontControllerFindSettings Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Contains the information by Find(IMessageSink, FrontControllerFindSettings). public class FrontControllerFindSettings : FrontControllerSettingsBase Inheritance object FrontControllerSettingsBase FrontControllerFindSettings Inherited Members FrontControllerSettingsBase.LaunchOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors FrontControllerFindSettings(ITestFrameworkDiscoveryOptions, XunitFilters?) Contains the information by Find(IMessageSink, FrontControllerFindSettings). public FrontControllerFindSettings(ITestFrameworkDiscoveryOptions options, XunitFilters? filters = null) Parameters options ITestFrameworkDiscoveryOptions The discovery options filters XunitFilters The optional filters (when not provided, finds all tests) Properties Filters Get the test case filters used during discovery. public XunitFilters Filters { get; } Property Value XunitFilters Options The options used during discovery. public ITestFrameworkDiscoveryOptions Options { get; } Property Value ITestFrameworkDiscoveryOptions"
  },
  "v3/2.0.0/Xunit.FrontControllerLaunchOptions.html": {
    "href": "v3/2.0.0/Xunit.FrontControllerLaunchOptions.html",
    "title": "Class FrontControllerLaunchOptions | xunit",
    "summary": "Class FrontControllerLaunchOptions Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Launch options when using IFrontController and/or IFrontControllerDiscoverer. Current only supported by v3 test projects (all options will be ignored for v1/v2 test projects). public class FrontControllerLaunchOptions Inheritance object FrontControllerLaunchOptions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties WaitForDebugger Wait for a debugger to be attached before performing any operations. public bool WaitForDebugger { get; set; } Property Value bool"
  },
  "v3/2.0.0/Xunit.FrontControllerRunSettings.html": {
    "href": "v3/2.0.0/Xunit.FrontControllerRunSettings.html",
    "title": "Class FrontControllerRunSettings | xunit",
    "summary": "Class FrontControllerRunSettings Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Contains the information by Run(IMessageSink, FrontControllerRunSettings). public class FrontControllerRunSettings : FrontControllerSettingsBase Inheritance object FrontControllerSettingsBase FrontControllerRunSettings Inherited Members FrontControllerSettingsBase.LaunchOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors FrontControllerRunSettings(ITestFrameworkExecutionOptions, IReadOnlyCollection<string>) Contains the information by Run(IMessageSink, FrontControllerRunSettings). public FrontControllerRunSettings(ITestFrameworkExecutionOptions options, IReadOnlyCollection<string> serializedTestCases) Parameters options ITestFrameworkExecutionOptions The options used during execution serializedTestCases IReadOnlyCollection<string> The test cases to be run Properties Options The options used during execution. public ITestFrameworkExecutionOptions Options { get; } Property Value ITestFrameworkExecutionOptions SerializedTestCases Get the list of test cases to be run. public IReadOnlyCollection<string> SerializedTestCases { get; } Property Value IReadOnlyCollection<string>"
  },
  "v3/2.0.0/Xunit.FrontControllerSettingsBase.html": {
    "href": "v3/2.0.0/Xunit.FrontControllerSettingsBase.html",
    "title": "Class FrontControllerSettingsBase | xunit",
    "summary": "Class FrontControllerSettingsBase Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Base class for all invocations of IFrontController and IFrontControllerDiscoverer. public class FrontControllerSettingsBase Inheritance object FrontControllerSettingsBase Derived FrontControllerFindAndRunSettings FrontControllerFindSettings FrontControllerRunSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties LaunchOptions Launch options. Currently only applicable to v3 test projects. public FrontControllerLaunchOptions LaunchOptions { get; } Property Value FrontControllerLaunchOptions"
  },
  "v3/2.0.0/Xunit.IAsyncLifetime.html": {
    "href": "v3/2.0.0/Xunit.IAsyncLifetime.html",
    "title": "Interface IAsyncLifetime | xunit",
    "summary": "Interface IAsyncLifetime Namespace Xunit Assembly xunit.v3.core.dll Used to provide asynchronous lifetime functionality. Currently supported: Test classes Classes used in IClassFixture<TFixture> Classes used in ICollectionFixture<TFixture>. Classes used in [assembly: AssemblyFixtureAttribute()]. public interface IAsyncLifetime : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods InitializeAsync() Called immediately after the class has been created, before it is used. ValueTask InitializeAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.IClassFixture-1.html": {
    "href": "v3/2.0.0/Xunit.IClassFixture-1.html",
    "title": "Interface IClassFixture<TFixture> | xunit",
    "summary": "Interface IClassFixture<TFixture> Namespace Xunit Assembly xunit.v3.core.dll Used to decorate xUnit.net test classes and collections to indicate a test which has per-test-class fixture data. An instance of the fixture data is initialized just before the first test in the class is run (including InitializeAsync() if it's implemented). After all the tests in the test class have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Class fixtures may have a public constructor which is either empty, or accepts one or more assembly and/or collection fixture objects as constructor arguments. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which/ exactly matches the TFixture. public interface IClassFixture<TFixture> where TFixture : class Type Parameters TFixture The type of the fixture. Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.ICollectionFixture-1.html": {
    "href": "v3/2.0.0/Xunit.ICollectionFixture-1.html",
    "title": "Interface ICollectionFixture<TFixture> | xunit",
    "summary": "Interface ICollectionFixture<TFixture> Namespace Xunit Assembly xunit.v3.core.dll Used to decorate xUnit.net test classes and collections to indicate a test which has per-test-collection fixture data. An instance of the fixture data is initialized just before the first test in the collection is run (including InitializeAsync() if it's implemented). After all the tests in the collection have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Collection fixtures may have a public constructor which is either empty, or accepts one or more assembly fixture objects as constructor arguments. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the TFixture. public interface ICollectionFixture<TFixture> where TFixture : class Type Parameters TFixture The type of the fixture. Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.IFrontController.html": {
    "href": "v3/2.0.0/Xunit.IFrontController.html",
    "title": "Interface IFrontController | xunit",
    "summary": "Interface IFrontController Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Represents a class which acts as a front controller for unit testing frameworks. This allows runners to run tests from multiple unit testing frameworks (in particular, hiding the differences between xUnit.net v1, v2, and v3 tests). public interface IFrontController : IFrontControllerDiscoverer, IAsyncDisposable Inherited Members IFrontControllerDiscoverer.CanUseAppDomains IFrontControllerDiscoverer.TargetFramework IFrontControllerDiscoverer.TestAssemblyUniqueID IFrontControllerDiscoverer.TestFrameworkDisplayName IFrontControllerDiscoverer.Find(IMessageSink, FrontControllerFindSettings) IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods FindAndRun(IMessageSink, FrontControllerFindAndRunSettings) Starts the process of finding and running tests in an assembly. Typically only used by runner which do not present test discovery UIs to users that allow them to run selected tests (those should instead use Find(IMessageSink, FrontControllerFindSettings) and Run(IMessageSink, FrontControllerRunSettings) as separate operations). void FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindAndRunSettings The settings used during discovery and execution. Run(IMessageSink, FrontControllerRunSettings) Starts the process of running selected tests in the assembly. The serialized test cases to run come from calling Find(IMessageSink, FrontControllerFindSettings). void Run(IMessageSink messageSink, FrontControllerRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerRunSettings The settings used during execution."
  },
  "v3/2.0.0/Xunit.IFrontControllerDiscoverer.html": {
    "href": "v3/2.0.0/Xunit.IFrontControllerDiscoverer.html",
    "title": "Interface IFrontControllerDiscoverer | xunit",
    "summary": "Interface IFrontControllerDiscoverer Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Represents a class which acts as a front controller for unit testing frameworks for the purposes of discovery (which can include source-based discovery). Tests found with these classes can later be run by an instance of IFrontController. This allows runners to run tests from multiple unit testing frameworks (in particular, hiding the differences between xUnit.net v1, v2, and v3 tests). public interface IFrontControllerDiscoverer : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanUseAppDomains Gets a flag indicating whether this discovery/execution can use app domains. bool CanUseAppDomains { get; } Property Value bool TargetFramework Gets the target framework that the test assembly is linked against. string TargetFramework { get; } Property Value string TestAssemblyUniqueID Gets the unique ID for the test assembly provided to the discoverer. string TestAssemblyUniqueID { get; } Property Value string TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. string TestFrameworkDisplayName { get; } Property Value string Methods Find(IMessageSink, FrontControllerFindSettings) Starts the process of finding tests in an assembly. Typically only used by runners which discover tests and present them into a UI for the user to interactively choose for selective run (via Run(IMessageSink, FrontControllerRunSettings)). For runners which simply wish to discover and immediately run tests, they should instead use FindAndRun(IMessageSink, FrontControllerFindAndRunSettings), which permits the same filtering logic as this method. void Find(IMessageSink messageSink, FrontControllerFindSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindSettings The settings used during discovery."
  },
  "v3/2.0.0/Xunit.ITestContext.html": {
    "href": "v3/2.0.0/Xunit.ITestContext.html",
    "title": "Interface ITestContext | xunit",
    "summary": "Interface ITestContext Namespace Xunit Assembly xunit.v3.core.dll Represents the current state of the test pipeline. public interface ITestContext Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TestContextExtensions.GetFixture<TFixture>(ITestContext) Properties Attachments Gets the attachments for the current test, if the engine is currently in the process of running a test; will return null outside of the context of a test. IReadOnlyDictionary<string, TestAttachment>? Attachments { get; } Property Value IReadOnlyDictionary<string, TestAttachment> CancellationToken Gets the cancellation token that is used to indicate that the test run should be aborted. Async tests should pass this along to any async functions that support cancellation tokens, to help speed up the cancellation process. CancellationToken CancellationToken { get; } Property Value CancellationToken KeyValueStorage Stores key/value pairs that are available across all stages of the pipeline. Can be used to communicate between extensions at different execution stages, in both directions, as a single storage container is used for the entire pipeline. Dictionary<string, object?> KeyValueStorage { get; } Property Value Dictionary<string, object> Remarks This storage system is purely for communication between extension points. The values in here are thrown away after the pipeline execution is complete. It is strongly recommend that extensions either prefix their key names or use guaranteed unique IDs like GUIDs, to prevent collisions with other extension authors. PipelineStage Gets the current test pipeline stage. TestPipelineStage PipelineStage { get; } Property Value TestPipelineStage Test Gets the current test, if the engine is currently in the process of running a test; will return null outside of the context of a test. ITest? Test { get; } Property Value ITest Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTest. TestAssembly Gets the current test assembly, if the engine is currently in the process of running or discovering tests in assembly; will return null out of this context (this typically means the test framework itself is being created and initialized). ITestAssembly? TestAssembly { get; } Property Value ITestAssembly Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestAssembly. TestAssemblyStatus Gets the current test engine status for the test assembly. TestEngineStatus? TestAssemblyStatus { get; } Property Value TestEngineStatus? TestCase Gets the current test case, if the engine is currently in the process of running a test case; will return null outside of the context of a test case. ITestCase? TestCase { get; } Property Value ITestCase Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestCase. TestCaseStatus Gets the current test engine status for the test case. Will only be available when TestCase is not null. TestEngineStatus? TestCaseStatus { get; } Property Value TestEngineStatus? TestClass Gets the current test method, if the engine is currently in the process of running a test class; will return null outside of the context of a test class. Note that not all test framework implementations require that tests be based on classes, so this value may be null even if TestCase is not null. ITestClass? TestClass { get; } Property Value ITestClass Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestClass. TestClassInstance Gets the instance of the test class; will return null outside of the context of a test. Static test methods do not create test class instances, so this will always be null for static test methods. object? TestClassInstance { get; } Property Value object Remarks This value will only be available when PipelineStage is TestExecution and TestStatus is Running, and only after the test class has been created. It will become null again immediately after the test class has been disposed. TestClassStatus Gets the current test engine status for the test class. Will only be available when TestClass is not null. TestEngineStatus? TestClassStatus { get; } Property Value TestEngineStatus? TestCollection Gets the current test collection, if the engine is currently in the process of running a test collection; will return null outside of the context of a test collection. ITestCollection? TestCollection { get; } Property Value ITestCollection Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestCollection. TestCollectionStatus Gets the current test engine status for the test collection. Will only be available when TestCollection is not null. TestEngineStatus? TestCollectionStatus { get; } Property Value TestEngineStatus? TestMethod Gets the current test method, if the engine is currently in the process of running a test method; will return null outside of the context of a test method. Note that not all test framework implementations require that tests be based on methods, so this value may be null even if TestCase is not null. ITestMethod? TestMethod { get; } Property Value ITestMethod Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestMethod. TestMethodStatus Gets the current test engine status for the test method. Will only be available when TestMethod is not null. TestEngineStatus? TestMethodStatus { get; } Property Value TestEngineStatus? TestOutputHelper Gets the output helper, which can be used to add output to the test. Will only be available when Test is not null. Note that the value may still be null when Test is not null, if the test framework implementation does not provide output helper support. ITestOutputHelper? TestOutputHelper { get; } Property Value ITestOutputHelper TestState Gets the current state of the test. Will only be available after the test has finished running. TestResultState? TestState { get; } Property Value TestResultState TestStatus Gets the current test engine status for the test. Will only be available when Test is not null. TestEngineStatus? TestStatus { get; } Property Value TestEngineStatus? Warnings Gets the set of warnings associated with the current test. Will only be available when Test is not null; will also return null if there have been no warnings issued. IReadOnlyList<string>? Warnings { get; } Property Value IReadOnlyList<string> Methods AddAttachment(string, byte[], string) Adds an attachment that is a binary value (represented by a byte array and media type). void AddAttachment(string name, byte[] value, string mediaType = \"application/octet-stream\") Parameters name string The name of the attachment value byte[] The value of the attachment mediaType string The media type of the attachment; defaults to \"application/octet-stream\" Remarks The mediaType value must be in the MIME \"type/subtype\" form, and does not support parameter values. The subtype is allowed to have a single \"+\" to denote specialization of the subtype (i.e., \"application/xhtml+xml\"). For more information on media types, see https://datatracker.ietf.org/doc/html/rfc2045#section-5.1. AddAttachment(string, string) Adds an attachment that is a string value. void AddAttachment(string name, string value) Parameters name string The name of the attachment value string The value of the attachment AddWarning(string) Adds a warning to the test result. void AddWarning(string message) Parameters message string The warning message to be reported CancelCurrentTest() Attempt to cancel the currently executing test, if one is executing. This will signal the CancellationToken for cancellation. void CancelCurrentTest() GetFixture(Type) Gets a fixture that was attached to the test class. Will return null if there is no exact match for the requested fixture type, or if there is no test class (that is, if TestClass returns null). ValueTask<object?> GetFixture(Type fixtureType) Parameters fixtureType Type The exact type of the fixture Returns ValueTask<object> The fixture, if available; null, otherwise Remarks This may be a fixture attached via IClassFixture<TFixture>, ICollectionFixture<TFixture>, or AssemblyFixtureAttribute. SendDiagnosticMessage(string) Sends a diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. void SendDiagnosticMessage(string message) Parameters message string The message to send SendDiagnosticMessage(string, object?) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. void SendDiagnosticMessage(string format, object? arg0) Parameters format string A composite format string. arg0 object The value to replace {0} in the format string. SendDiagnosticMessage(string, object?, object?) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. void SendDiagnosticMessage(string format, object? arg0, object? arg1) Parameters format string A composite format string. arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. SendDiagnosticMessage(string, object?, object?, object?) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. void SendDiagnosticMessage(string format, object? arg0, object? arg1, object? arg2) Parameters format string A composite format string. arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. arg2 object The value to replace {2} in the format string. SendDiagnosticMessage(string, params object?[]) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. void SendDiagnosticMessage(string format, params object?[] args) Parameters format string A composite format string. args object[] An object array that contains zero or more objects to format."
  },
  "v3/2.0.0/Xunit.ITestContextAccessor.html": {
    "href": "v3/2.0.0/Xunit.ITestContextAccessor.html",
    "title": "Interface ITestContextAccessor | xunit",
    "summary": "Interface ITestContextAccessor Namespace Xunit Assembly xunit.v3.core.dll Gives access to the current test context, which is considered to be an immutable snapshot of the current test state at the time it's retrieved. public interface ITestContextAccessor Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Current Gets the current test context. If called outside of the text discovery or execution path, will return a test context that is in the Unknown stage. The current test context is a \"snapshot in time\" for when this/ property is called, so do not cache the instance across a single method boundary (or else/ you run the risk of having an out-of-date context). ITestContext Current { get; } Property Value ITestContext"
  },
  "v3/2.0.0/Xunit.ITestOutputHelper.html": {
    "href": "v3/2.0.0/Xunit.ITestOutputHelper.html",
    "title": "Interface ITestOutputHelper | xunit",
    "summary": "Interface ITestOutputHelper Namespace Xunit Assembly xunit.v3.core.dll Represents a class which can be used to provide test output. public interface ITestOutputHelper Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Output Gets the output provided by the test. string Output { get; } Property Value string Remarks Note: This also ensures that any partial output that hasn't been reported yet gets reported. Calling in the middle of test execution is therefore not recommend. Methods Write(string) Adds text to the output. void Write(string message) Parameters message string The message Write(string, params object[]) Adds formatted text to the output. void Write(string format, params object[] args) Parameters format string The message format args object[] The format arguments WriteLine(string) Adds text to the output, followed by NewLine. void WriteLine(string message) Parameters message string The message WriteLine(string, params object[]) Adds formatted text to the output, followed by NewLine. void WriteLine(string format, params object[] args) Parameters format string The message format args object[] The format arguments"
  },
  "v3/2.0.0/Xunit.ITheoryDataRow.html": {
    "href": "v3/2.0.0/Xunit.ITheoryDataRow.html",
    "title": "Interface ITheoryDataRow | xunit",
    "summary": "Interface ITheoryDataRow Namespace Xunit Assembly xunit.v3.core.dll Represents a single row of theory data, along with optional metadata attached to the row. public interface ITheoryDataRow Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag that indicates that the data row should only be run explicitly. If the value is null, then it inherits its explicitness from the value of Explicit. bool? Explicit { get; } Property Value bool? Skip Gets the reason for skipping this row of data; if null is returned, then the data row isn't skipped. string? Skip { get; } Property Value string TestDisplayName Gets the display name for the test (replacing the default behavior, which would be to use TestDisplayName or DisplayName, or falling back to the default test display name based on TestMethodDisplay and TestMethodDisplayOptions in the configuration file). string? TestDisplayName { get; } Property Value string Timeout A value greater than zero marks the test as having a timeout, and gets or sets the timeout (in milliseconds). A non-null value here overrides any inherited value from the IDataAttribute or the ITheoryAttribute. int? Timeout { get; } Property Value int? Remarks WARNING: Using this with parallelization turned on will result in undefined behavior. Timeout is only supported when parallelization is disabled, either globally or with a parallelization-disabled test collection. Traits Gets the trait values associated with this theory data row. If there are none, you may either return a null or empty dictionary. Dictionary<string, HashSet<string>>? Traits { get; } Property Value Dictionary<string, HashSet<string>> Methods GetData() Gets the theory data. object?[] GetData() Returns object[]"
  },
  "v3/2.0.0/Xunit.InlineDataAttribute.html": {
    "href": "v3/2.0.0/Xunit.InlineDataAttribute.html",
    "title": "Class InlineDataAttribute | xunit",
    "summary": "Class InlineDataAttribute Namespace Xunit Assembly xunit.v3.core.dll Provides a data source for a data theory, with the data coming from inline values. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class InlineDataAttribute : DataAttribute, IDataAttribute Inheritance object Attribute DataAttribute InlineDataAttribute Implements IDataAttribute Inherited Members DataAttribute.Explicit DataAttribute.Skip DataAttribute.TestDisplayName DataAttribute.Timeout DataAttribute.Traits Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors InlineDataAttribute(params object?[]?) Provides a data source for a data theory, with the data coming from inline values. public InlineDataAttribute(params object?[]? data) Parameters data object[] The data values to pass to the theory. Properties Data Gets the data to be passed to the test. public object?[] Data { get; } Property Value object[] Methods GetData(MethodInfo, DisposalTracker) Returns the data to be used to test the theory. public override ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(MethodInfo testMethod, DisposalTracker disposalTracker) Parameters testMethod MethodInfo The test method the data attribute is attached to disposalTracker DisposalTracker The disposal tracker used to dispose the data Returns ValueTask<IReadOnlyCollection<ITheoryDataRow>> SupportsDiscoveryEnumeration() Returns true if the data attribute supports enumeration during discovery; false otherwise. Data attributes with expensive computational costs and/or randomized data sets should return false. public override bool SupportsDiscoveryEnumeration() Returns bool"
  },
  "v3/2.0.0/Xunit.Internal.ArchitectureExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.ArchitectureExtensions.html",
    "title": "Class ArchitectureExtensions | xunit",
    "summary": "Class ArchitectureExtensions Namespace Xunit.Internal Assembly xunit.v3.core.dll INTERNAL CLASS. DO NOT USE. public static class ArchitectureExtensions Inheritance object ArchitectureExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDisplayName(Architecture) Attempts to convert Architecture into a display-friendly name. public static string ToDisplayName(this Architecture architecture) Parameters architecture Architecture Returns string Remarks The supported values are the ones known as of .NET 9. An unknown architecture will return \"Unknown\"."
  },
  "v3/2.0.0/Xunit.Internal.AssemblyExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | xunit",
    "summary": "Class AssemblyExtensions Namespace Xunit.Internal Assembly xunit.v3.common.dll INTERNAL CLASS. DO NOT USE. public static class AssemblyExtensions Inheritance object AssemblyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields UnknownTargetFramework Gets the value for an unknown target framework. public const string UnknownTargetFramework = \"UnknownTargetFramework\" Field Value string Methods GetLocalCodeBase(Assembly?) public static string? GetLocalCodeBase(this Assembly? assembly) Parameters assembly Assembly Returns string GetLocalCodeBase(string?, char) public static string? GetLocalCodeBase(string? codeBase, char directorySeparator) Parameters codeBase string directorySeparator char Returns string GetSafeCodeBase(Assembly?) Safely gets the code base of an assembly. public static string? GetSafeCodeBase(this Assembly? assembly) Parameters assembly Assembly The assembly. Returns string If the assembly is null, or is dynamic, then it returns null; otherwise, it returns the value from CodeBase. GetSafeLocation(Assembly?) Safely gets the location of an assembly. public static string? GetSafeLocation(this Assembly? assembly) Parameters assembly Assembly The assembly. Returns string If the assembly is null, or is dynamic, then it returns null; otherwise, it returns the value from Location. GetTargetFramework(Assembly) Gets the target framework name for the given assembly. public static string GetTargetFramework(this Assembly assembly) Parameters assembly Assembly The assembly. Returns string The target framework (typically in a format like \".NETFramework,Version=v4.7.2\" or \".NETCoreApp,Version=v6.0\"). If the target framework type is unknown (missing file, missing attribute, etc.) then returns \"UnknownTargetFramework\"."
  },
  "v3/2.0.0/Xunit.Internal.CommandLineGroup.html": {
    "href": "v3/2.0.0/Xunit.Internal.CommandLineGroup.html",
    "title": "Enum CommandLineGroup | xunit",
    "summary": "Enum CommandLineGroup Namespace Xunit.Internal Assembly xunit.v3.runner.common.dll INTERNAL ENUM. DO NOT USE. public enum CommandLineGroup Fields ArgumentDisplay = 5 FilterQuery = 4 FilterSimple = 3 General = 1 Hidden = 0 NetFramework = 2"
  },
  "v3/2.0.0/Xunit.Internal.CommandLineParserBase.html": {
    "href": "v3/2.0.0/Xunit.Internal.CommandLineParserBase.html",
    "title": "Class CommandLineParserBase | xunit",
    "summary": "Class CommandLineParserBase Namespace Xunit.Internal Assembly xunit.v3.runner.common.dll INTERNAL CLASS. DO NOT USE. public abstract class CommandLineParserBase Inheritance object CommandLineParserBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors CommandLineParserBase(ConsoleHelper, IReadOnlyList<IRunnerReporter>?, string?, string[]) protected CommandLineParserBase(ConsoleHelper consoleHelper, IReadOnlyList<IRunnerReporter>? runnerReporters, string? reporterFolder, string[] args) Parameters consoleHelper ConsoleHelper runnerReporters IReadOnlyList<IRunnerReporter> reporterFolder string args string[] Properties Args protected IReadOnlyList<string> Args { get; } Property Value IReadOnlyList<string> ConsoleHelper protected ConsoleHelper ConsoleHelper { get; } Property Value ConsoleHelper HelpRequested public bool HelpRequested { get; } Property Value bool ParseWarnings public List<string> ParseWarnings { get; } Property Value List<string> Project protected XunitProject Project { get; } Property Value XunitProject RunnerReporters protected IReadOnlyList<IRunnerReporter> RunnerReporters { get; } Property Value IReadOnlyList<IRunnerReporter> Methods AddHiddenParser(string, Action<KeyValuePair<string, string?>>, string?) protected void AddHiddenParser(string @switch, Action<KeyValuePair<string, string?>> handler, string? replacement = null) Parameters switch string handler Action<KeyValuePair<string, string>> replacement string AddParser(string, Action<KeyValuePair<string, string?>>, CommandLineGroup, string?, params string[]) protected void AddParser(string @switch, Action<KeyValuePair<string, string?>> handler, CommandLineGroup group, string? argumentDisplay, params string[] descriptions) Parameters switch string handler Action<KeyValuePair<string, string>> group CommandLineGroup argumentDisplay string descriptions string[] FileExists(string?) protected virtual bool FileExists(string? path) Parameters path string Returns bool GetAvailableRunnerReporters() protected abstract IReadOnlyList<IRunnerReporter> GetAvailableRunnerReporters() Returns IReadOnlyList<IRunnerReporter> GetFullPath(string?) protected virtual string? GetFullPath(string? fileName) Parameters fileName string Returns string GuardNoOptionValue(KeyValuePair<string, string?>) protected static void GuardNoOptionValue(KeyValuePair<string, string?> option) Parameters option KeyValuePair<string, string> IsConfigFile(string) protected static bool IsConfigFile(string fileName) Parameters fileName string Returns bool LoadAssembly(string) protected abstract Assembly LoadAssembly(string dllFile) Parameters dllFile string Returns Assembly OnAssertEquivalentMaxDepth(KeyValuePair<string, string?>) protected void OnAssertEquivalentMaxDepth(KeyValuePair<string, string?> option) Parameters option KeyValuePair<string, string> OnParallel(KeyValuePair<string, string?>) protected void OnParallel(KeyValuePair<string, string?> option) Parameters option KeyValuePair<string, string> OnPause(KeyValuePair<string, string?>) protected void OnPause(KeyValuePair<string, string?> option) Parameters option KeyValuePair<string, string> OnWait(KeyValuePair<string, string?>) protected void OnWait(KeyValuePair<string, string?> option) Parameters option KeyValuePair<string, string> ParseInternal(int) protected XunitProject ParseInternal(int argStartIndex) Parameters argStartIndex int Returns XunitProject PrintUsage() public void PrintUsage()"
  },
  "v3/2.0.0/Xunit.Internal.ConsoleCaptureTestOutputWriter.html": {
    "href": "v3/2.0.0/Xunit.Internal.ConsoleCaptureTestOutputWriter.html",
    "title": "Class ConsoleCaptureTestOutputWriter | xunit",
    "summary": "Class ConsoleCaptureTestOutputWriter Namespace Xunit.Internal Assembly xunit.v3.core.dll INTERNAL CLASS. DO NOT USE. public class ConsoleCaptureTestOutputWriter : TextWriter, IDisposable Inheritance object MarshalByRefObject TextWriter ConsoleCaptureTestOutputWriter Implements IDisposable Inherited Members TextWriter.CoreNewLine TextWriter.Null TextWriter.Close() TextWriter.Dispose() TextWriter.Flush() TextWriter.FlushAsync() TextWriter.Synchronized(TextWriter) TextWriter.Write(bool) TextWriter.Write(char[]) TextWriter.Write(decimal) TextWriter.Write(double) TextWriter.Write(int) TextWriter.Write(long) TextWriter.Write(object) TextWriter.Write(float) TextWriter.Write(string, object) TextWriter.Write(string, object, object) TextWriter.Write(string, object, object, object) TextWriter.Write(string, params object[]) TextWriter.Write(uint) TextWriter.Write(ulong) TextWriter.WriteAsync(char) TextWriter.WriteAsync(char[]) TextWriter.WriteAsync(char[], int, int) TextWriter.WriteAsync(string) TextWriter.WriteLine() TextWriter.WriteLine(bool) TextWriter.WriteLine(char) TextWriter.WriteLine(char[]) TextWriter.WriteLine(char[], int, int) TextWriter.WriteLine(decimal) TextWriter.WriteLine(double) TextWriter.WriteLine(int) TextWriter.WriteLine(long) TextWriter.WriteLine(object) TextWriter.WriteLine(float) TextWriter.WriteLine(string) TextWriter.WriteLine(string, object) TextWriter.WriteLine(string, object, object) TextWriter.WriteLine(string, object, object, object) TextWriter.WriteLine(string, params object[]) TextWriter.WriteLine(uint) TextWriter.WriteLine(ulong) TextWriter.WriteLineAsync() TextWriter.WriteLineAsync(char) TextWriter.WriteLineAsync(char[]) TextWriter.WriteLineAsync(char[], int, int) TextWriter.WriteLineAsync(string) TextWriter.FormatProvider TextWriter.NewLine MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ConsoleCaptureTestOutputWriter(ITestContextAccessor, bool, bool) public ConsoleCaptureTestOutputWriter(ITestContextAccessor testContextAccessor, bool captureError, bool captureOut) Parameters testContextAccessor ITestContextAccessor captureError bool captureOut bool Properties Encoding public override Encoding Encoding { get; } Property Value Encoding Methods Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool Write(char) public override void Write(char value) Parameters value char Write(char[], int, int) public override void Write(char[] buffer, int index, int count) Parameters buffer char[] index int count int Write(string?) public override void Write(string? value) Parameters value string"
  },
  "v3/2.0.0/Xunit.Internal.DefaultTestCaseBulkDeserializer.html": {
    "href": "v3/2.0.0/Xunit.Internal.DefaultTestCaseBulkDeserializer.html",
    "title": "Class DefaultTestCaseBulkDeserializer | xunit",
    "summary": "Class DefaultTestCaseBulkDeserializer Namespace Xunit.Internal Assembly xunit.v3.runner.utility.netfx.dll INTERNAL CLASS. DO NOT USE. public class DefaultTestCaseBulkDeserializer : ITestCaseBulkDeserializer Inheritance object DefaultTestCaseBulkDeserializer Implements ITestCaseBulkDeserializer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DefaultTestCaseBulkDeserializer(ITestFrameworkExecutor) public DefaultTestCaseBulkDeserializer(ITestFrameworkExecutor executor) Parameters executor ITestFrameworkExecutor Methods BulkDeserialize(List<string>) public List<KeyValuePair<string?, ITestCase?>> BulkDeserialize(List<string> serializations) Parameters serializations List<string> Returns List<KeyValuePair<string, ITestCase>>"
  },
  "v3/2.0.0/Xunit.Internal.DictionaryExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | xunit",
    "summary": "Class DictionaryExtensions Namespace Xunit.Internal Assembly xunit.v3.common.dll INTERNAL CLASS. DO NOT USE. public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOrGet<TKey, TValue>(Dictionary<TKey, TValue>, TKey) public static TValue AddOrGet<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key) where TKey : notnull where TValue : new() Parameters dictionary Dictionary<TKey, TValue> key TKey Returns TValue Type Parameters TKey TValue AddOrGet<TKey, TValue>(Dictionary<TKey, TValue>, TKey, Func<TValue>) public static TValue AddOrGet<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TValue> newValue) where TKey : notnull Parameters dictionary Dictionary<TKey, TValue> key TKey newValue Func<TValue> Returns TValue Type Parameters TKey TValue AddRange<T>(HashSet<T>, IEnumerable<T>) public static void AddRange<T>(this HashSet<T> hashSet, IEnumerable<T> values) Parameters hashSet HashSet<T> values IEnumerable<T> Type Parameters T Add<TKey, TValue>(Dictionary<TKey, HashSet<TValue>>, TKey, TValue) public static void Add<TKey, TValue>(this Dictionary<TKey, HashSet<TValue>> dictionary, TKey key, TValue value) where TKey : notnull Parameters dictionary Dictionary<TKey, HashSet<TValue>> key TKey value TValue Type Parameters TKey TValue Contains<TKey, TValue>(IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>>, TKey, TValue, IEqualityComparer<TValue>) public static bool Contains<TKey, TValue>(this IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> dictionary, TKey key, TValue value, IEqualityComparer<TValue> valueComparer) where TKey : notnull Parameters dictionary IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> key TKey value TValue valueComparer IEqualityComparer<TValue> Returns bool Type Parameters TKey TValue ToReadOnly<TKey, TValue>(Dictionary<TKey, HashSet<TValue>>) public static IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> ToReadOnly<TKey, TValue>(this Dictionary<TKey, HashSet<TValue>> dictionary) where TKey : notnull Parameters dictionary Dictionary<TKey, HashSet<TValue>> Returns IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> Type Parameters TKey TValue ToReadOnly<TKey, TValue>(Dictionary<TKey, List<TValue>>) public static IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> ToReadOnly<TKey, TValue>(this Dictionary<TKey, List<TValue>> dictionary) where TKey : notnull Parameters dictionary Dictionary<TKey, List<TValue>> Returns IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> Type Parameters TKey TValue ToReadWrite<TKey, TValue>(IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>>, IEqualityComparer<TKey>?) public static Dictionary<TKey, HashSet<TValue>> ToReadWrite<TKey, TValue>(this IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> dictionary, IEqualityComparer<TKey>? comparer) where TKey : notnull Parameters dictionary IReadOnlyDictionary<TKey, IReadOnlyCollection<TValue>> comparer IEqualityComparer<TKey> Returns Dictionary<TKey, HashSet<TValue>> Type Parameters TKey TValue"
  },
  "v3/2.0.0/Xunit.Internal.EnumerableExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | xunit",
    "summary": "Class EnumerableExtensions Namespace Xunit.Internal Assembly xunit.v3.common.dll INTERNAL CLASS. DO NOT USE. public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CastOrToArray<T>(IEnumerable<T>?) Returns source as an array of T, using a cast when available and ToArray<TSource>(IEnumerable<TSource>) when not. public static T[]? CastOrToArray<T>(this IEnumerable<T>? source) Parameters source IEnumerable<T> Returns T[] Type Parameters T CastOrToList<T>(IEnumerable<T>?) Returns source as a List<T>, using a cast when available and ToList<TSource>(IEnumerable<TSource>) when not. public static List<T>? CastOrToList<T>(this IEnumerable<T>? source) Parameters source IEnumerable<T> Returns List<T> Type Parameters T CastOrToReadOnlyCollection<T>(IEnumerable<T>?) Returns source as an IReadOnlyCollection<T> of T, using a cast when available and ToArray<TSource>(IEnumerable<TSource>) when not. public static IReadOnlyCollection<T>? CastOrToReadOnlyCollection<T>(this IEnumerable<T>? source) Parameters source IEnumerable<T> Returns IReadOnlyCollection<T> Type Parameters T CastOrToReadOnlyList<T>(IEnumerable<T>?) Returns source as an IReadOnlyList<T> of T, using a cast when available and ToArray<TSource>(IEnumerable<TSource>) when not. public static IReadOnlyList<T>? CastOrToReadOnlyList<T>(this IEnumerable<T>? source) Parameters source IEnumerable<T> Returns IReadOnlyList<T> Type Parameters T ForEach<T>(IEnumerable<T>, Action<T>) Enumerates all values in a collection, calling the callback for each. public static void ForEach<T>(this IEnumerable<T> source, Action<T> callback) Parameters source IEnumerable<T> callback Action<T> Type Parameters T WhereNotNullOrWhitespace(IEnumerable<string?>) Returns source with all the null or whitespace-only strings removed. public static IEnumerable<string> WhereNotNullOrWhitespace(this IEnumerable<string?> source) Parameters source IEnumerable<string> Returns IEnumerable<string> WhereNotNull<T>(IEnumerable<T?>) Returns source as an enumerable of T with all the null items removed. public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> source) where T : struct Parameters source IEnumerable<T?> Returns IEnumerable<T> Type Parameters T WhereNotNull<T>(IEnumerable<T?>) Returns source as an enumerable of T with all the null items removed. public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> source) where T : class Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T"
  },
  "v3/2.0.0/Xunit.Internal.ExceptionExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | xunit",
    "summary": "Class ExceptionExtensions Namespace Xunit.Internal Assembly xunit.v3.common.dll INTERNAL CLASS. DO NOT USE. public static class ExceptionExtensions Inheritance object ExceptionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Unwrap(Exception) Unwraps an exception to remove any wrappers, like TargetInvocationException. public static Exception Unwrap(this Exception ex) Parameters ex Exception The exception to unwrap. Returns Exception The unwrapped exception."
  },
  "v3/2.0.0/Xunit.Internal.Guard.html": {
    "href": "v3/2.0.0/Xunit.Internal.Guard.html",
    "title": "Class Guard | xunit",
    "summary": "Class Guard Namespace Xunit.Internal Assembly xunit.v3.common.dll Helper class for guarding value arguments and valid state. public static class Guard Inheritance object Guard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArgumentEnumValid<T>(T, HashSet<T>, string?) Ensures that an enum value is valid by comparing against a list of valid values. public static T ArgumentEnumValid<T>(T argValue, HashSet<T> validValues, string? argName = null) where T : Enum Parameters argValue T The value of the argument validValues HashSet<T> The list of valid values argName string The name of the argument Returns T Type Parameters T The argument type Exceptions ArgumentException ArgumentNotNullOrEmpty<T>(Func<string>, T?, string?) Ensures that a nullable enumerable type argument is not null or empty. public static T ArgumentNotNullOrEmpty<T>(Func<string> messageFunc, T? argValue, string? argName = null) where T : class, IEnumerable Parameters messageFunc Func<string> The creator for an exception message to use when the argument is null or empty argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-null, non-empty value Type Parameters T The argument type Exceptions ArgumentException Thrown when the argument is null or empty ArgumentNotNullOrEmpty<T>(string, T?, string?) Ensures that a nullable enumerable type argument is not null or empty. public static T ArgumentNotNullOrEmpty<T>(string message, T? argValue, string? argName = null) where T : class, IEnumerable Parameters message string The exception message to use when the argument is null or empty argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-null, non-empty value Type Parameters T The argument type Exceptions ArgumentException Thrown when the argument is null or empty ArgumentNotNullOrEmpty<T>(T?, string?) Ensures that a nullable enumerable type argument is not null or empty. public static T ArgumentNotNullOrEmpty<T>(T? argValue, string? argName = null) where T : class, IEnumerable Parameters argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-null, non-empty value Type Parameters T The argument type Exceptions ArgumentException Thrown when the argument is null or empty ArgumentNotNull<T>(Func<string>, T?, string?) Ensures that a nullable reference type argument is not null. public static T ArgumentNotNull<T>(Func<string> messageFunc, T? argValue, string? argName = null) where T : class Parameters messageFunc Func<string> The creator for an exception message to use when the argument is null argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-null value Type Parameters T The argument type Exceptions ArgumentNullException Thrown when the argument is null ArgumentNotNull<T>(T?, string?) Ensures that a nullable value type argument is not null. public static T ArgumentNotNull<T>(T? argValue, string? argName = null) where T : struct Parameters argValue T? The value of the argument argName string The name of the argument Returns T The argument value as a non-null value Type Parameters T The argument type Exceptions ArgumentNullException Thrown when the argument is null ArgumentNotNull<T>(string, T?, string?) Ensures that a nullable reference type argument is not null. public static T ArgumentNotNull<T>(string message, T? argValue, string? argName = null) where T : class Parameters message string The exception message to use when the argument is null argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-null value Type Parameters T The argument type Exceptions ArgumentNullException Thrown when the argument is null ArgumentNotNull<T>(T?, string?) Ensures that a nullable reference type argument is not null. public static T ArgumentNotNull<T>(T? argValue, string? argName = null) where T : class Parameters argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-null value Type Parameters T The argument type Exceptions ArgumentNullException Thrown when the argument is null ArgumentValid(Func<string>, bool, string?) Ensures that an argument is valid. public static void ArgumentValid(Func<string> messageFunc, bool test, string? argName = null) Parameters messageFunc Func<string> The creator for an exception message to use when the argument is not valid test bool The validity test value argName string The name of the argument Exceptions ArgumentException Thrown when the argument is not valid ArgumentValid(string, bool, string?) Ensures that an argument is valid. public static void ArgumentValid(string message, bool test, string? argName = null) Parameters message string The exception message to use when the argument is not valid test bool The validity test value argName string The name of the argument Exceptions ArgumentException Thrown when the argument is not valid FileExists(string?, string?) Ensures that a filename argument is not null or empty, and that the file exists on disk. public static string FileExists(string? fileName, string? argName = null) Parameters fileName string The file name value argName string The name of the argument Returns string The file name as a non-null value Exceptions ArgumentException Thrown when the argument is null, empty, or not on disk GenericArgumentNotNull<T>(T?, string?) Ensures that a value is not default value. This is used for values of generic types where nullability is not known. public static T GenericArgumentNotNull<T>(T? argValue, string? argName = null) Parameters argValue T The value of the argument argName string The name of the argument Returns T The argument value as a non-default value Type Parameters T The argument type Exceptions ArgumentNullException Thrown when the argument is default NotNull<T>(Func<string>, T?) Ensure that a nullable struct value is not null. public static T NotNull<T>(Func<string> messageFunc, T? value) where T : struct Parameters messageFunc Func<string> The creator for an exception message to use when the value is not valid value T? The value to test for null Returns T The value as a non-null value Type Parameters T The value type Exceptions InvalidOperationException Thrown when the value is not valid NotNull<T>(Func<string>, T?) Ensure that a reference value is not null. public static T NotNull<T>(Func<string> messageFunc, T? value) where T : class Parameters messageFunc Func<string> The creator for an exception message to use when the value is not valid value T The value to test for null Returns T The value as a non-null value Type Parameters T The value type Exceptions InvalidOperationException Thrown when the value is not valid NotNull<T>(string, T?) Ensure that a nullable struct value is not null. public static T NotNull<T>(string message, T? value) where T : struct Parameters message string The exception message to use when the value is not valid value T? The value to test for null Returns T The value as a non-null value Type Parameters T The value type Exceptions InvalidOperationException Thrown when the value is not valid NotNull<T>(string, T?) Ensure that a reference value is not null. public static T NotNull<T>(string message, T? value) where T : class Parameters message string The exception message to use when the value is not valid value T The value to test for null Returns T The value as a non-null value Type Parameters T The value type Exceptions InvalidOperationException Thrown when the value is not valid"
  },
  "v3/2.0.0/Xunit.Internal.ITestCaseBulkDeserializer.html": {
    "href": "v3/2.0.0/Xunit.Internal.ITestCaseBulkDeserializer.html",
    "title": "Interface ITestCaseBulkDeserializer | xunit",
    "summary": "Interface ITestCaseBulkDeserializer Namespace Xunit.Internal Assembly xunit.v3.runner.utility.netfx.dll INTERNAL INTERFACE. DO NOT USE. public interface ITestCaseBulkDeserializer Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods BulkDeserialize(List<string>) List<KeyValuePair<string?, ITestCase?>> BulkDeserialize(List<string> serializations) Parameters serializations List<string> Returns List<KeyValuePair<string, ITestCase>>"
  },
  "v3/2.0.0/Xunit.Internal.MessageBus.html": {
    "href": "v3/2.0.0/Xunit.Internal.MessageBus.html",
    "title": "Class MessageBus | xunit",
    "summary": "Class MessageBus Namespace Xunit.Internal Assembly xunit.v3.core.dll INTERNAL CLASS. DO NOT USE. public class MessageBus : IMessageBus, IDisposable Inheritance object MessageBus Implements IMessageBus IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MessageBus(IMessageSink, bool) public MessageBus(IMessageSink messageSink, bool stopOnFail = false) Parameters messageSink IMessageSink stopOnFail bool Methods Dispose() public void Dispose() QueueMessage(IMessageSinkMessage) public bool QueueMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage Returns bool"
  },
  "v3/2.0.0/Xunit.Internal.ObjectExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.ObjectExtensions.html",
    "title": "Class ObjectExtensions | xunit",
    "summary": "Class ObjectExtensions Namespace Xunit.Internal Assembly xunit.v3.common.dll INTERNAL CLASS. DO NOT USE. public static class ObjectExtensions Inheritance object ObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsValueTask(object?) public static ValueTask<object?>? AsValueTask(this object? value) Parameters value object Returns ValueTask<object>? ValidateNullablePropertyValue<T>(object, T?, string) public static T ValidateNullablePropertyValue<T>(this object @object, T? value, string propertyName) where T : struct Parameters object object value T? propertyName string Returns T Type Parameters T ValidateNullablePropertyValue<T>(object, T?, string) public static T ValidateNullablePropertyValue<T>(this object @object, T? value, string propertyName) where T : class Parameters object object value T propertyName string Returns T Type Parameters T"
  },
  "v3/2.0.0/Xunit.Internal.PreserveWorkingFolder.html": {
    "href": "v3/2.0.0/Xunit.Internal.PreserveWorkingFolder.html",
    "title": "Class PreserveWorkingFolder | xunit",
    "summary": "Class PreserveWorkingFolder Namespace Xunit.Internal Assembly xunit.v3.core.dll INTERNAL CLASS. DO NOT USE. public class PreserveWorkingFolder : IDisposable Inheritance object PreserveWorkingFolder Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors PreserveWorkingFolder(ITestAssembly) public PreserveWorkingFolder(ITestAssembly assembly) Parameters assembly ITestAssembly Methods Dispose() public void Dispose()"
  },
  "v3/2.0.0/Xunit.Internal.StringExtensions.html": {
    "href": "v3/2.0.0/Xunit.Internal.StringExtensions.html",
    "title": "Class StringExtensions | xunit",
    "summary": "Class StringExtensions Namespace Xunit.Internal Assembly xunit.v3.common.dll INTERNAL CLASS. DO NOT USE. public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Quoted(string?) public static string Quoted(this string? value) Parameters value string Returns string QuotedWithTrim(string?, int?) public static string QuotedWithTrim(this string? value, int? maxLength = null) Parameters value string maxLength int? Returns string SplitAtOuterCommas(string, bool) public static IList<string> SplitAtOuterCommas(this string value, bool trimWhitespace = false) Parameters value string trimWhitespace bool Returns IList<string>"
  },
  "v3/2.0.0/Xunit.Internal.SynchronousMessageBus.html": {
    "href": "v3/2.0.0/Xunit.Internal.SynchronousMessageBus.html",
    "title": "Class SynchronousMessageBus | xunit",
    "summary": "Class SynchronousMessageBus Namespace Xunit.Internal Assembly xunit.v3.core.dll INTERNAL CLASS. DO NOT USE. public class SynchronousMessageBus : IMessageBus, IDisposable Inheritance object SynchronousMessageBus Implements IMessageBus IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors SynchronousMessageBus(IMessageSink, bool) INTERNAL CLASS. DO NOT USE. public SynchronousMessageBus(IMessageSink messageSink, bool stopOnFail = false) Parameters messageSink IMessageSink stopOnFail bool Methods Dispose() public void Dispose() QueueMessage(IMessageSinkMessage) public bool QueueMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage Returns bool"
  },
  "v3/2.0.0/Xunit.Internal.TraceCaptureTestOutputWriter.html": {
    "href": "v3/2.0.0/Xunit.Internal.TraceCaptureTestOutputWriter.html",
    "title": "Class TraceCaptureTestOutputWriter | xunit",
    "summary": "Class TraceCaptureTestOutputWriter Namespace Xunit.Internal Assembly xunit.v3.core.dll INTERNAL CLASS. DO NOT USE. public sealed class TraceCaptureTestOutputWriter : TraceListener, IDisposable Inheritance object MarshalByRefObject TraceListener TraceCaptureTestOutputWriter Implements IDisposable Inherited Members TraceListener.Close() TraceListener.Dispose() TraceListener.Fail(string) TraceListener.Fail(string, string) TraceListener.Flush() TraceListener.TraceData(TraceEventCache, string, TraceEventType, int, object) TraceListener.TraceData(TraceEventCache, string, TraceEventType, int, params object[]) TraceListener.TraceEvent(TraceEventCache, string, TraceEventType, int) TraceListener.TraceEvent(TraceEventCache, string, TraceEventType, int, string) TraceListener.TraceEvent(TraceEventCache, string, TraceEventType, int, string, params object[]) TraceListener.TraceTransfer(TraceEventCache, string, int, string, Guid) TraceListener.Write(object) TraceListener.Write(object, string) TraceListener.Write(string, string) TraceListener.WriteLine(object) TraceListener.WriteLine(object, string) TraceListener.WriteLine(string, string) TraceListener.Attributes TraceListener.Filter TraceListener.IndentLevel TraceListener.IndentSize TraceListener.IsThreadSafe TraceListener.Name TraceListener.TraceOutputOptions MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TraceCaptureTestOutputWriter(ITestContextAccessor) public TraceCaptureTestOutputWriter(ITestContextAccessor testContextAccessor) Parameters testContextAccessor ITestContextAccessor Methods Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool Write(string?) public override void Write(string? message) Parameters message string WriteLine(string?) public override void WriteLine(string? message) Parameters message string"
  },
  "v3/2.0.0/Xunit.Internal.html": {
    "href": "v3/2.0.0/Xunit.Internal.html",
    "title": "Namespace Xunit.Internal | xunit",
    "summary": "Namespace Xunit.Internal Classes ArchitectureExtensions INTERNAL CLASS. DO NOT USE. AssemblyExtensions INTERNAL CLASS. DO NOT USE. CommandLineParserBase INTERNAL CLASS. DO NOT USE. ConsoleCaptureTestOutputWriter INTERNAL CLASS. DO NOT USE. DefaultTestCaseBulkDeserializer INTERNAL CLASS. DO NOT USE. DictionaryExtensions INTERNAL CLASS. DO NOT USE. EnumerableExtensions INTERNAL CLASS. DO NOT USE. ExceptionExtensions INTERNAL CLASS. DO NOT USE. Guard Helper class for guarding value arguments and valid state. MessageBus INTERNAL CLASS. DO NOT USE. ObjectExtensions INTERNAL CLASS. DO NOT USE. PreserveWorkingFolder INTERNAL CLASS. DO NOT USE. StringExtensions INTERNAL CLASS. DO NOT USE. SynchronousMessageBus INTERNAL CLASS. DO NOT USE. TraceCaptureTestOutputWriter INTERNAL CLASS. DO NOT USE. Interfaces ITestCaseBulkDeserializer INTERNAL INTERFACE. DO NOT USE. Enums CommandLineGroup INTERNAL ENUM. DO NOT USE."
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-10.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-10.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of ten data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension T10 Type of the tenth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>, IEnumerable<T10>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9, IEnumerable<T10> dimension10) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension dimension10 IEnumerable<T10> Data for the tenth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-11.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-11.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of eleven data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension T10 Type of the tenth data dimension T11 Type of the eleventh data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>, IEnumerable<T10>, IEnumerable<T11>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9, IEnumerable<T10> dimension10, IEnumerable<T11> dimension11) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension dimension10 IEnumerable<T10> Data for the tenth dimension dimension11 IEnumerable<T11> Data for the eleventh dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-12.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-12.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of twelve data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension T10 Type of the tenth data dimension T11 Type of the eleventh data dimension T12 Type of the twelfth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>, IEnumerable<T10>, IEnumerable<T11>, IEnumerable<T12>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9, IEnumerable<T10> dimension10, IEnumerable<T11> dimension11, IEnumerable<T12> dimension12) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension dimension10 IEnumerable<T10> Data for the tenth dimension dimension11 IEnumerable<T11> Data for the eleventh dimension dimension12 IEnumerable<T12> Data for the twelfth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-13.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-13.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of thirteen data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension T10 Type of the tenth data dimension T11 Type of the eleventh data dimension T12 Type of the twelfth data dimension T13 Type of the thirteenth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>, IEnumerable<T10>, IEnumerable<T11>, IEnumerable<T12>, IEnumerable<T13>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9, IEnumerable<T10> dimension10, IEnumerable<T11> dimension11, IEnumerable<T12> dimension12, IEnumerable<T13> dimension13) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension dimension10 IEnumerable<T10> Data for the tenth dimension dimension11 IEnumerable<T11> Data for the eleventh dimension dimension12 IEnumerable<T12> Data for the twelfth dimension dimension13 IEnumerable<T13> Data for the thirteenth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-14.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-14.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of fourteen data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension T10 Type of the tenth data dimension T11 Type of the eleventh data dimension T12 Type of the twelfth data dimension T13 Type of the thirteenth data dimension T14 Type of the fourteenth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>, IEnumerable<T10>, IEnumerable<T11>, IEnumerable<T12>, IEnumerable<T13>, IEnumerable<T14>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9, IEnumerable<T10> dimension10, IEnumerable<T11> dimension11, IEnumerable<T12> dimension12, IEnumerable<T13> dimension13, IEnumerable<T14> dimension14) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension dimension10 IEnumerable<T10> Data for the tenth dimension dimension11 IEnumerable<T11> Data for the eleventh dimension dimension12 IEnumerable<T12> Data for the twelfth dimension dimension13 IEnumerable<T13> Data for the thirteenth dimension dimension14 IEnumerable<T14> Data for the fourteenth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-15.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-15.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of fifteen data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension T10 Type of the tenth data dimension T11 Type of the eleventh data dimension T12 Type of the twelfth data dimension T13 Type of the thirteenth data dimension T14 Type of the fourteenth data dimension T15 Type of the fifteenth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>, IEnumerable<T10>, IEnumerable<T11>, IEnumerable<T12>, IEnumerable<T13>, IEnumerable<T14>, IEnumerable<T15>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9, IEnumerable<T10> dimension10, IEnumerable<T11> dimension11, IEnumerable<T12> dimension12, IEnumerable<T13> dimension13, IEnumerable<T14> dimension14, IEnumerable<T15> dimension15) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension dimension10 IEnumerable<T10> Data for the tenth dimension dimension11 IEnumerable<T11> Data for the eleventh dimension dimension12 IEnumerable<T12> Data for the twelfth dimension dimension13 IEnumerable<T13> Data for the thirteenth dimension dimension14 IEnumerable<T14> Data for the fourteenth dimension dimension15 IEnumerable<T15> Data for the fifteenth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-2.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-2.html",
    "title": "Class MatrixTheoryData<T1, T2> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of two data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2> : TheoryData<T1, T2>, IReadOnlyCollection<TheoryDataRow<T1, T2>>, IEnumerable<TheoryDataRow<T1, T2>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)> TheoryData<T1, T2> MatrixTheoryData<T1, T2> Implements IReadOnlyCollection<TheoryDataRow<T1, T2>> IEnumerable<TheoryDataRow<T1, T2>> IEnumerable Inherited Members TheoryData<T1, T2>.Add(T1, T2) TheoryData<T1, T2>.Convert((T1, T2)) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Count TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Add((T1, T2)) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Add(TheoryDataRow<T1, T2>) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(IEnumerable<(T1, T2)>) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(params (T1, T2)[]) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(IEnumerable<TheoryDataRow<T1, T2>>) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(params TheoryDataRow<T1, T2>[]) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Convert((T1, T2)) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>) Initializes a new instance of the MatrixTheoryData<T1, T2> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-3.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-3.html",
    "title": "Class MatrixTheoryData<T1, T2, T3> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of three data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3> : TheoryData<T1, T2, T3>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3>>, IEnumerable<TheoryDataRow<T1, T2, T3>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)> TheoryData<T1, T2, T3> MatrixTheoryData<T1, T2, T3> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3>> IEnumerable<TheoryDataRow<T1, T2, T3>> IEnumerable Inherited Members TheoryData<T1, T2, T3>.Add(T1, T2, T3) TheoryData<T1, T2, T3>.Convert((T1, T2, T3)) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Add((T1, T2, T3)) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Add(TheoryDataRow<T1, T2, T3>) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(IEnumerable<(T1, T2, T3)>) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(params (T1, T2, T3)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3>>) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(params TheoryDataRow<T1, T2, T3>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Convert((T1, T2, T3)) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-4.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-4.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of four data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4> : TheoryData<T1, T2, T3, T4>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)> TheoryData<T1, T2, T3, T4> MatrixTheoryData<T1, T2, T3, T4> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4>> IEnumerable<TheoryDataRow<T1, T2, T3, T4>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4>.Add(T1, T2, T3, T4) TheoryData<T1, T2, T3, T4>.Convert((T1, T2, T3, T4)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Add((T1, T2, T3, T4)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Add(TheoryDataRow<T1, T2, T3, T4>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(IEnumerable<(T1, T2, T3, T4)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(params (T1, T2, T3, T4)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(params TheoryDataRow<T1, T2, T3, T4>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Convert((T1, T2, T3, T4)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-5.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-5.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of five data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5> : TheoryData<T1, T2, T3, T4, T5>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)> TheoryData<T1, T2, T3, T4, T5> MatrixTheoryData<T1, T2, T3, T4, T5> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5>.Add(T1, T2, T3, T4, T5) TheoryData<T1, T2, T3, T4, T5>.Convert((T1, T2, T3, T4, T5)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Add((T1, T2, T3, T4, T5)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Add(TheoryDataRow<T1, T2, T3, T4, T5>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(params (T1, T2, T3, T4, T5)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Convert((T1, T2, T3, T4, T5)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-6.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-6.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of six data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6> : TheoryData<T1, T2, T3, T4, T5, T6>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)> TheoryData<T1, T2, T3, T4, T5, T6> MatrixTheoryData<T1, T2, T3, T4, T5, T6> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6>.Add(T1, T2, T3, T4, T5, T6) TheoryData<T1, T2, T3, T4, T5, T6>.Convert((T1, T2, T3, T4, T5, T6)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Add((T1, T2, T3, T4, T5, T6)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(params (T1, T2, T3, T4, T5, T6)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Convert((T1, T2, T3, T4, T5, T6)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-7.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-7.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of seven data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> : TheoryData<T1, T2, T3, T4, T5, T6, T7>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)> TheoryData<T1, T2, T3, T4, T5, T6, T7> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7>.Add(T1, T2, T3, T4, T5, T6, T7) TheoryData<T1, T2, T3, T4, T5, T6, T7>.Convert((T1, T2, T3, T4, T5, T6, T7)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Add((T1, T2, T3, T4, T5, T6, T7)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Convert((T1, T2, T3, T4, T5, T6, T7)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-8.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-8.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of eight data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8>.Add(T1, T2, T3, T4, T5, T6, T7, T8) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8>.Convert((T1, T2, T3, T4, T5, T6, T7, T8)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Add((T1, T2, T3, T4, T5, T6, T7, T8)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension"
  },
  "v3/2.0.0/Xunit.MatrixTheoryData-9.html": {
    "href": "v3/2.0.0/Xunit.MatrixTheoryData-9.html",
    "title": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> | xunit",
    "summary": "Class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Namespace Xunit Assembly xunit.v3.core.dll Represents theory data which is created from the merging of nine data streams by creating a matrix of the data. public class MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> : TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, IEnumerable Type Parameters T1 Type of the first data dimension T2 Type of the second data dimension T3 Type of the third data dimension T4 Type of the fourth data dimension T5 Type of the fifth data dimension T6 Type of the sixth data dimension T7 Type of the seventh data dimension T8 Type of the eighth data dimension T9 Type of the ninth data dimension Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>> IEnumerable Inherited Members TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Add(T1, T2, T3, T4, T5, T6, T7, T8, T9) TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MatrixTheoryData(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>, IEnumerable<T8>, IEnumerable<T9>) Initializes a new instance of the MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public MatrixTheoryData(IEnumerable<T1> dimension1, IEnumerable<T2> dimension2, IEnumerable<T3> dimension3, IEnumerable<T4> dimension4, IEnumerable<T5> dimension5, IEnumerable<T6> dimension6, IEnumerable<T7> dimension7, IEnumerable<T8> dimension8, IEnumerable<T9> dimension9) Parameters dimension1 IEnumerable<T1> Data for the first dimension dimension2 IEnumerable<T2> Data for the second dimension dimension3 IEnumerable<T3> Data for the third dimension dimension4 IEnumerable<T4> Data for the fourth dimension dimension5 IEnumerable<T5> Data for the fifth dimension dimension6 IEnumerable<T6> Data for the sixth dimension dimension7 IEnumerable<T7> Data for the seventh dimension dimension8 IEnumerable<T8> Data for the eighth dimension dimension9 IEnumerable<T9> Data for the ninth dimension"
  },
  "v3/2.0.0/Xunit.MediaTypeUtility.html": {
    "href": "v3/2.0.0/Xunit.MediaTypeUtility.html",
    "title": "Class MediaTypeUtility | xunit",
    "summary": "Class MediaTypeUtility Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll This class provides mappings from media types (stored in attachments) to the intended file system extension when storing the attachment on disk. public static class MediaTypeUtility Inheritance object MediaTypeUtility Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetFileExtension(string) Gets the file extension for the given media type. If the media type is unknown, it will return .bin. public static string GetFileExtension(string mediaType) Parameters mediaType string The media type to get the file extension from Returns string Remarks This list is pre-populated with media types from https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types. On Windows, an unknown media type will attempt to find the file extension in the system registry, under HKEY_CLASSES_ROOT\\MIME\\Database\\Content Type; on non-Windows OSes, there is no fallback. The pre-populated cache was last populated on 2025 February 5."
  },
  "v3/2.0.0/Xunit.MemberDataAttribute.html": {
    "href": "v3/2.0.0/Xunit.MemberDataAttribute.html",
    "title": "Class MemberDataAttribute | xunit",
    "summary": "Class MemberDataAttribute Namespace Xunit Assembly xunit.v3.core.dll Provides a data source for a data theory, with the data coming from one of the following sources: A public static property A public static field A public static method (with parameters) [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class MemberDataAttribute : MemberDataAttributeBase, IDataAttribute Inheritance object Attribute DataAttribute MemberDataAttributeBase MemberDataAttribute Implements IDataAttribute Inherited Members MemberDataAttributeBase.Arguments MemberDataAttributeBase.DisableDiscoveryEnumeration MemberDataAttributeBase.MemberName MemberDataAttributeBase.MemberType MemberDataAttributeBase.GetData(MethodInfo, DisposalTracker) MemberDataAttributeBase.SupportsDiscoveryEnumeration() DataAttribute.Explicit DataAttribute.Skip DataAttribute.TestDisplayName DataAttribute.Timeout DataAttribute.Traits Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks The member must return data in a form that is compatible, which means collections of object?[], ITheoryDataRow, or tuple values. Those collections may come via IEnumerable<T> or IAsyncEnumerable<T>, and those collections may optionally be wrapped in either Task<TResult> or ValueTask<TResult>. Constructors MemberDataAttribute(string, params object?[]) Provides a data source for a data theory, with the data coming from one of the following sources: A public static property A public static field A public static method (with parameters) public MemberDataAttribute(string memberName, params object?[] arguments) Parameters memberName string The name of the public static member on the test class that will provide the test data It is recommended to use the nameof operator to ensure compile-time safety, e.g., nameof(SomeMemberName). arguments object[] The arguments to be passed to the member (only supported for methods; ignored for everything else) Remarks The member must return data in a form that is compatible, which means collections of object?[], ITheoryDataRow, or tuple values. Those collections may come via IEnumerable<T> or IAsyncEnumerable<T>, and those collections may optionally be wrapped in either Task<TResult> or ValueTask<TResult>."
  },
  "v3/2.0.0/Xunit.Record.html": {
    "href": "v3/2.0.0/Xunit.Record.html",
    "title": "Class Record | xunit",
    "summary": "Class Record Namespace Xunit Assembly xunit.v3.core.dll Allows the user to record actions for a test. public static class Record Inheritance object Record Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Exception(Action) Records any exception which is thrown by the given code. public static Exception? Exception(Action testCode) Parameters testCode Action The code which may throw an exception. Returns Exception Returns the exception that was thrown by the code; null, otherwise. Exception(Func<object?>) Records any exception which is thrown by the given code that has a return value. Generally used for testing property accessors. public static Exception? Exception(Func<object?> testCode) Parameters testCode Func<object> The code which may throw an exception. Returns Exception Returns the exception that was thrown by the code; null, otherwise. ExceptionAsync(Func<Task>) Records any exception which is thrown by the given task. public static ValueTask<Exception?> ExceptionAsync(Func<Task> testCode) Parameters testCode Func<Task> The task which may throw an exception. Returns ValueTask<Exception> Returns the exception that was thrown by the code; null, otherwise."
  },
  "v3/2.0.0/Xunit.RemotingUtility.html": {
    "href": "v3/2.0.0/Xunit.RemotingUtility.html",
    "title": "Class RemotingUtility | xunit",
    "summary": "Class RemotingUtility Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Internal helper class for remoting. public static class RemotingUtility Inheritance object RemotingUtility Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CleanUpRegisteredChannels() Unregisters any remoting channels. public static void CleanUpRegisteredChannels() Remarks If there are any registered remoting channels, then MarshalByRefObjects don't work. Based on bug #9749, it's clear that MSTest (at least through Visual Studio 2010) registers remoting channels when it runs but doesn't clean them up when it's done. Right now, the only way to reliably surface this issue is through MSBuild (as per the bug repro), so for the moment this work-around code is limited to the MSBuild runner."
  },
  "v3/2.0.0/Xunit.Runner.Common.AfterTestFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AfterTestFinished.html",
    "title": "Class AfterTestFinished | xunit",
    "summary": "Class AfterTestFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IAfterTestFinished. [JsonTypeID(\"after-test-finished\")] public sealed class AfterTestFinished : TestMessage, IJsonDeserializable, IAfterTestFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage AfterTestFinished Implements IJsonDeserializable IAfterTestFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.AfterTestStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AfterTestStarting.html",
    "title": "Class AfterTestStarting | xunit",
    "summary": "Class AfterTestStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IAfterTestStarting. [JsonTypeID(\"after-test-starting\")] public sealed class AfterTestStarting : TestMessage, IJsonDeserializable, IAfterTestStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage AfterTestStarting Implements IJsonDeserializable IAfterTestStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.AggregateMessageSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AggregateMessageSink.html",
    "title": "Class AggregateMessageSink | xunit",
    "summary": "Class AggregateMessageSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IMessageSink which dispatches messages to one or more individual message sinks. public class AggregateMessageSink : IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink Implements IMessageSink IAsyncDisposable Derived TestMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AggregatedSinks The list of event dispatchers that are registered with the system. protected List<IMessageSink> AggregatedSinks { get; } Property Value List<IMessageSink> Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher?) Gets a dispatcher, optionally creating and registering it if it doesn't exist. protected TDispatcher GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher? value) where TDispatcher : class, IMessageSink, new() Parameters value TDispatcher The dispatcher Returns TDispatcher The dispatcher Type Parameters TDispatcher The type of the dispatcher OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public virtual bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.Common.AppDomainOption.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AppDomainOption.html",
    "title": "Enum AppDomainOption | xunit",
    "summary": "Enum AppDomainOption Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Indicates the current level of app domain support that's in effect, for use by runner reporters. public enum AppDomainOption Fields Disabled = 1 App domains are supported, but currently disabled Enabled = 2 App domains are supported and currently enabled NotAvailable = 0 App domains are not supported by the current platform"
  },
  "v3/2.0.0/Xunit.Runner.Common.AppDomainSupport.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AppDomainSupport.html",
    "title": "Enum AppDomainSupport | xunit",
    "summary": "Enum AppDomainSupport Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Indicates the level of app domain support that the runner is requesting. Note that these values are only valid for v1 and v2 tests; v3 tests always run in a separate process rather than in the runner process. public enum AppDomainSupport Fields Denied = 3 Requires that v1 and v2 tests be run in the runner's app domain. IfAvailable = 1 Requests that app domains be used for v1 and v2 tests, if available; if app domains cannot be used, then the tests will be discovered and run in the runner's app domain. Required = 2 Requires that v1 and v2 tests run in a separate app domain. Can only be requested by runners written in .NET Framework."
  },
  "v3/2.0.0/Xunit.Runner.Common.AppVeyorReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AppVeyorReporter.html",
    "title": "Class AppVeyorReporter | xunit",
    "summary": "Class AppVeyorReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that reports results to AppVeyor. This is auto-enabled by the presence of the \"APPVEYOR_API_URL\" environment variable, which points to the AppVeyor API endpoint that is used to report tests. It has no switch for manual enablement, since the API endpoint is required. public class AppVeyorReporter : IRunnerReporter Inheritance object AppVeyorReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string? RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.AppVeyorReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AppVeyorReporterMessageHandler.html",
    "title": "Class AppVeyorReporterMessageHandler | xunit",
    "summary": "Class AppVeyorReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports AppVeyorReporter. public class AppVeyorReporterMessageHandler : DefaultRunnerReporterMessageHandler, IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink TestMessageSink DefaultRunnerReporterMessageHandler AppVeyorReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members DefaultRunnerReporterMessageHandler.EnvVar_HidePassingOutput DefaultRunnerReporterMessageHandler.Logger DefaultRunnerReporterMessageHandler.MetadataCache DefaultRunnerReporterMessageHandler.Escape(string) DefaultRunnerReporterMessageHandler.EscapeMultiLineIndent(string, string) DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(XunitProjectAssembly) DefaultRunnerReporterMessageHandler.GetExecutionOptions(string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string, params object[]) DefaultRunnerReporterMessageHandler.LogStackTrace(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogOutput(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogWarnings(StackFrameInfo, string[]) DefaultRunnerReporterMessageHandler.HandleErrorMessage(MessageHandlerArgs<IErrorMessage>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished>) DefaultRunnerReporterMessageHandler.HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting>) DefaultRunnerReporterMessageHandler.HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished>) DefaultRunnerReporterMessageHandler.HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting>) DefaultRunnerReporterMessageHandler.HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished>) DefaultRunnerReporterMessageHandler.HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting>) DefaultRunnerReporterMessageHandler.HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries>) DefaultRunnerReporterMessageHandler.HandleTestFinished(MessageHandlerArgs<ITestFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting>) DefaultRunnerReporterMessageHandler.HandleTestOutput(MessageHandlerArgs<ITestOutput>) DefaultRunnerReporterMessageHandler.WriteDefaultSummary(IRunnerLogger, TestExecutionSummaries) TestMessageSink.Diagnostics TestMessageSink.Discovery TestMessageSink.Execution TestMessageSink.Runner AggregateMessageSink.AggregatedSinks AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors AppVeyorReporterMessageHandler(IRunnerLogger, string) Initializes a new instance of the AppVeyorReporterMessageHandler class. public AppVeyorReporterMessageHandler(IRunnerLogger logger, string baseUri) Parameters logger IRunnerLogger The logger used to report messages baseUri string The base AppVeyor API URI Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public override ValueTask DisposeAsync() Returns ValueTask HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished>) Called when ITestAssemblyFinished is raised. protected override void HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished> args) Parameters args MessageHandlerArgs<ITestAssemblyFinished> An object that contains the event data. HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting>) Called when ITestAssemblyStarting is raised. protected override void HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting> args) Parameters args MessageHandlerArgs<ITestAssemblyStarting> An object that contains the event data. HandleTestFailed(MessageHandlerArgs<ITestFailed>) Called when ITestFailed is raised. protected override void HandleTestFailed(MessageHandlerArgs<ITestFailed> args) Parameters args MessageHandlerArgs<ITestFailed> An object that contains the event data. HandleTestPassed(MessageHandlerArgs<ITestPassed>) Called when ITestPassed is raised. protected override void HandleTestPassed(MessageHandlerArgs<ITestPassed> args) Parameters args MessageHandlerArgs<ITestPassed> An object that contains the event data. HandleTestSkipped(MessageHandlerArgs<ITestSkipped>) Called when ITestSkipped is raised. protected override void HandleTestSkipped(MessageHandlerArgs<ITestSkipped> args) Parameters args MessageHandlerArgs<ITestSkipped> An object that contains the event data. HandleTestStarting(MessageHandlerArgs<ITestStarting>) Called when ITestStarting is raised. protected override void HandleTestStarting(MessageHandlerArgs<ITestStarting> args) Parameters args MessageHandlerArgs<ITestStarting> An object that contains the event data."
  },
  "v3/2.0.0/Xunit.Runner.Common.AssemblyMetadata.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.AssemblyMetadata.html",
    "title": "Class AssemblyMetadata | xunit",
    "summary": "Class AssemblyMetadata Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents metadata about an assembly. public class AssemblyMetadata Inheritance object AssemblyMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors AssemblyMetadata(int, string?) Initializes a new instance of the AssemblyMetadata class. public AssemblyMetadata(int xunitVersion, string? targetFramework) Parameters xunitVersion int The xUnit.net version (0 = unknown, or 1/2/3) targetFramework string The target framework Properties TargetFrameworkIdentifier Gets the target framework identifier the assembly was built against. public TargetFrameworkIdentifier TargetFrameworkIdentifier { get; } Property Value TargetFrameworkIdentifier TargetFrameworkVersion Gets the version of the target framework identifier that the assembly was built against. public Version TargetFrameworkVersion { get; } Property Value Version XunitVersion Gets the major version of xUnit.net this assembly targets (1, 2, or 3); may return a value of 0 if the version is unknown. public int XunitVersion { get; } Property Value int"
  },
  "v3/2.0.0/Xunit.Runner.Common.BeforeTestFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.BeforeTestFinished.html",
    "title": "Class BeforeTestFinished | xunit",
    "summary": "Class BeforeTestFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IBeforeTestFinished. [JsonTypeID(\"before-test-finished\")] public sealed class BeforeTestFinished : TestMessage, IJsonDeserializable, IBeforeTestFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage BeforeTestFinished Implements IJsonDeserializable IBeforeTestFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.BeforeTestStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.BeforeTestStarting.html",
    "title": "Class BeforeTestStarting | xunit",
    "summary": "Class BeforeTestStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IBeforeTestStarting. [JsonTypeID(\"before-test-starting\")] public sealed class BeforeTestStarting : TestMessage, IJsonDeserializable, IBeforeTestStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage BeforeTestStarting Implements IJsonDeserializable IBeforeTestStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.ConfigReader.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConfigReader.html",
    "title": "Class ConfigReader | xunit",
    "summary": "Class ConfigReader Namespace Xunit.Runner.Common Assembly xunit.v3.runner.utility.netfx.dll This class is used to read configuration information for a test assembly. public static class ConfigReader Inheritance object ConfigReader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(TestAssemblyConfiguration, string?, string?, List<string>?) Loads the test assembly configuration for the given test assembly. public static bool Load(TestAssemblyConfiguration configuration, string? assemblyFileName, string? configFileName = null, List<string>? warnings = null) Parameters configuration TestAssemblyConfiguration The configuration object to write the values to. assemblyFileName string The test assembly. configFileName string The test assembly configuration file. warnings List<string> A container to receive loading warnings, if desired. Returns bool A flag which indicates whether configuration values were read."
  },
  "v3/2.0.0/Xunit.Runner.Common.ConfigReader_Configuration.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConfigReader_Configuration.html",
    "title": "Class ConfigReader_Configuration | xunit",
    "summary": "Class ConfigReader_Configuration Namespace Xunit.Runner.Common Assembly xunit.v3.runner.utility.netfx.dll This class is used to read configuration information for a test assembly. public static class ConfigReader_Configuration Inheritance object ConfigReader_Configuration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(TestAssemblyConfiguration, string?, string?, List<string>?) Loads the test assembly configuration for the given test assembly. public static bool Load(TestAssemblyConfiguration configuration, string? assemblyFileName, string? configFileName = null, List<string>? warnings = null) Parameters configuration TestAssemblyConfiguration The configuration object to write the values to. assemblyFileName string The test assembly file name. configFileName string The test assembly configuration file. warnings List<string> A container to receive loading warnings, if desired. Returns bool A flag which indicates whether configuration values were read."
  },
  "v3/2.0.0/Xunit.Runner.Common.ConfigReader_Json.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConfigReader_Json.html",
    "title": "Class ConfigReader_Json | xunit",
    "summary": "Class ConfigReader_Json Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll This class is used to read JSON-based configuration information for a test assembly. public static class ConfigReader_Json Inheritance object ConfigReader_Json Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Load(TestAssemblyConfiguration, string?, string?, List<string>?) Loads the test assembly configuration for the given test assembly. public static bool Load(TestAssemblyConfiguration configuration, string? assemblyFileName, string? configFileName = null, List<string>? warnings = null) Parameters configuration TestAssemblyConfiguration The configuration object to write the values to. assemblyFileName string The test assembly. configFileName string The test assembly configuration file. warnings List<string> A container to receive loading warnings, if desired. Returns bool A flag which indicates whether configuration values were read. LoadFromJson(TestAssemblyConfiguration, string, List<string>?) Loads the test assembly configuration for the given test assembly. public static bool LoadFromJson(TestAssemblyConfiguration configuration, string jsonText, List<string>? warnings = null) Parameters configuration TestAssemblyConfiguration The configuration object to write the values to. jsonText string The configuration JSON, as a string warnings List<string> A container to receive loading warnings, if desired. Returns bool A flag which indicates whether configuration values were read."
  },
  "v3/2.0.0/Xunit.Runner.Common.ConfigUtility.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConfigUtility.html",
    "title": "Class ConfigUtility | xunit",
    "summary": "Class ConfigUtility Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Utilities for reading configuration values. public static class ConfigUtility Inheritance object ConfigUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MultiplierStyleMaxParallelThreadsRegex Gets the regular expression that matches the multiplier-style value for maximum parallel threads (that is, '0.5x', '2x', etc.). public static readonly Regex MultiplierStyleMaxParallelThreadsRegex Field Value Regex"
  },
  "v3/2.0.0/Xunit.Runner.Common.ConsoleDiagnosticMessageSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConsoleDiagnosticMessageSink.html",
    "title": "Class ConsoleDiagnosticMessageSink | xunit",
    "summary": "Class ConsoleDiagnosticMessageSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Logs diagnostic messages to the system console. public class ConsoleDiagnosticMessageSink : IMessageSink Inheritance object ConsoleDiagnosticMessageSink Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. TryCreate(ConsoleHelper, bool, bool, bool, string?, bool) Tries to create a new instance of the ConsoleDiagnosticMessageSink which will display instances of IDiagnosticMessage and IInternalDiagnosticMessage to the Console. May return null if both showDiagnosticMessages and showInternalDiagnosticMessages are false. public static ConsoleDiagnosticMessageSink? TryCreate(ConsoleHelper consoleHelper, bool noColor, bool showDiagnosticMessages = false, bool showInternalDiagnosticMessages = false, string? assemblyDisplayName = null, bool indent = true) Parameters consoleHelper ConsoleHelper The helper used to write console messages noColor bool A flag to indicate that the user has asked for no color showDiagnosticMessages bool A flag to indicate whether diagnostic messages should be shown showInternalDiagnosticMessages bool A flag to indicate whether internal diagnostic messages should be shown assemblyDisplayName string The optional assembly display name to delineate the messages indent bool Whether to indent the message Returns ConsoleDiagnosticMessageSink"
  },
  "v3/2.0.0/Xunit.Runner.Common.ConsoleHelper.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConsoleHelper.html",
    "title": "Class ConsoleHelper | xunit",
    "summary": "Class ConsoleHelper Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll This class helps write colored text to the console. On Windows, it will use the built-in console functions; on Linux and macOS, it will use ANSI color codes. public class ConsoleHelper Inheritance object ConsoleHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ConsoleHelper(TextReader, TextWriter) Initializes a new instance of the ConsoleHelper class. public ConsoleHelper(TextReader consoleReader, TextWriter consoleWriter) Parameters consoleReader TextReader The TextReader for the console (typically In). consoleWriter TextWriter The TextWriter for the console (typically Out). Properties LockObject Gets a lock object that can be used to lock multiple calls to ConsoleHelper functions to ensure consistent output. public object LockObject { get; } Property Value object ResetColor Equivalent to ResetColor(). public Action ResetColor { get; } Property Value Action SetBackgroundColor Equivalent to BackgroundColor. public Action<ConsoleColor> SetBackgroundColor { get; } Property Value Action<ConsoleColor> SetForegroundColor Equivalent to ForegroundColor. public Action<ConsoleColor> SetForegroundColor { get; } Property Value Action<ConsoleColor> Methods ReadLine() Gets a line of input from the console. public string? ReadLine() Returns string UseAnsiColor() Force using ANSI color instead of deciding based on OS. public void UseAnsiColor() Write(string?) Writes the string value to the console. public void Write(string? value) Parameters value string Write(string, object?) Writes a formatted string value to the console. public void Write(string format, object? arg0) Parameters format string The message format string arg0 object The value to replace {0} in the format string Write(string, object?, object?) Writes a formatted string value to the console. public void Write(string format, object? arg0, object? arg1) Parameters format string The message format string arg0 object The value to replace {0} in the format string arg1 object The value to replace {1} in the format string Write(string, object?, object?, object?) Writes a formatted string value to the console. public void Write(string format, object? arg0, object? arg1, object? arg2) Parameters format string The message format string arg0 object The value to replace {0} in the format string arg1 object The value to replace {1} in the format string arg2 object The value to replace {2} in the format string Write(string, params object?[]) Writes a formatted string value to the console. public void Write(string format, params object?[] args) Parameters format string The message format string args object[] An object array that contains zero or more objects to format. WriteLine() Writes NewLine to the console. public void WriteLine() WriteLine(string?) Writes the string value to the console, followed by NewLine. public void WriteLine(string? value) Parameters value string WriteLine(string, object?) Writes a formatted string value to the console, followed by NewLine. public void WriteLine(string format, object? arg0) Parameters format string The message format string arg0 object The value to replace {0} in the format string WriteLine(string, object?, object?) Writes a formatted string value to the console, followed by NewLine. public void WriteLine(string format, object? arg0, object? arg1) Parameters format string The message format string arg0 object The value to replace {0} in the format string arg1 object The value to replace {1} in the format string WriteLine(string, object?, object?, object?) Writes a formatted string value to the console, followed by NewLine. public void WriteLine(string format, object? arg0, object? arg1, object? arg2) Parameters format string The message format string arg0 object The value to replace {0} in the format string arg1 object The value to replace {1} in the format string arg2 object The value to replace {2} in the format string WriteLine(string, params object?[]) Writes a formatted string value to the console, followed by NewLine. public void WriteLine(string format, params object?[] args) Parameters format string The message format string args object[] An object array that contains zero or more objects to format."
  },
  "v3/2.0.0/Xunit.Runner.Common.ConsoleProjectLister.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConsoleProjectLister.html",
    "title": "Class ConsoleProjectLister | xunit",
    "summary": "Class ConsoleProjectLister Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Helper class to list project contents out to Console. public static class ConsoleProjectLister Inheritance object ConsoleProjectLister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods List<TTestCase>(ConsoleHelper, IReadOnlyDictionary<string, List<TTestCase>>, ListOption, ListFormat) List the contents of the test cases to the console, based on the provided option and format. public static void List<TTestCase>(ConsoleHelper consoleHelper, IReadOnlyDictionary<string, List<TTestCase>> testCasesByAssembly, ListOption listOption, ListFormat listFormat) where TTestCase : ITestCaseMetadata Parameters consoleHelper ConsoleHelper testCasesByAssembly IReadOnlyDictionary<string, List<TTestCase>> listOption ListOption listFormat ListFormat Type Parameters TTestCase"
  },
  "v3/2.0.0/Xunit.Runner.Common.ConsoleRunnerLogger.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ConsoleRunnerLogger.html",
    "title": "Class ConsoleRunnerLogger | xunit",
    "summary": "Class ConsoleRunnerLogger Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerLogger which logs messages to a TextWriter (typically the one from Out). public class ConsoleRunnerLogger : IRunnerLogger Inheritance object ConsoleRunnerLogger Implements IRunnerLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) IRunnerLoggerExtensions.LogError(IRunnerLogger, string) IRunnerLoggerExtensions.LogError(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogError(IRunnerLogger, StackFrameInfo, string, params object?[]) IRunnerLoggerExtensions.LogImportantMessage(IRunnerLogger, string) IRunnerLoggerExtensions.LogImportantMessage(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogImportantMessage(IRunnerLogger, StackFrameInfo, string, params object?[]) IRunnerLoggerExtensions.LogMessage(IRunnerLogger, string) IRunnerLoggerExtensions.LogMessage(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogMessage(IRunnerLogger, StackFrameInfo, string, params object?[]) IRunnerLoggerExtensions.LogRaw(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogWarning(IRunnerLogger, string) IRunnerLoggerExtensions.LogWarning(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogWarning(IRunnerLogger, StackFrameInfo, string, params object?[]) Constructors ConsoleRunnerLogger(bool, bool, ConsoleHelper, bool) Initializes a new instance of the ConsoleRunnerLogger class. public ConsoleRunnerLogger(bool useColors, bool useAnsiColor, ConsoleHelper consoleHelper, bool waitForAcknowledgment) Parameters useColors bool A flag to indicate whether colors should be used when logging messages. useAnsiColor bool A flag to indicate whether ANSI colors should be forced on Windows. consoleHelper ConsoleHelper The helper for writing console output. waitForAcknowledgment bool A flag to indicate whether the logger should wait for acknowledgments or not Properties LockObject Gets a lock object that can be used to ensure that multiple calls to log messages will always be grouped together. public object LockObject { get; } Property Value object Methods LogError(StackFrameInfo, string) Logs an error message with stack frame. public void LogError(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged LogImportantMessage(StackFrameInfo, string) Logs a high-priority message with stack frame. public void LogImportantMessage(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged LogMessage(StackFrameInfo, string) Logs a normal-priority message with stack frame. public void LogMessage(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged LogRaw(string) Logs a messages with as little processing as possible. For example, the console runner will not attempt to set the color of the text that's being logged. This is most useful when attempting to render text lines that will be processed, like for TeamCity. public void LogRaw(string message) Parameters message string The message to be logged. LogWarning(StackFrameInfo, string) Logs a warning message with stack frame. public void LogWarning(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged WaitForAcknowledgment() Waits for an acknowledgement of a message. public void WaitForAcknowledgment() Remarks This is primarily for use by JsonReporterMessageHandler so that it can wait for acknowledgment of messages when running in synchronous mode by the in-process runner. Other runner loggers running outside this context (and/or when not in synchronous automated mode) should NOOP for this. WriteLine(string) Writes a (non-colored) message. If Xunit.Runner.Common.ConsoleRunnerLogger.useColors is false, all ANSI-SGR sequences will be removed prior to writing. public void WriteLine(string message) Parameters message string Message to write Remarks See https://en.wikipedia.org/wiki/ANSI_escape_code#SGR for details about ANSI-SGR."
  },
  "v3/2.0.0/Xunit.Runner.Common.DefaultRunnerReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DefaultRunnerReporter.html",
    "title": "Class DefaultRunnerReporter | xunit",
    "summary": "Class DefaultRunnerReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll The default implementation of IRunnerReporter, used by runners when there is no other overridden reporter. It returns an instance of DefaultRunnerReporterMessageHandler. public class DefaultRunnerReporter : IRunnerReporter Inheritance object DefaultRunnerReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public virtual bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public virtual string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public virtual bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public virtual bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public virtual string? RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public virtual ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.html",
    "title": "Class DefaultRunnerReporterMessageHandler | xunit",
    "summary": "Class DefaultRunnerReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports DefaultRunnerReporter. public class DefaultRunnerReporterMessageHandler : TestMessageSink, IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink TestMessageSink DefaultRunnerReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Derived AppVeyorReporterMessageHandler QuietReporterMessageHandler TeamCityReporterMessageHandler VerboseReporterMessageHandler VstsReporterMessageHandler Inherited Members TestMessageSink.Diagnostics TestMessageSink.Discovery TestMessageSink.Execution TestMessageSink.Runner AggregateMessageSink.AggregatedSinks AggregateMessageSink.DisposeAsync() AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DefaultRunnerReporterMessageHandler(IRunnerLogger) Initializes a new instance of the DefaultRunnerReporterMessageHandler class. public DefaultRunnerReporterMessageHandler(IRunnerLogger logger) Parameters logger IRunnerLogger The logger used to report messages Fields EnvVar_HidePassingOutput Gets the environment variable that's used to hide passing tests with output when diagnostics messages are enabled. public const string EnvVar_HidePassingOutput = \"XUNIT_HIDE_PASSING_OUTPUT_DIAGNOSTICS\" Field Value string Properties Logger Get the logger used to report messages. protected IRunnerLogger Logger { get; } Property Value IRunnerLogger MetadataCache Gets the metadata cache. protected MessageMetadataCache MetadataCache { get; } Property Value MessageMetadataCache Methods Escape(string?) Escapes text for display purposes. protected virtual string Escape(string? text) Parameters text string The text to be escaped Returns string The escaped text EscapeMultiLineIndent(string?, string) Escapes multi-line text for display purposes, indenting on newlines. protected virtual string EscapeMultiLineIndent(string? text, string indent) Parameters text string The text to be escaped indent string The indent to use for multiple line text Returns string The escaped text GetAssemblyDisplayName(XunitProjectAssembly) Gets the display name of a test assembly from a test assembly message. protected virtual string GetAssemblyDisplayName(XunitProjectAssembly assembly) Parameters assembly XunitProjectAssembly The test assembly Returns string The assembly display name GetExecutionOptions(string?) Get the test framework options for the given assembly. If it cannot find them, then it returns a default set of options. protected ITestFrameworkExecutionOptions GetExecutionOptions(string? assemblyFileName) Parameters assemblyFileName string The test assembly filename Returns ITestFrameworkExecutionOptions HandleErrorMessage(MessageHandlerArgs<IErrorMessage>) Called when IErrorMessage is raised. protected virtual void HandleErrorMessage(MessageHandlerArgs<IErrorMessage> args) Parameters args MessageHandlerArgs<IErrorMessage> An object that contains the event data. HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure>) Called when ITestAssemblyCleanupFailure is raised. protected virtual void HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure> args) Parameters args MessageHandlerArgs<ITestAssemblyCleanupFailure> An object that contains the event data. HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished>) Called when TestAssemblyDiscoveryFinished is raised. protected virtual void HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished> args) Parameters args MessageHandlerArgs<TestAssemblyDiscoveryFinished> An object that contains the event data. HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting>) Called when TestAssemblyDiscoveryStarting is raised. protected virtual void HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting> args) Parameters args MessageHandlerArgs<TestAssemblyDiscoveryStarting> An object that contains the event data. HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished>) Called when TestAssemblyExecutionFinished is raised. protected virtual void HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished> args) Parameters args MessageHandlerArgs<TestAssemblyExecutionFinished> An object that contains the event data. HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting>) Called when TestAssemblyExecutionStarting is raised. protected virtual void HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting> args) Parameters args MessageHandlerArgs<TestAssemblyExecutionStarting> An object that contains the event data. HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished>) Called when ITestAssemblyFinished is raised. protected virtual void HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished> args) Parameters args MessageHandlerArgs<ITestAssemblyFinished> An object that contains the event data. HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting>) Called when ITestAssemblyStarting is raised. protected virtual void HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting> args) Parameters args MessageHandlerArgs<ITestAssemblyStarting> An object that contains the event data. HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure>) Called when ITestCaseCleanupFailure is raised. protected virtual void HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure> args) Parameters args MessageHandlerArgs<ITestCaseCleanupFailure> An object that contains the event data. HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished>) Called when ITestCaseFinished is raised. protected virtual void HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished> args) Parameters args MessageHandlerArgs<ITestCaseFinished> An object that contains the event data. HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting>) Called when ITestCaseStarting is raised. protected virtual void HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting> args) Parameters args MessageHandlerArgs<ITestCaseStarting> An object that contains the event data. HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure>) Called when ITestClassCleanupFailure is raised. protected virtual void HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure> args) Parameters args MessageHandlerArgs<ITestClassCleanupFailure> An object that contains the event data. HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished>) Called when ITestClassFinished is raised. protected virtual void HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished> args) Parameters args MessageHandlerArgs<ITestClassFinished> An object that contains the event data. HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting>) Called when ITestClassStarting is raised. protected virtual void HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting> args) Parameters args MessageHandlerArgs<ITestClassStarting> An object that contains the event data. HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure>) Called when ITestCleanupFailure is raised. protected virtual void HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure> args) Parameters args MessageHandlerArgs<ITestCleanupFailure> An object that contains the event data. HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure>) Called when ITestCollectionCleanupFailure is raised. protected virtual void HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure> args) Parameters args MessageHandlerArgs<ITestCollectionCleanupFailure> An object that contains the event data. HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished>) Called when ITestCollectionFinished is raised. protected virtual void HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished> args) Parameters args MessageHandlerArgs<ITestCollectionFinished> An object that contains the event data. HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting>) Called when ITestCollectionStarting is raised. protected virtual void HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting> args) Parameters args MessageHandlerArgs<ITestCollectionStarting> An object that contains the event data. HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries>) Called when TestExecutionSummaries is raised. protected virtual void HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries> args) Parameters args MessageHandlerArgs<TestExecutionSummaries> An object that contains the event data. HandleTestFailed(MessageHandlerArgs<ITestFailed>) Called when ITestFailed is raised. protected virtual void HandleTestFailed(MessageHandlerArgs<ITestFailed> args) Parameters args MessageHandlerArgs<ITestFailed> An object that contains the event data. HandleTestFinished(MessageHandlerArgs<ITestFinished>) Called when ITestFinished is raised. protected virtual void HandleTestFinished(MessageHandlerArgs<ITestFinished> args) Parameters args MessageHandlerArgs<ITestFinished> An object that contains the event data. HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure>) Called when ITestMethodCleanupFailure is raised. protected virtual void HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure> args) Parameters args MessageHandlerArgs<ITestMethodCleanupFailure> An object that contains the event data. HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished>) Called when ITestMethodFinished is raised. protected virtual void HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished> args) Parameters args MessageHandlerArgs<ITestMethodFinished> An object that contains the event data. HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting>) Called when ITestMethodStarting is raised. protected virtual void HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting> args) Parameters args MessageHandlerArgs<ITestMethodStarting> An object that contains the event data. HandleTestOutput(MessageHandlerArgs<ITestOutput>) protected virtual void HandleTestOutput(MessageHandlerArgs<ITestOutput> args) Parameters args MessageHandlerArgs<ITestOutput> HandleTestPassed(MessageHandlerArgs<ITestPassed>) Called when ITestPassed is raised. protected virtual void HandleTestPassed(MessageHandlerArgs<ITestPassed> args) Parameters args MessageHandlerArgs<ITestPassed> An object that contains the event data. HandleTestSkipped(MessageHandlerArgs<ITestSkipped>) Called when ITestSkipped is raised. protected virtual void HandleTestSkipped(MessageHandlerArgs<ITestSkipped> args) Parameters args MessageHandlerArgs<ITestSkipped> An object that contains the event data. HandleTestStarting(MessageHandlerArgs<ITestStarting>) Called when ITestStarting is raised. protected virtual void HandleTestStarting(MessageHandlerArgs<ITestStarting> args) Parameters args MessageHandlerArgs<ITestStarting> An object that contains the event data. LogError(IErrorMetadata, string) Logs an error message to the logger. protected void LogError(IErrorMetadata errorMetadata, string failureType) Parameters errorMetadata IErrorMetadata The failure information failureType string The type of the failure LogError(IErrorMetadata, string, params object?[]) Logs an error message to the logger. protected void LogError(IErrorMetadata errorMetadata, string failureTypeFormat, params object?[] args) Parameters errorMetadata IErrorMetadata The failure information failureTypeFormat string The type of the failure, in message format args object[] The arguments to format failureTypeFormat with LogOutput(StackFrameInfo, string?) Logs test output to the logger. protected virtual void LogOutput(StackFrameInfo frameInfo, string? output) Parameters frameInfo StackFrameInfo output string LogStackTrace(StackFrameInfo, string?) Logs a stack trace to the logger. protected virtual void LogStackTrace(StackFrameInfo frameInfo, string? stackTrace) Parameters frameInfo StackFrameInfo stackTrace string LogWarnings(StackFrameInfo, string[]?) Logs warnings to the logger. protected virtual void LogWarnings(StackFrameInfo frameInfo, string[]? warnings) Parameters frameInfo StackFrameInfo warnings string[] WriteDefaultSummary(IRunnerLogger, TestExecutionSummaries) Writes the default summary to the given logger. Can be used by other reporters who also wish to write the standard summary information. public void WriteDefaultSummary(IRunnerLogger logger, TestExecutionSummaries summaries) Parameters logger IRunnerLogger The logger used to send result messages to. summaries TestExecutionSummaries The execution summary to display."
  },
  "v3/2.0.0/Xunit.Runner.Common.DiagnosticEventSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DiagnosticEventSink.html",
    "title": "Class DiagnosticEventSink | xunit",
    "summary": "Class DiagnosticEventSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Class that maps diagnostic messages to events. public class DiagnosticEventSink : IMessageSink Inheritance object DiagnosticEventSink Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. Events DiagnosticMessageEvent Occurs when a IDiagnosticMessage message is received. public event MessageHandler<IDiagnosticMessage>? DiagnosticMessageEvent Event Type MessageHandler<IDiagnosticMessage> ErrorMessageEvent Occurs when a IErrorMessage message is received. public event MessageHandler<IErrorMessage>? ErrorMessageEvent Event Type MessageHandler<IErrorMessage> InternalDiagnosticMessageEvent Occurs when a IInternalDiagnosticMessage message is received. public event MessageHandler<IInternalDiagnosticMessage>? InternalDiagnosticMessageEvent Event Type MessageHandler<IInternalDiagnosticMessage>"
  },
  "v3/2.0.0/Xunit.Runner.Common.DiagnosticMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DiagnosticMessage.html",
    "title": "Class DiagnosticMessage | xunit",
    "summary": "Class DiagnosticMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IDiagnosticMessage. [JsonTypeID(\"diagnostic\")] public sealed class DiagnosticMessage : MessageSinkMessage, IJsonDeserializable, IDiagnosticMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage DiagnosticMessage Implements IJsonDeserializable IDiagnosticMessage IMessageSinkMessage IJsonSerializable Inherited Members MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Constructors DiagnosticMessage() Creates a new instance of the DiagnosticMessage class. public DiagnosticMessage() DiagnosticMessage(string) Creates a new instance of the DiagnosticMessage class with the provided message. public DiagnosticMessage(string message) Parameters message string The diagnostic message DiagnosticMessage(string, object?) Creates a new instance of the DiagnosticMessage class with the provided message format and single argument. public DiagnosticMessage(string messageFormat, object? arg0) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. DiagnosticMessage(string, object?, object?) Creates a new instance of the DiagnosticMessage class with the provided message format and two arguments. public DiagnosticMessage(string messageFormat, object? arg0, object? arg1) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. DiagnosticMessage(string, object?, object?, object?) Creates a new instance of the DiagnosticMessage class with the provided message format and three arguments. public DiagnosticMessage(string messageFormat, object? arg0, object? arg1, object? arg2) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. arg2 object The value to replace {2} in the format string. DiagnosticMessage(string, params object?[]) Creates a new instance of the DiagnosticMessage class with the provided message format and multiple arguments. public DiagnosticMessage(string messageFormat, params object?[] args) Parameters messageFormat string The message format string args object[] An object array that contains zero or more objects to format. Properties Message Gets the diagnostic message. public required string Message { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.DiscoveryComplete.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DiscoveryComplete.html",
    "title": "Class DiscoveryComplete | xunit",
    "summary": "Class DiscoveryComplete Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IDiscoveryComplete. [JsonTypeID(\"discovery-complete\")] public sealed class DiscoveryComplete : TestAssemblyMessage, IJsonDeserializable, IDiscoveryComplete, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage DiscoveryComplete Implements IJsonDeserializable IDiscoveryComplete ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestCasesToRun Gets a count of the number of test cases that passed the filter and will be run. public required int TestCasesToRun { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.DiscoveryEventSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DiscoveryEventSink.html",
    "title": "Class DiscoveryEventSink | xunit",
    "summary": "Class DiscoveryEventSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Class that maps test framework discovery messages to events. public class DiscoveryEventSink : IMessageSink Inheritance object DiscoveryEventSink Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. Events DiscoveryCompleteEvent Occurs when a IDiscoveryComplete message is received. public event MessageHandler<IDiscoveryComplete>? DiscoveryCompleteEvent Event Type MessageHandler<IDiscoveryComplete> DiscoveryStartingEvent Occurs when a IDiscoveryStarting message is received. public event MessageHandler<IDiscoveryStarting>? DiscoveryStartingEvent Event Type MessageHandler<IDiscoveryStarting> TestCaseDiscoveredEvent Occurs when a ITestCaseDiscovered message is received. public event MessageHandler<ITestCaseDiscovered>? TestCaseDiscoveredEvent Event Type MessageHandler<ITestCaseDiscovered>"
  },
  "v3/2.0.0/Xunit.Runner.Common.DiscoveryStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.DiscoveryStarting.html",
    "title": "Class DiscoveryStarting | xunit",
    "summary": "Class DiscoveryStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IDiscoveryStarting. [JsonTypeID(\"discovery-starting\")] public sealed class DiscoveryStarting : TestAssemblyMessage, IJsonDeserializable, IDiscoveryStarting, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage DiscoveryStarting Implements IJsonDeserializable IDiscoveryStarting ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). public required string AssemblyName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. AssemblyPath Gets the on-disk location of the assembly under test. public required string AssemblyPath { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. public required string? ConfigFilePath { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.ErrorMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ErrorMessage.html",
    "title": "Class ErrorMessage | xunit",
    "summary": "Class ErrorMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IErrorMessage. [JsonTypeID(\"error\")] public sealed class ErrorMessage : MessageSinkMessage, IJsonDeserializable, IErrorMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage ErrorMessage Implements IJsonDeserializable IErrorMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception) Creates a new IErrorMessage constructed from an Exception object. public static IErrorMessage FromException(Exception ex) Parameters ex Exception The exception to use Returns IErrorMessage Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.ExecutionEventSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ExecutionEventSink.html",
    "title": "Class ExecutionEventSink | xunit",
    "summary": "Class ExecutionEventSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Class that maps test framework execution messages to events. public class ExecutionEventSink : IMessageSink Inheritance object ExecutionEventSink Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. Events AfterTestFinishedEvent Occurs when a IAfterTestFinished message is received. public event MessageHandler<IAfterTestFinished>? AfterTestFinishedEvent Event Type MessageHandler<IAfterTestFinished> AfterTestStartingEvent Occurs when a IAfterTestStarting message is received. public event MessageHandler<IAfterTestStarting>? AfterTestStartingEvent Event Type MessageHandler<IAfterTestStarting> BeforeTestFinishedEvent Occurs when a IBeforeTestFinished message is received. public event MessageHandler<IBeforeTestFinished>? BeforeTestFinishedEvent Event Type MessageHandler<IBeforeTestFinished> BeforeTestStartingEvent Occurs when a IBeforeTestStarting message is received. public event MessageHandler<IBeforeTestStarting>? BeforeTestStartingEvent Event Type MessageHandler<IBeforeTestStarting> TestAssemblyCleanupFailureEvent Occurs when a ITestAssemblyCleanupFailure message is received. public event MessageHandler<ITestAssemblyCleanupFailure>? TestAssemblyCleanupFailureEvent Event Type MessageHandler<ITestAssemblyCleanupFailure> TestAssemblyFinishedEvent Occurs when a ITestAssemblyFinished message is received. public event MessageHandler<ITestAssemblyFinished>? TestAssemblyFinishedEvent Event Type MessageHandler<ITestAssemblyFinished> TestAssemblyStartingEvent Occurs when a ITestAssemblyStarting message is received. public event MessageHandler<ITestAssemblyStarting>? TestAssemblyStartingEvent Event Type MessageHandler<ITestAssemblyStarting> TestCaseCleanupFailureEvent Occurs when a ITestCaseCleanupFailure message is received. public event MessageHandler<ITestCaseCleanupFailure>? TestCaseCleanupFailureEvent Event Type MessageHandler<ITestCaseCleanupFailure> TestCaseFinishedEvent Occurs when a ITestCaseFinished message is received. public event MessageHandler<ITestCaseFinished>? TestCaseFinishedEvent Event Type MessageHandler<ITestCaseFinished> TestCaseStartingEvent Occurs when a ITestCaseStarting message is received. public event MessageHandler<ITestCaseStarting>? TestCaseStartingEvent Event Type MessageHandler<ITestCaseStarting> TestClassCleanupFailureEvent Occurs when a ITestClassCleanupFailure message is received. public event MessageHandler<ITestClassCleanupFailure>? TestClassCleanupFailureEvent Event Type MessageHandler<ITestClassCleanupFailure> TestClassConstructionFinishedEvent Occurs when a ITestClassConstructionFinished message is received. public event MessageHandler<ITestClassConstructionFinished>? TestClassConstructionFinishedEvent Event Type MessageHandler<ITestClassConstructionFinished> TestClassConstructionStartingEvent Occurs when a ITestClassConstructionStarting message is received. public event MessageHandler<ITestClassConstructionStarting>? TestClassConstructionStartingEvent Event Type MessageHandler<ITestClassConstructionStarting> TestClassDisposeFinishedEvent Occurs when a ITestClassDisposeFinished message is received. public event MessageHandler<ITestClassDisposeFinished>? TestClassDisposeFinishedEvent Event Type MessageHandler<ITestClassDisposeFinished> TestClassDisposeStartingEvent Occurs when a ITestClassDisposeStarting message is received. public event MessageHandler<ITestClassDisposeStarting>? TestClassDisposeStartingEvent Event Type MessageHandler<ITestClassDisposeStarting> TestClassFinishedEvent Occurs when a ITestClassFinished message is received. public event MessageHandler<ITestClassFinished>? TestClassFinishedEvent Event Type MessageHandler<ITestClassFinished> TestClassStartingEvent Occurs when a ITestClassStarting message is received. public event MessageHandler<ITestClassStarting>? TestClassStartingEvent Event Type MessageHandler<ITestClassStarting> TestCleanupFailureEvent Occurs when a ITestCleanupFailure message is received. public event MessageHandler<ITestCleanupFailure>? TestCleanupFailureEvent Event Type MessageHandler<ITestCleanupFailure> TestCollectionCleanupFailureEvent Occurs when a ITestCollectionCleanupFailure message is received. public event MessageHandler<ITestCollectionCleanupFailure>? TestCollectionCleanupFailureEvent Event Type MessageHandler<ITestCollectionCleanupFailure> TestCollectionFinishedEvent Occurs when a ITestCollectionFinished message is received. public event MessageHandler<ITestCollectionFinished>? TestCollectionFinishedEvent Event Type MessageHandler<ITestCollectionFinished> TestCollectionStartingEvent Occurs when a ITestCollectionStarting message is received. public event MessageHandler<ITestCollectionStarting>? TestCollectionStartingEvent Event Type MessageHandler<ITestCollectionStarting> TestFailedEvent Occurs when a ITestFailed message is received. public event MessageHandler<ITestFailed>? TestFailedEvent Event Type MessageHandler<ITestFailed> TestFinishedEvent Occurs when a ITestFinished message is received. public event MessageHandler<ITestFinished>? TestFinishedEvent Event Type MessageHandler<ITestFinished> TestMethodCleanupFailureEvent Occurs when a ITestMethodCleanupFailure message is received. public event MessageHandler<ITestMethodCleanupFailure>? TestMethodCleanupFailureEvent Event Type MessageHandler<ITestMethodCleanupFailure> TestMethodFinishedEvent Occurs when a ITestMethodFinished message is received. public event MessageHandler<ITestMethodFinished>? TestMethodFinishedEvent Event Type MessageHandler<ITestMethodFinished> TestMethodStartingEvent Occurs when a ITestMethodStarting message is received. public event MessageHandler<ITestMethodStarting>? TestMethodStartingEvent Event Type MessageHandler<ITestMethodStarting> TestNotRunEvent Occurs when a ITestNotRun message is received. public event MessageHandler<ITestNotRun>? TestNotRunEvent Event Type MessageHandler<ITestNotRun> TestOutputEvent Occurs when a ITestOutput message is received. public event MessageHandler<ITestOutput>? TestOutputEvent Event Type MessageHandler<ITestOutput> TestPassedEvent Occurs when a ITestPassed message is received. public event MessageHandler<ITestPassed>? TestPassedEvent Event Type MessageHandler<ITestPassed> TestSkippedEvent Occurs when a ITestSkipped message is received. public event MessageHandler<ITestSkipped>? TestSkippedEvent Event Type MessageHandler<ITestSkipped> TestStartingEvent Occurs when a ITestStarting message is received. public event MessageHandler<ITestStarting>? TestStartingEvent Event Type MessageHandler<ITestStarting>"
  },
  "v3/2.0.0/Xunit.Runner.Common.ExecutionSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ExecutionSink.html",
    "title": "Class ExecutionSink | xunit",
    "summary": "Class ExecutionSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll This is the execution sink which most runners will use, which can perform several operations (including recording XML results, detecting long running tests, failing skipped tests, failing tests with warnings, and converting the top-level discovery and execution messages into their runner counterparts). public class ExecutionSink : IMessageSink, IDisposable Inheritance object ExecutionSink Implements IMessageSink IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ExecutionSink(XunitProjectAssembly, ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, AppDomainOption, bool, IMessageSink, ExecutionSinkOptions) Initializes a new instance of the ExecutionSink class. public ExecutionSink(XunitProjectAssembly assembly, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, AppDomainOption appDomainOption, bool shadowCopy, IMessageSink innerSink, ExecutionSinkOptions options) Parameters assembly XunitProjectAssembly The assembly under test. discoveryOptions ITestFrameworkDiscoveryOptions The options used during test discovery. executionOptions ITestFrameworkExecutionOptions The options used during test execution. appDomainOption AppDomainOption A flag to indicate whether app domains are in use. shadowCopy bool A flag to indicate whether shadow copying is in use. innerSink IMessageSink The inner sink to forward messages to (typically the reporter message handler, retrieved by calling CreateMessageHandler(IRunnerLogger, IMessageSink?) on the runner reporter) options ExecutionSinkOptions The options to use for the execution sink Properties ExecutionSummary public ExecutionSummary ExecutionSummary { get; } Property Value ExecutionSummary Finished public ManualResetEvent Finished { get; } Property Value ManualResetEvent UtcNow Returns the current time in UTC. Overrideable for testing purposes. protected virtual DateTimeOffset UtcNow { get; } Property Value DateTimeOffset Methods Dispose() public virtual void Dispose() OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. WaitForStopEvent(int) Performs a Task-safe delay. Overrideable for testing purposes. protected virtual bool WaitForStopEvent(int millionsecondsDelay) Parameters millionsecondsDelay int Returns bool"
  },
  "v3/2.0.0/Xunit.Runner.Common.ExecutionSinkOptions.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ExecutionSinkOptions.html",
    "title": "Class ExecutionSinkOptions | xunit",
    "summary": "Class ExecutionSinkOptions Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll These are the options used when creating ExecutionSink. This is set up as an options class so that new options can be added without breaking binary compatibility. public class ExecutionSinkOptions Inheritance object ExecutionSinkOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AssemblyElement Gets or sets the assembly element used for creating XML. If this is null, then XML will not be created. public XElement? AssemblyElement { get; set; } Property Value XElement CancelThunk Gets or sets a thunk to be used to determine whether cancellation has been requested. public Func<bool>? CancelThunk { get; set; } Property Value Func<bool> DiagnosticMessageSink Gets or sets the diagnostic message sink to report diagnostic messages to. In order for long running tests to be reported, this must not be null. public IMessageSink? DiagnosticMessageSink { get; set; } Property Value IMessageSink FailSkips Gets or sets a flag indicating whether skipped tests should be reported as failed tests. If this is not true, then skipped tests will be reported as skipped. public bool FailSkips { get; set; } Property Value bool FailWarn Gets or sets a flag indicating whether passing tests with warnings should be reported as failed tests. If this is not true, then passing tests with warnings will be reported as passing tests. public bool FailWarn { get; set; } Property Value bool FinishedCallback Gets or sets a callback to be called when execution is complete. public Action<ExecutionSummary>? FinishedCallback { get; set; } Property Value Action<ExecutionSummary> LongRunningTestCallback Gets or sets a callback to be called when a long running test has been detected. public Action<LongRunningTestsSummary>? LongRunningTestCallback { get; set; } Property Value Action<LongRunningTestsSummary> LongRunningTestTime Gets or sets the time after which to report long running tests. If the time span specified here is not greater than Zero, then long running tests will not be detected. public TimeSpan LongRunningTestTime { get; set; } Property Value TimeSpan"
  },
  "v3/2.0.0/Xunit.Runner.Common.ExecutionSummary.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ExecutionSummary.html",
    "title": "Class ExecutionSummary | xunit",
    "summary": "Class ExecutionSummary Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Collects execution totals for a group of test cases. public class ExecutionSummary Inheritance object ExecutionSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Errors Gets or sets the total errors (i.e., cleanup failures) for the tests. public int Errors { get; set; } Property Value int Failed Gets or sets the number of failed tests. public int Failed { get; set; } Property Value int NotRun Gets or sets the number of tests not run. public int NotRun { get; set; } Property Value int Skipped Gets or sets the number of skipped tests. public int Skipped { get; set; } Property Value int Time Gets or sets the total execution time for the tests. public decimal Time { get; set; } Property Value decimal Total Gets or set the total number of tests run. public int Total { get; set; } Property Value int"
  },
  "v3/2.0.0/Xunit.Runner.Common.IRegisterRunnerReporterAttribute.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.IRegisterRunnerReporterAttribute.html",
    "title": "Interface IRegisterRunnerReporterAttribute | xunit",
    "summary": "Interface IRegisterRunnerReporterAttribute Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Used to decorate xUnit.net test assemblies to indicate the availability of a custom runner reporter. public interface IRegisterRunnerReporterAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Runner reporter registration attributes are only valid at the assembly level. Properties RunnerReporterType Gets the type of the runner reporter to be registered. Type RunnerReporterType { get; } Property Value Type Remarks The runner reporter type must implement IRunnerReporter."
  },
  "v3/2.0.0/Xunit.Runner.Common.IRunnerLogger.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.IRunnerLogger.html",
    "title": "Interface IRunnerLogger | xunit",
    "summary": "Interface IRunnerLogger Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Interface implemented by runners, passed to IRunnerReporter, so that the report can log lines of text to the output device. public interface IRunnerLogger Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) IRunnerLoggerExtensions.LogError(IRunnerLogger, string) IRunnerLoggerExtensions.LogError(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogError(IRunnerLogger, StackFrameInfo, string, params object?[]) IRunnerLoggerExtensions.LogImportantMessage(IRunnerLogger, string) IRunnerLoggerExtensions.LogImportantMessage(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogImportantMessage(IRunnerLogger, StackFrameInfo, string, params object?[]) IRunnerLoggerExtensions.LogMessage(IRunnerLogger, string) IRunnerLoggerExtensions.LogMessage(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogMessage(IRunnerLogger, StackFrameInfo, string, params object?[]) IRunnerLoggerExtensions.LogRaw(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogWarning(IRunnerLogger, string) IRunnerLoggerExtensions.LogWarning(IRunnerLogger, string, params object?[]) IRunnerLoggerExtensions.LogWarning(IRunnerLogger, StackFrameInfo, string, params object?[]) Properties LockObject Gets a lock object that can be used to ensure that multiple calls to log messages will always be grouped together. object LockObject { get; } Property Value object Methods LogError(StackFrameInfo, string) Logs an error message with stack frame. void LogError(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged LogImportantMessage(StackFrameInfo, string) Logs a high-priority message with stack frame. void LogImportantMessage(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged LogMessage(StackFrameInfo, string) Logs a normal-priority message with stack frame. void LogMessage(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged LogRaw(string) Logs a messages with as little processing as possible. For example, the console runner will not attempt to set the color of the text that's being logged. This is most useful when attempting to render text lines that will be processed, like for TeamCity. void LogRaw(string message) Parameters message string The message to be logged. LogWarning(StackFrameInfo, string) Logs a warning message with stack frame. void LogWarning(StackFrameInfo stackFrame, string message) Parameters stackFrame StackFrameInfo The stack frame information message string The message to be logged WaitForAcknowledgment() Waits for an acknowledgement of a message. void WaitForAcknowledgment() Remarks This is primarily for use by JsonReporterMessageHandler so that it can wait for acknowledgment of messages when running in synchronous mode by the in-process runner. Other runner loggers running outside this context (and/or when not in synchronous automated mode) should NOOP for this."
  },
  "v3/2.0.0/Xunit.Runner.Common.IRunnerLoggerExtensions.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.IRunnerLoggerExtensions.html",
    "title": "Class IRunnerLoggerExtensions | xunit",
    "summary": "Class IRunnerLoggerExtensions Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Extensions methods for IRunnerLogger. public static class IRunnerLoggerExtensions Inheritance object IRunnerLoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LogError(IRunnerLogger, string) Logs an error message. public static void LogError(this IRunnerLogger logger, string message) Parameters logger IRunnerLogger The logger message string The message to be logged LogError(IRunnerLogger, string, params object?[]) Logs a formatted error message. public static void LogError(this IRunnerLogger logger, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger messageFormat string The format of the message to be logged args object[] The format arguments LogError(IRunnerLogger, StackFrameInfo, string, params object?[]) Logs a formatted error message with stack frame. public static void LogError(this IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger stackFrame StackFrameInfo The stack frame information messageFormat string The format of the message to be logged args object[] The format arguments LogImportantMessage(IRunnerLogger, string) Logs a high-priority message. public static void LogImportantMessage(this IRunnerLogger logger, string message) Parameters logger IRunnerLogger The logger message string The message to be logged LogImportantMessage(IRunnerLogger, string, params object?[]) Logs a high-priority formatted message. public static void LogImportantMessage(this IRunnerLogger logger, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger messageFormat string The format of the message to be logged args object[] The format arguments LogImportantMessage(IRunnerLogger, StackFrameInfo, string, params object?[]) Logs a high-priority formatted message with stack frame. public static void LogImportantMessage(this IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger stackFrame StackFrameInfo The stack frame information messageFormat string The format of the message to be logged args object[] The format arguments LogMessage(IRunnerLogger, string) Logs a normal-priority message. public static void LogMessage(this IRunnerLogger logger, string message) Parameters logger IRunnerLogger The logger message string The message to be logged LogMessage(IRunnerLogger, string, params object?[]) Logs a normal-priority formatted message. public static void LogMessage(this IRunnerLogger logger, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger messageFormat string The format of the message to be logged args object[] The format arguments LogMessage(IRunnerLogger, StackFrameInfo, string, params object?[]) Logs a normal-priority formatted message with stack frame. public static void LogMessage(this IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger stackFrame StackFrameInfo The stack frame information messageFormat string The format of the message to be logged args object[] The format arguments LogRaw(IRunnerLogger, string, params object?[]) Logs a messages with as little processing as possible. For example, the console runner will not attempt to set the color of the text that's being logged. This is most useful when attempting to render text lines that will be processed, like for TeamCity. public static void LogRaw(this IRunnerLogger logger, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger messageFormat string The format of the message to be logged args object[] The format arguments LogWarning(IRunnerLogger, string) Logs a warning message. public static void LogWarning(this IRunnerLogger logger, string message) Parameters logger IRunnerLogger The logger message string The message to be logged LogWarning(IRunnerLogger, string, params object?[]) Logs a formatted warning message. public static void LogWarning(this IRunnerLogger logger, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger messageFormat string The format of the message to be logged args object[] The format arguments LogWarning(IRunnerLogger, StackFrameInfo, string, params object?[]) Logs a formatted warning message with stack frame. public static void LogWarning(this IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, params object?[] args) Parameters logger IRunnerLogger The logger stackFrame StackFrameInfo The stack frame information messageFormat string The format of the message to be logged args object[] The format arguments"
  },
  "v3/2.0.0/Xunit.Runner.Common.IRunnerReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.IRunnerReporter.html",
    "title": "Interface IRunnerReporter | xunit",
    "summary": "Interface IRunnerReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll This interface represents a reporter which is invoked by a test runner during test execution. The report can be explicitly invoked by a command line switch or implicitly invoked by being environmentally enabled (for example, a reporter that emits messages for TeamCity). public interface IRunnerReporter Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). string? RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.IRunnerReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.IRunnerReporterMessageHandler.html",
    "title": "Interface IRunnerReporterMessageHandler | xunit",
    "summary": "Interface IRunnerReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Indicates a message sink that's designed for use with runner reporters. In particular, this allows runner reporters to implement IAsyncDisposable and forces runners to dispose of the message handler that's returned to them. public interface IRunnerReporterMessageHandler : IMessageSink, IAsyncDisposable Inherited Members IMessageSink.OnMessage(IMessageSinkMessage) IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Runner.Common.ISourceInformationProvider.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ISourceInformationProvider.html",
    "title": "Interface ISourceInformationProvider | xunit",
    "summary": "Interface ISourceInformationProvider Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents a provider which gives source line information for a test case after discovery has completed. This is typically provided by a third party runner (for example, the VSTest plugin provides this via DiaSession from Visual Studio). It's used to supplement test case metadata when the discovery process itself cannot provide source file and line information. public interface ISourceInformationProvider : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods GetSourceInformation(string?, string?) Returns the source information for a test case. SourceInformation GetSourceInformation(string? testClassName, string? testMethodName) Parameters testClassName string The test class name, if known testMethodName string The test method name, if known Returns SourceInformation The source information, with null string and int values when the information is not available. Note: return value should never be null, only the interior data values inside."
  },
  "v3/2.0.0/Xunit.Runner.Common.ITestCaseFilter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ITestCaseFilter.html",
    "title": "Interface ITestCaseFilter | xunit",
    "summary": "Interface ITestCaseFilter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents a filter run against a test case (and the associated assembly it resides in). public interface ITestCaseFilter Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Filter(string, ITestCaseMetadata) Determines whether the given testCase passes the filter. bool Filter(string assemblyName, ITestCaseMetadata testCase) Parameters assemblyName string The simple assembly name without file extension testCase ITestCaseMetadata The test case to be checked against the filter Returns bool"
  },
  "v3/2.0.0/Xunit.Runner.Common.InternalDiagnosticMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.InternalDiagnosticMessage.html",
    "title": "Class InternalDiagnosticMessage | xunit",
    "summary": "Class InternalDiagnosticMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IInternalDiagnosticMessage. [JsonTypeID(\"internal-diagnostic\")] public sealed class InternalDiagnosticMessage : MessageSinkMessage, IJsonDeserializable, IInternalDiagnosticMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage InternalDiagnosticMessage Implements IJsonDeserializable IInternalDiagnosticMessage IMessageSinkMessage IJsonSerializable Inherited Members MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Constructors InternalDiagnosticMessage() Creates a new instance of the InternalDiagnosticMessage class. public InternalDiagnosticMessage() InternalDiagnosticMessage(string) Creates a new instance of the InternalDiagnosticMessage class with the provided message. public InternalDiagnosticMessage(string message) Parameters message string The diagnostic message InternalDiagnosticMessage(string, object?) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and single argument. public InternalDiagnosticMessage(string messageFormat, object? arg0) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. InternalDiagnosticMessage(string, object?, object?) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and two arguments. public InternalDiagnosticMessage(string messageFormat, object? arg0, object? arg1) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. InternalDiagnosticMessage(string, object?, object?, object?) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and three arguments. public InternalDiagnosticMessage(string messageFormat, object? arg0, object? arg1, object? arg2) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. arg2 object The value to replace {2} in the format string. InternalDiagnosticMessage(string, params object?[]) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and multiple arguments. public InternalDiagnosticMessage(string messageFormat, params object?[] args) Parameters messageFormat string The message format string args object[] An object array that contains zero or more objects to format. Properties Message Gets the internal diagnostic message. public required string Message { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.JsonReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.JsonReporter.html",
    "title": "Class JsonReporter | xunit",
    "summary": "Class JsonReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that reports results as individual JSON objects on the console. public class JsonReporter : IRunnerReporter Inheritance object JsonReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string? RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.JsonReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.JsonReporterMessageHandler.html",
    "title": "Class JsonReporterMessageHandler | xunit",
    "summary": "Class JsonReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports JsonReporter. public class JsonReporterMessageHandler : IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object JsonReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Initializes a new instance of the JsonReporterMessageHandler class. Constructors JsonReporterMessageHandler(IRunnerLogger) An implementation of IRunnerReporterMessageHandler that supports JsonReporter. public JsonReporterMessageHandler(IRunnerLogger logger) Parameters logger IRunnerLogger The logger used to report messages Remarks Initializes a new instance of the JsonReporterMessageHandler class. Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.Common.ListFormat.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ListFormat.html",
    "title": "Enum ListFormat | xunit",
    "summary": "Enum ListFormat Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Designates the format that the test list should take. public enum ListFormat Fields Json = 0 Lists the information in JSON (machine readable) format Text = 1 Lists the information in plain text (human readable) format"
  },
  "v3/2.0.0/Xunit.Runner.Common.ListOption.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ListOption.html",
    "title": "Enum ListOption | xunit",
    "summary": "Enum ListOption Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Indicates the kind of list a runner should generate, rather than running tests. public enum ListOption Fields Classes = 1 Lists all the classes in the assembly which contain tests. Discovery = 2 Lists the test cases as discovery objects (only valid for the in-process runner). Full = 3 Lists full metadata about the test discovery. Methods = 4 Lists all the methods in the assembly which contain a test. Tests = 5 Lists all the tests (as display name) in the assembly. Traits = 6 Lists all the traits that are generated from the assembly."
  },
  "v3/2.0.0/Xunit.Runner.Common.LongRunningTestsSummary.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.LongRunningTestsSummary.html",
    "title": "Class LongRunningTestsSummary | xunit",
    "summary": "Class LongRunningTestsSummary Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents information about long running tests from ExecutionSink. public class LongRunningTestsSummary Inheritance object LongRunningTestsSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors LongRunningTestsSummary(TimeSpan, IDictionary<ITestCaseMetadata, TimeSpan>) Represents information about long running tests from ExecutionSink. public LongRunningTestsSummary(TimeSpan configuredLongRunningTime, IDictionary<ITestCaseMetadata, TimeSpan> testCases) Parameters configuredLongRunningTime TimeSpan Configured notification time testCases IDictionary<ITestCaseMetadata, TimeSpan> Tests Properties ConfiguredLongRunningTime public TimeSpan ConfiguredLongRunningTime { get; } Property Value TimeSpan TestCases public IDictionary<ITestCaseMetadata, TimeSpan> TestCases { get; } Property Value IDictionary<ITestCaseMetadata, TimeSpan>"
  },
  "v3/2.0.0/Xunit.Runner.Common.MessageHandler-1.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.MessageHandler-1.html",
    "title": "Delegate MessageHandler<TMessage> | xunit",
    "summary": "Delegate MessageHandler<TMessage> Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents a handler for a message, which includes the ability to signal that tests should stop running. public delegate void MessageHandler<TMessage>(MessageHandlerArgs<TMessage> args) where TMessage : IMessageSinkMessage Parameters args MessageHandlerArgs<TMessage> The message. Type Parameters TMessage The type of the message to be handled. Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Runner.Common.MessageHandlerArgs-1.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.MessageHandlerArgs-1.html",
    "title": "Class MessageHandlerArgs<TMessage> | xunit",
    "summary": "Class MessageHandlerArgs<TMessage> Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Wraps a message with the ability to cancel execution. public class MessageHandlerArgs<TMessage> : MessageHandlerArgs where TMessage : IMessageSinkMessage Type Parameters TMessage The type of the message to be handled. Inheritance object MessageHandlerArgs MessageHandlerArgs<TMessage> Inherited Members MessageHandlerArgs.IsStopped MessageHandlerArgs.Stop() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MessageHandlerArgs(TMessage) Wraps a message with the ability to cancel execution. public MessageHandlerArgs(TMessage message) Parameters message TMessage The message to be handled. Properties Message Gets the message. public TMessage Message { get; } Property Value TMessage"
  },
  "v3/2.0.0/Xunit.Runner.Common.MessageHandlerArgs.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.MessageHandlerArgs.html",
    "title": "Class MessageHandlerArgs | xunit",
    "summary": "Class MessageHandlerArgs Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Allows cancellation during message handling. public abstract class MessageHandlerArgs Inheritance object MessageHandlerArgs Derived MessageHandlerArgs<TMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties IsStopped Gets a value to indicate whether stop has been requested. public bool IsStopped { get; } Property Value bool Methods Stop() Call to indicate that execution should stop. public void Stop()"
  },
  "v3/2.0.0/Xunit.Runner.Common.MessageMetadataCache.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.MessageMetadataCache.html",
    "title": "Class MessageMetadataCache | xunit",
    "summary": "Class MessageMetadataCache Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Caches message metadata for xUnit.net v3 messages. The metadata which is cached depends on the message that is passed (for example, looking up with an ITestAssemblyMessage will return an IAssemblyMetadata). Storage methods require the \"Starting\" versions of messages (as these are the ones which contain the metadata), and removal methods require the \"Finished\" versions of messages. public class MessageMetadataCache Inheritance object MessageMetadataCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Set(ITestAssemblyStarting) Sets IAssemblyMetadata into the cache. public void Set(ITestAssemblyStarting message) Parameters message ITestAssemblyStarting The message that contains the metadata. Set(ITestCaseStarting) Sets ITestCaseMetadata into the cache. public void Set(ITestCaseStarting message) Parameters message ITestCaseStarting The message that contains the metadata. Set(ITestClassStarting) Sets ITestClassMetadata into the cache. public void Set(ITestClassStarting message) Parameters message ITestClassStarting The message that contains the metadata. Set(ITestCollectionStarting) Sets ITestCollectionMetadata into the cache. public void Set(ITestCollectionStarting message) Parameters message ITestCollectionStarting The message that contains the metadata. Set(ITestMethodStarting) Sets ITestMethodMetadata into the cache. public void Set(ITestMethodStarting message) Parameters message ITestMethodStarting The message that contains the metadata. Set(ITestStarting) Sets ITestMetadata into the cache. public void Set(ITestStarting message) Parameters message ITestStarting The message that contains the metadata. TryGetAssemblyMetadata(string, bool) Attempts to retrieve IAssemblyMetadata from the cache (and optionally remove it). public IAssemblyMetadata? TryGetAssemblyMetadata(string assemblyUniqueID, bool remove = false) Parameters assemblyUniqueID string The unique ID of the assembly to retrieve. remove bool Set to true to remove the metadata after retrieval. Returns IAssemblyMetadata The cached metadata, if present; or null if there isn't any. TryGetAssemblyMetadata(ITestAssemblyMessage) Attempts to retrieve IAssemblyMetadata from the cache. public IAssemblyMetadata? TryGetAssemblyMetadata(ITestAssemblyMessage message) Parameters message ITestAssemblyMessage The message that indicates which metadata to retrieve. Returns IAssemblyMetadata The cached metadata, if present; or null if there isn't any. TryGetClassMetadata(string, bool) Attempts to retrieve ITestClassMetadata from the cache (and optionally remove it). public ITestClassMetadata? TryGetClassMetadata(string testClassUniqueID, bool remove = false) Parameters testClassUniqueID string The unique ID of the test class to retrieve. remove bool Set to true to remove the metadata after retrieval. Returns ITestClassMetadata The cached metadata, if present; or null if there isn't any. TryGetClassMetadata(ITestClassMessage) Attempts to retrieve ITestClassMetadata from the cache. public ITestClassMetadata? TryGetClassMetadata(ITestClassMessage message) Parameters message ITestClassMessage The message that indicates which metadata to retrieve. Returns ITestClassMetadata The cached metadata, if present; or null if there isn't any. TryGetCollectionMetadata(string, bool) Attempts to retrieve ITestCollectionMetadata from the cache (and optionally remove it). public ITestCollectionMetadata? TryGetCollectionMetadata(string testCollectionUniqueID, bool remove = false) Parameters testCollectionUniqueID string The unique ID of the test collection to retrieve. remove bool Set to true to remove the metadata after retrieval. Returns ITestCollectionMetadata The cached metadata, if present; or null if there isn't any. TryGetCollectionMetadata(ITestCollectionMessage) Attempts to retrieve ITestCollectionMetadata from the cache. public ITestCollectionMetadata? TryGetCollectionMetadata(ITestCollectionMessage message) Parameters message ITestCollectionMessage The message that indicates which metadata to retrieve. Returns ITestCollectionMetadata The cached metadata, if present; or null if there isn't any. TryGetMethodMetadata(string, bool) Attempts to retrieve ITestMethodMetadata from the cache (and optionally remove it). public ITestMethodMetadata? TryGetMethodMetadata(string testMethodUniqueID, bool remove = false) Parameters testMethodUniqueID string The unique ID of the test method to retrieve. remove bool Set to true to remove the metadata after retrieval. Returns ITestMethodMetadata The cached metadata, if present; or null if there isn't any. TryGetMethodMetadata(ITestMethodMessage) Attempts to retrieve ITestMethodMetadata from the cache. public ITestMethodMetadata? TryGetMethodMetadata(ITestMethodMessage message) Parameters message ITestMethodMessage The message that indicates which metadata to retrieve. Returns ITestMethodMetadata The cached metadata, if present; or null if there isn't any. TryGetTestCaseMetadata(string, bool) Attempts to retrieve ITestCaseMetadata from the cache (and optionally remove it). public ITestCaseMetadata? TryGetTestCaseMetadata(string testCaseUniqueID, bool remove = false) Parameters testCaseUniqueID string The unique ID of the test case to retrieve. remove bool Set to true to remove the metadata after retrieval. Returns ITestCaseMetadata The cached metadata, if present; or null if there isn't any. TryGetTestCaseMetadata(ITestCaseMessage) Attempts to retrieve ITestCaseMetadata from the cache. public ITestCaseMetadata? TryGetTestCaseMetadata(ITestCaseMessage message) Parameters message ITestCaseMessage The message that indicates which metadata to retrieve. Returns ITestCaseMetadata The cached metadata, if present; or null if there isn't any. TryGetTestMetadata(string, bool) Attempts to retrieve ITestMetadata from the cache (and optionally remove it). public ITestMetadata? TryGetTestMetadata(string testUniqueID, bool remove = false) Parameters testUniqueID string The unique ID of the test to retrieve. remove bool Set to true to remove the metadata after retrieval. Returns ITestMetadata The cached metadata, if present; or null if there isn't any. TryGetTestMetadata(ITestMessage) Attempts to retrieve ITestMetadata from the cache. public ITestMetadata? TryGetTestMetadata(ITestMessage message) Parameters message ITestMessage The message that indicates which metadata to retrieve. Returns ITestMetadata The cached metadata, if present; or null if there isn't any. TryRemove(ITestAssemblyFinished) Attempts to retrieve IAssemblyMetadata from the cache, and if present, removes the metadata from the cache. public IAssemblyMetadata? TryRemove(ITestAssemblyFinished message) Parameters message ITestAssemblyFinished The message that indicates which metadata to retrieve. Returns IAssemblyMetadata The cached metadata, if present; or null if there isn't any. TryRemove(ITestCaseFinished) Attempts to retrieve ITestCaseMetadata from the cache, and if present, removes the metadata from the cache. public ITestCaseMetadata? TryRemove(ITestCaseFinished message) Parameters message ITestCaseFinished The message that indicates which metadata to retrieve. Returns ITestCaseMetadata The cached metadata, if present; or null if there isn't any. TryRemove(ITestClassFinished) Attempts to retrieve ITestClassMetadata from the cache, and if present, removes the metadata from the cache. public ITestClassMetadata? TryRemove(ITestClassFinished message) Parameters message ITestClassFinished The message that indicates which metadata to retrieve. Returns ITestClassMetadata The cached metadata, if present; or null if there isn't any. TryRemove(ITestCollectionFinished) Attempts to retrieve ITestCollectionMetadata from the cache, and if present, removes the metadata from the cache. public ITestCollectionMetadata? TryRemove(ITestCollectionFinished message) Parameters message ITestCollectionFinished The message that indicates which metadata to retrieve. Returns ITestCollectionMetadata The cached metadata, if present; or null if there isn't any. TryRemove(ITestFinished) Attempts to retrieve ITestMetadata from the cache, and if present, removes the metadata from the cache. public ITestMetadata? TryRemove(ITestFinished message) Parameters message ITestFinished The message that indicates which metadata to retrieve. Returns ITestMetadata The cached metadata, if present; or null if there isn't any. TryRemove(ITestMethodFinished) Attempts to retrieve ITestMethodMetadata from the cache, and if present, removes the metadata from the cache. public ITestMethodMetadata? TryRemove(ITestMethodFinished message) Parameters message ITestMethodFinished The message that indicates which metadata to retrieve. Returns ITestMethodMetadata The cached metadata, if present; or null if there isn't any."
  },
  "v3/2.0.0/Xunit.Runner.Common.MessageSinkMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.MessageSinkMessage.html",
    "title": "Class MessageSinkMessage | xunit",
    "summary": "Class MessageSinkMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of IMessageSinkMessage, with serialization and deserialization support. public abstract class MessageSinkMessage : IJsonDeserializable, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage Implements IJsonDeserializable IMessageSinkMessage IJsonSerializable Derived DiagnosticMessage ErrorMessage InternalDiagnosticMessage TestAssemblyMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Remarks Because of deserialization, all concrete message sink message types must have a parameterless public constructor that will be used to create the message for deserialization purposes, and must be decorated with JsonTypeIDAttribute to set a unique type ID for deserialization purposes. Constructors MessageSinkMessage() Initializes a new instance of the see MessageSinkMessage class. protected MessageSinkMessage() Fields EmptyTraits Empty traits, to be used to initialize traits values in messages. protected static IReadOnlyDictionary<string, IReadOnlyCollection<string>> EmptyTraits Field Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UnsetStringPropertyValue Gets the string value that message properties will return, when a value was not provided during deserialization. public const string UnsetStringPropertyValue = \"<unset>\" Field Value string Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected abstract void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromJson(IReadOnlyDictionary<string, object?>) Deserializes the object's values from the provided JSON. public void FromJson(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the deserialized JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected abstract void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToDisplayString(string?[]?) Converts a string array into a display value, for use in an ToString() overload. protected static string ToDisplayString(string?[]? array) Parameters array string[] Returns string ToDisplayString<T>(T[]?) Converts am array into a display value, for use in an ToString() overload. protected static string ToDisplayString<T>(T[]? array) Parameters array T[] Returns string Type Parameters T ToJson() Creates a JSON serialized version of this message. public string ToJson() Returns string Exceptions InvalidOperationException Thrown if the message class does not have a JsonTypeIDAttribute. UnsetPropertiesException Thrown when one or more properties are missing values."
  },
  "v3/2.0.0/Xunit.Runner.Common.MessageSinkMessageDeserializer.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.MessageSinkMessageDeserializer.html",
    "title": "Class MessageSinkMessageDeserializer | xunit",
    "summary": "Class MessageSinkMessageDeserializer Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll A class which understands how to deserialize IMessageSinkMessage instances that are decorated with JsonTypeIDAttribute. The built-in messages are registered by default, and additional messages can be registered via RegisterMessageSinkMessageType(Type). public static class MessageSinkMessageDeserializer Inheritance object MessageSinkMessageDeserializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(string, IMessageSink?) Parses a previously serialized IMessageSinkMessage-derived object. public static IMessageSinkMessage? Deserialize(string serialization, IMessageSink? diagnosticMessageSink) Parameters serialization string The serialized value diagnosticMessageSink IMessageSink The mesage sink to report Returns IMessageSinkMessage The deserialized object RegisterMessageSinkMessageType(Type) Registers an implementation of IMessageSinkMessage and IJsonDeserializable, decorated with JsonTypeIDAttribute so that it can be deserialized by the runner pipeline. public static void RegisterMessageSinkMessageType(Type type) Parameters type Type The message type to register"
  },
  "v3/2.0.0/Xunit.Runner.Common.NullSourceInformationProvider.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.NullSourceInformationProvider.html",
    "title": "Class NullSourceInformationProvider | xunit",
    "summary": "Class NullSourceInformationProvider Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll A null implementation of ISourceInformationProvider which always returns empty source information. Get the singleton via Instance. public sealed class NullSourceInformationProvider : ISourceInformationProvider, IAsyncDisposable Inheritance object NullSourceInformationProvider Implements ISourceInformationProvider IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Instance Gets the singleton instance of the NullSourceInformationProvider. public static NullSourceInformationProvider Instance { get; } Property Value NullSourceInformationProvider Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask GetSourceInformation(string?, string?) Returns the source information for a test case. public SourceInformation GetSourceInformation(string? testClassName, string? testMethodName) Parameters testClassName string The test class name, if known testMethodName string The test method name, if known Returns SourceInformation The source information, with null string and int values when the information is not available. Note: return value should never be null, only the interior data values inside."
  },
  "v3/2.0.0/Xunit.Runner.Common.ParallelismOption.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.ParallelismOption.html",
    "title": "Enum ParallelismOption | xunit",
    "summary": "Enum ParallelismOption Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents available parallelism options [Flags] public enum ParallelismOption Fields all = assemblies | collections Enable maximum parallelization assemblies = 1 Run tests in different assemblies in parallel collections = 2 Run tests in different test collections in parallel none = 0 Do not parallelize any tests."
  },
  "v3/2.0.0/Xunit.Runner.Common.QueryFilterParser.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.QueryFilterParser.html",
    "title": "Class QueryFilterParser | xunit",
    "summary": "Class QueryFilterParser Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll This class is used to parse a graphy query. public static class QueryFilterParser Inheritance object QueryFilterParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See https://xunit.net/docs/query-filter-language for the query filter language description. Methods Parse(string) Parse and return a filter that represents the query. public static ITestCaseFilter Parse(string query) Parameters query string Returns ITestCaseFilter"
  },
  "v3/2.0.0/Xunit.Runner.Common.QuietReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.QuietReporter.html",
    "title": "Class QuietReporter | xunit",
    "summary": "Class QuietReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that emits only error or warning messages. public class QuietReporter : IRunnerReporter Inheritance object QuietReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.QuietReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.QuietReporterMessageHandler.html",
    "title": "Class QuietReporterMessageHandler | xunit",
    "summary": "Class QuietReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports QuietReporter. public class QuietReporterMessageHandler : DefaultRunnerReporterMessageHandler, IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink TestMessageSink DefaultRunnerReporterMessageHandler QuietReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members DefaultRunnerReporterMessageHandler.EnvVar_HidePassingOutput DefaultRunnerReporterMessageHandler.Logger DefaultRunnerReporterMessageHandler.MetadataCache DefaultRunnerReporterMessageHandler.Escape(string) DefaultRunnerReporterMessageHandler.EscapeMultiLineIndent(string, string) DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(XunitProjectAssembly) DefaultRunnerReporterMessageHandler.GetExecutionOptions(string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string, params object[]) DefaultRunnerReporterMessageHandler.LogStackTrace(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogOutput(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogWarnings(StackFrameInfo, string[]) DefaultRunnerReporterMessageHandler.HandleErrorMessage(MessageHandlerArgs<IErrorMessage>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting>) DefaultRunnerReporterMessageHandler.HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished>) DefaultRunnerReporterMessageHandler.HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting>) DefaultRunnerReporterMessageHandler.HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished>) DefaultRunnerReporterMessageHandler.HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting>) DefaultRunnerReporterMessageHandler.HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished>) DefaultRunnerReporterMessageHandler.HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting>) DefaultRunnerReporterMessageHandler.HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries>) DefaultRunnerReporterMessageHandler.HandleTestFailed(MessageHandlerArgs<ITestFailed>) DefaultRunnerReporterMessageHandler.HandleTestFinished(MessageHandlerArgs<ITestFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting>) DefaultRunnerReporterMessageHandler.HandleTestOutput(MessageHandlerArgs<ITestOutput>) DefaultRunnerReporterMessageHandler.HandleTestPassed(MessageHandlerArgs<ITestPassed>) DefaultRunnerReporterMessageHandler.HandleTestSkipped(MessageHandlerArgs<ITestSkipped>) DefaultRunnerReporterMessageHandler.HandleTestStarting(MessageHandlerArgs<ITestStarting>) DefaultRunnerReporterMessageHandler.WriteDefaultSummary(IRunnerLogger, TestExecutionSummaries) TestMessageSink.Diagnostics TestMessageSink.Discovery TestMessageSink.Execution TestMessageSink.Runner AggregateMessageSink.AggregatedSinks AggregateMessageSink.DisposeAsync() AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors QuietReporterMessageHandler(IRunnerLogger) Initializes a new instance of the QuietReporterMessageHandler class. public QuietReporterMessageHandler(IRunnerLogger logger) Parameters logger IRunnerLogger The logger used to report messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.RegisterRunnerReporterAttribute.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.RegisterRunnerReporterAttribute.html",
    "title": "Class RegisterRunnerReporterAttribute | xunit",
    "summary": "Class RegisterRunnerReporterAttribute Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Used to decorate xUnit.net test assemblies to indicate the availability of a custom runner reporter. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)] public sealed class RegisterRunnerReporterAttribute : Attribute, IRegisterRunnerReporterAttribute Inheritance object Attribute RegisterRunnerReporterAttribute Implements IRegisterRunnerReporterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors RegisterRunnerReporterAttribute(Type) Used to decorate xUnit.net test assemblies to indicate the availability of a custom runner reporter. public RegisterRunnerReporterAttribute(Type runnerReporterType) Parameters runnerReporterType Type The type of the runner reporter to register. The type must implement IRunnerReporter. Properties RunnerReporterType Gets the type of the runner reporter to be registered. public Type RunnerReporterType { get; } Property Value Type Remarks The runner reporter type must implement IRunnerReporter."
  },
  "v3/2.0.0/Xunit.Runner.Common.RegisteredRunnerReporters.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.RegisteredRunnerReporters.html",
    "title": "Class RegisteredRunnerReporters | xunit",
    "summary": "Class RegisteredRunnerReporters Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Utility class for enumerating the runner reporters registered for the given assembly. public static class RegisteredRunnerReporters Inheritance object RegisteredRunnerReporters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get(Assembly, out List<string>) Gets the list of rrunner reporters registered for the given assembly. public static List<IRunnerReporter> Get(Assembly assembly, out List<string> messages) Parameters assembly Assembly The assembly messages List<string> Messages that were generated during discovery Returns List<IRunnerReporter> List of available reporters"
  },
  "v3/2.0.0/Xunit.Runner.Common.RunnerEventSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.RunnerEventSink.html",
    "title": "Class RunnerEventSink | xunit",
    "summary": "Class RunnerEventSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Class that maps test runner messages to events. public class RunnerEventSink : IMessageSink Inheritance object RunnerEventSink Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. Events TestAssemblyDiscoveryFinishedEvent Occurs when the runner is starting discovery for a given test assembly. public event MessageHandler<TestAssemblyDiscoveryFinished>? TestAssemblyDiscoveryFinishedEvent Event Type MessageHandler<TestAssemblyDiscoveryFinished> TestAssemblyDiscoveryStartingEvent Occurs when the runner has finished discovery for a given test assembly. public event MessageHandler<TestAssemblyDiscoveryStarting>? TestAssemblyDiscoveryStartingEvent Event Type MessageHandler<TestAssemblyDiscoveryStarting> TestAssemblyExecutionFinishedEvent Occurs when the runner has finished executing the given test assembly. public event MessageHandler<TestAssemblyExecutionFinished>? TestAssemblyExecutionFinishedEvent Event Type MessageHandler<TestAssemblyExecutionFinished> TestAssemblyExecutionStartingEvent Occurs when the runner is starting to execution the given test assembly. public event MessageHandler<TestAssemblyExecutionStarting>? TestAssemblyExecutionStartingEvent Event Type MessageHandler<TestAssemblyExecutionStarting> TestExecutionSummariesEvent Occurs when the runner has finished executing all test assemblies. public event MessageHandler<TestExecutionSummaries>? TestExecutionSummariesEvent Event Type MessageHandler<TestExecutionSummaries>"
  },
  "v3/2.0.0/Xunit.Runner.Common.SilentReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.SilentReporter.html",
    "title": "Class SilentReporter | xunit",
    "summary": "Class SilentReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that does not report any messages. Typically only used in context with the VSTest adapter, to prevent double reporting of messages public class SilentReporter : IRunnerReporter Inheritance object SilentReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.SilentReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.SilentReporterMessageHandler.html",
    "title": "Class SilentReporterMessageHandler | xunit",
    "summary": "Class SilentReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports SilentReporter. public sealed class SilentReporterMessageHandler : IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object SilentReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.Common.SourceInformation.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.SourceInformation.html",
    "title": "Struct SourceInformation | xunit",
    "summary": "Struct SourceInformation Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Source information returned by ISourceInformationProvider. public readonly struct SourceInformation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SourceInformation(string?, int?) Source information returned by ISourceInformationProvider. public SourceInformation(string? sourceFile, int? sourceLine) Parameters sourceFile string The source file, if known sourceLine int? The line number, if known Properties SourceFile Gets the source file, if known; null, otherwise public string? SourceFile { get; } Property Value string SourceLine Gets the source line number, if known; null, otherwise public int? SourceLine { get; } Property Value int?"
  },
  "v3/2.0.0/Xunit.Runner.Common.StackFrameInfo.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.StackFrameInfo.html",
    "title": "Struct StackFrameInfo | xunit",
    "summary": "Struct StackFrameInfo Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents the top of a stack frame, typically taken from an exception or failure information. public readonly struct StackFrameInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StackFrameInfo(string?, int) Represents the top of a stack frame, typically taken from an exception or failure information. public StackFrameInfo(string? fileName, int lineNumber) Parameters fileName string The file name from the stack frame lineNumber int The line number from the stack frame Fields None Get a default (unknown) stack frame info. public static readonly StackFrameInfo None Field Value StackFrameInfo Properties FileName Gets the filename of the stack frame. May be null if the stack frame is not known. public string? FileName { get; } Property Value string IsEmpty Returns true if this is an empty stack frame (e.g., None). public bool IsEmpty { get; } Property Value bool LineNumber Gets the line number of the stack frame. May be 0 if the stack frame is not known. public int LineNumber { get; } Property Value int Methods FromErrorMetadata(IErrorMetadata?) Creates a stack frame info from error metadata. public static StackFrameInfo FromErrorMetadata(IErrorMetadata? errorMetadata) Parameters errorMetadata IErrorMetadata The error to inspect Returns StackFrameInfo The stack frame info"
  },
  "v3/2.0.0/Xunit.Runner.Common.StackFrameTransformer.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.StackFrameTransformer.html",
    "title": "Class StackFrameTransformer | xunit",
    "summary": "Class StackFrameTransformer Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Transforms stack frames and stack traces into compiler-like output so they can be double-clicked in Visual Studio. public static class StackFrameTransformer Inheritance object StackFrameTransformer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TransformFrame(string?, string?) Transforms an individual stack frame. public static string? TransformFrame(string? stackFrame, string? defaultDirectory) Parameters stackFrame string The stack frame to transform defaultDirectory string The default directory used for computing relative paths Returns string The transformed stack frame TransformStack(string?, string?) Transforms a stack. public static string? TransformStack(string? stack, string? defaultDirectory) Parameters stack string The stack to transform defaultDirectory string The default directory used for computing relative paths Returns string The transformed stack"
  },
  "v3/2.0.0/Xunit.Runner.Common.TargetFrameworkIdentifier.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TargetFrameworkIdentifier.html",
    "title": "Enum TargetFrameworkIdentifier | xunit",
    "summary": "Enum TargetFrameworkIdentifier Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents the target framework identifier that an assembly is targeting public enum TargetFrameworkIdentifier Fields DotNetCore = 2 The target framework is .NET or .NET Core. DotNetFramework = 1 The target framework is .NET Framework. UnknownTargetFramework = 0 The target framework is unknown."
  },
  "v3/2.0.0/Xunit.Runner.Common.TeamCityReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TeamCityReporter.html",
    "title": "Class TeamCityReporter | xunit",
    "summary": "Class TeamCityReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that reports results to TeamCity. This is auto-enabled by the presence of the \"TEAMCITY_PROJECT_NAME\" environment variable. public class TeamCityReporter : IRunnerReporter Inheritance object TeamCityReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.TeamCityReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TeamCityReporterMessageHandler.html",
    "title": "Class TeamCityReporterMessageHandler | xunit",
    "summary": "Class TeamCityReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports TeamCityReporter. public class TeamCityReporterMessageHandler : DefaultRunnerReporterMessageHandler, IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink TestMessageSink DefaultRunnerReporterMessageHandler TeamCityReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members DefaultRunnerReporterMessageHandler.EnvVar_HidePassingOutput DefaultRunnerReporterMessageHandler.Logger DefaultRunnerReporterMessageHandler.MetadataCache DefaultRunnerReporterMessageHandler.Escape(string) DefaultRunnerReporterMessageHandler.EscapeMultiLineIndent(string, string) DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(XunitProjectAssembly) DefaultRunnerReporterMessageHandler.GetExecutionOptions(string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string, params object[]) DefaultRunnerReporterMessageHandler.LogStackTrace(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogOutput(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogWarnings(StackFrameInfo, string[]) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting>) DefaultRunnerReporterMessageHandler.HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries>) DefaultRunnerReporterMessageHandler.HandleTestOutput(MessageHandlerArgs<ITestOutput>) DefaultRunnerReporterMessageHandler.HandleTestPassed(MessageHandlerArgs<ITestPassed>) DefaultRunnerReporterMessageHandler.WriteDefaultSummary(IRunnerLogger, TestExecutionSummaries) TestMessageSink.Diagnostics TestMessageSink.Discovery TestMessageSink.Execution TestMessageSink.Runner AggregateMessageSink.AggregatedSinks AggregateMessageSink.DisposeAsync() AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TeamCityReporterMessageHandler(IRunnerLogger, string?) An implementation of IRunnerReporterMessageHandler that supports TeamCityReporter. public TeamCityReporterMessageHandler(IRunnerLogger logger, string? rootFlowId) Parameters logger IRunnerLogger The logger used to report messages rootFlowId string The root flow ID for reporting to TeamCity Properties UtcNow Gets the current date & time in UTC. protected virtual DateTimeOffset UtcNow { get; } Property Value DateTimeOffset Methods HandleErrorMessage(MessageHandlerArgs<IErrorMessage>) Handles instances of IErrorMessage. protected override void HandleErrorMessage(MessageHandlerArgs<IErrorMessage> args) Parameters args MessageHandlerArgs<IErrorMessage> HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure>) Handles instances of ITestAssemblyCleanupFailure. protected override void HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure> args) Parameters args MessageHandlerArgs<ITestAssemblyCleanupFailure> HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished>) Handles instances of ITestAssemblyFinished. protected override void HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished> args) Parameters args MessageHandlerArgs<ITestAssemblyFinished> HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting>) Handles instances of ITestAssemblyStarting. protected override void HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting> args) Parameters args MessageHandlerArgs<ITestAssemblyStarting> HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure>) Handles instances of ITestCaseCleanupFailure. protected override void HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure> args) Parameters args MessageHandlerArgs<ITestCaseCleanupFailure> HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished>) Handles instances of ITestCaseFinished. protected override void HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished> args) Parameters args MessageHandlerArgs<ITestCaseFinished> HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting>) Handles instances of ITestCaseStarting. protected override void HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting> args) Parameters args MessageHandlerArgs<ITestCaseStarting> HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure>) Handles instances of ITestClassCleanupFailure. protected override void HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure> args) Parameters args MessageHandlerArgs<ITestClassCleanupFailure> HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished>) Handles instances of ITestClassFinished. protected override void HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished> args) Parameters args MessageHandlerArgs<ITestClassFinished> HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting>) Handles instances of ITestClassStarting. protected override void HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting> args) Parameters args MessageHandlerArgs<ITestClassStarting> HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure>) Handles instances of ITestCleanupFailure. protected override void HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure> args) Parameters args MessageHandlerArgs<ITestCleanupFailure> HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure>) Handles instances of ITestCollectionCleanupFailure. protected override void HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure> args) Parameters args MessageHandlerArgs<ITestCollectionCleanupFailure> HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished>) Handles instances of ITestCollectionFinished. protected override void HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished> args) Parameters args MessageHandlerArgs<ITestCollectionFinished> HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting>) Handles instances of ITestCollectionStarting. protected override void HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting> args) Parameters args MessageHandlerArgs<ITestCollectionStarting> HandleTestFailed(MessageHandlerArgs<ITestFailed>) Handles instances of ITestFailed. protected override void HandleTestFailed(MessageHandlerArgs<ITestFailed> args) Parameters args MessageHandlerArgs<ITestFailed> HandleTestFinished(MessageHandlerArgs<ITestFinished>) Handles instances of ITestFinished. protected override void HandleTestFinished(MessageHandlerArgs<ITestFinished> args) Parameters args MessageHandlerArgs<ITestFinished> HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure>) Handles instances of ITestMethodCleanupFailure. protected override void HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure> args) Parameters args MessageHandlerArgs<ITestMethodCleanupFailure> HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished>) Handles instances of ITestMethodFinished. protected override void HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished> args) Parameters args MessageHandlerArgs<ITestMethodFinished> HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting>) Handles instances of ITestMethodStarting. protected override void HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting> args) Parameters args MessageHandlerArgs<ITestMethodStarting> HandleTestSkipped(MessageHandlerArgs<ITestSkipped>) Handles instances of ITestSkipped. protected override void HandleTestSkipped(MessageHandlerArgs<ITestSkipped> args) Parameters args MessageHandlerArgs<ITestSkipped> HandleTestStarting(MessageHandlerArgs<ITestStarting>) Handles instances of ITestStarting. protected override void HandleTestStarting(MessageHandlerArgs<ITestStarting> args) Parameters args MessageHandlerArgs<ITestStarting> TeamCityEscape(string?) Escapes a string to be sent in a TeamCity message. public static string? TeamCityEscape(string? value) Parameters value string The value to be escaped Returns string The escaped value"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyCleanupFailure.html",
    "title": "Class TestAssemblyCleanupFailure | xunit",
    "summary": "Class TestAssemblyCleanupFailure Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestAssemblyCleanupFailure. [JsonTypeID(\"test-assembly-cleanup-failure\")] public sealed class TestAssemblyCleanupFailure : TestAssemblyMessage, IJsonDeserializable, ITestAssemblyCleanupFailure, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestAssemblyCleanupFailure Implements IJsonDeserializable ITestAssemblyCleanupFailure ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string) Creates a new ITestAssemblyCleanupFailure constructed from an Exception object. public static ITestAssemblyCleanupFailure FromException(Exception ex, string assemblyUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly Returns ITestAssemblyCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyConfiguration.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyConfiguration.html",
    "title": "Class TestAssemblyConfiguration | xunit",
    "summary": "Class TestAssemblyConfiguration Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents the configuration items set in the configuration file of a test assembly. Should be read with the ConfigReader class. public class TestAssemblyConfiguration Inheritance object TestAssemblyConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AppDomain Gets or sets a flag indicating whether an app domain should be used to discover and run tests. public AppDomainSupport? AppDomain { get; set; } Property Value AppDomainSupport? AppDomainOrDefault Gets or sets a flag indicating whether an app domain should be used to discover and run tests. If the flag is not set, returns the default value (IfAvailable). public AppDomainSupport AppDomainOrDefault { get; } Property Value AppDomainSupport AssertEquivalentMaxDepth Gets a value which indicates the maximum object depth to compare when using Assert.Equivalent. public int? AssertEquivalentMaxDepth { get; set; } Property Value int? Culture Gets or sets the desired culture to run the tests under. Use null (default) to indicate that we should use the default OS culture; use an empty string to indicate that we should use the invariant culture; or use any culture value that is valid for calling CultureInfo(string). public string? Culture { get; set; } Property Value string DiagnosticMessages Gets or sets a flag indicating that the end user wants diagnostic messages from the test framework. public bool? DiagnosticMessages { get; set; } Property Value bool? DiagnosticMessagesOrDefault Gets a flag indicating that the end user wants diagnostic messages from the test framework. If the flag is not set, returns the default value (false). public bool DiagnosticMessagesOrDefault { get; } Property Value bool ExplicitOption Gets or sets a flag indicating how explicit tests should be handled. public ExplicitOption? ExplicitOption { get; set; } Property Value ExplicitOption? ExplicitOptionOrDefault Gets a flag indicating how explicit tests should be handled. If the flag isn't set, returns the default value (Off). public ExplicitOption ExplicitOptionOrDefault { get; } Property Value ExplicitOption FailSkips Gets or sets a flag indicating that skipped tests should be converted into failed tests. public bool? FailSkips { get; set; } Property Value bool? FailSkipsOrDefault Gets a flag indicating that skipped tests should be converted into failed tests. If the flag is not set, returns the default value (false). public bool FailSkipsOrDefault { get; } Property Value bool FailTestsWithWarnings Gets or sets a flag indicating that passing tests with warnings should be converted into failed tests. public bool? FailTestsWithWarnings { get; set; } Property Value bool? FailTestsWithWarningsOrDefault Gets or sets a flag indicating that passing tests with warnings should be converted into failed tests. If the flag is not set, returns the default value (false). public bool FailTestsWithWarningsOrDefault { get; } Property Value bool Filters Gets the list of filters used during test discovery. public XunitFilters Filters { get; } Property Value XunitFilters IncludeSourceInformation Gets or sets a flag indicating that discovery should include source information for the test cases. public bool? IncludeSourceInformation { get; set; } Property Value bool? IncludeSourceInformationOrDefault Gets a flag indicating that discovery should include source information for the test cases. If the flag is not set, returns the default value (false). public bool IncludeSourceInformationOrDefault { get; } Property Value bool InternalDiagnosticMessages Gets or sets a flag indicating that the end user wants internal diagnostic messages from the test framework. public bool? InternalDiagnosticMessages { get; set; } Property Value bool? InternalDiagnosticMessagesOrDefault Gets a flag indicating that the end user wants internal diagnostic messages from the test framework. If the flag is not set, returns the default value (false). public bool InternalDiagnosticMessagesOrDefault { get; } Property Value bool LongRunningTestSeconds Gets the number of seconds that a test can run before being considered \"long running\". Set to a positive value to enable the feature. public int? LongRunningTestSeconds { get; set; } Property Value int? LongRunningTestSecondsOrDefault Gets the number of seconds that a test can run before being considered \"long running\". If the value is not set, returns the default value (-1). public int LongRunningTestSecondsOrDefault { get; } Property Value int MaxParallelThreads Gets or sets the maximum number of thread to use when parallelizing this assembly. A value of null or 0 indicates that the default should be used (ProcessorCount); a value of -1 indicates that tests should run with an unlimited-sized thread pool. public int? MaxParallelThreads { get; set; } Property Value int? MaxParallelThreadsOrDefault Gets the maximum number of thread to use when parallelizing this assembly. If the value is not set, returns the default value (ProcessorCount). public int MaxParallelThreadsOrDefault { get; } Property Value int MethodDisplay Gets or sets the default display name for test methods. public TestMethodDisplay? MethodDisplay { get; set; } Property Value TestMethodDisplay? MethodDisplayOptions Gets or sets the default display options for test methods. public TestMethodDisplayOptions? MethodDisplayOptions { get; set; } Property Value TestMethodDisplayOptions? MethodDisplayOptionsOrDefault Gets the default display options for test methods. If the value is not set, returns the default value (None). public TestMethodDisplayOptions MethodDisplayOptionsOrDefault { get; } Property Value TestMethodDisplayOptions MethodDisplayOrDefault Gets the default display name for test methods. If the value is not set, returns the default value (ClassAndMethod). public TestMethodDisplay MethodDisplayOrDefault { get; } Property Value TestMethodDisplay ParallelAlgorithm Gets or sets the algorithm to be used for parallelization. public ParallelAlgorithm? ParallelAlgorithm { get; set; } Property Value ParallelAlgorithm? ParallelAlgorithmOrDefault Gets or sets the algorithm to be used for parallelization. public ParallelAlgorithm ParallelAlgorithmOrDefault { get; } Property Value ParallelAlgorithm ParallelizeAssembly Gets or sets a flag indicating that this assembly is safe to parallelize against other assemblies. public bool? ParallelizeAssembly { get; set; } Property Value bool? ParallelizeAssemblyOrDefault Gets a flag indicating that this assembly is safe to parallelize against other assemblies. If the flag is not set, returns the default value (false). public bool ParallelizeAssemblyOrDefault { get; } Property Value bool ParallelizeTestCollections Gets or sets a flag indicating that this test assembly wants to run test collections in parallel against one another. public bool? ParallelizeTestCollections { get; set; } Property Value bool? ParallelizeTestCollectionsOrDefault Gets a flag indicating that this test assembly wants to run test collections in parallel against one another. If the flag is not set, returns the default value (true). public bool ParallelizeTestCollectionsOrDefault { get; } Property Value bool PreEnumerateTheories Gets or sets a flag indicating whether theory data should be pre-enumerated during test discovery. public bool? PreEnumerateTheories { get; set; } Property Value bool? PrintMaxEnumerableLength Gets a value indicating the maximum length for printing collections. public int? PrintMaxEnumerableLength { get; set; } Property Value int? PrintMaxObjectDepth Gets a value indicating the maximum recursive depth when printing objects. public int? PrintMaxObjectDepth { get; set; } Property Value int? PrintMaxObjectMemberCount Gets a value indicating the maximum members to show when printing objects. public int? PrintMaxObjectMemberCount { get; set; } Property Value int? PrintMaxStringLength Gets a value indicating the maximum length for printing string values. public int? PrintMaxStringLength { get; set; } Property Value int? Seed Gets or sets the seed value used for randomization. Only supported for v3 or later test assemblies. public int? Seed { get; set; } Property Value int? ShadowCopy Gets or sets a flag indicating whether shadow copies should be used. public bool? ShadowCopy { get; set; } Property Value bool? ShadowCopyFolder Gets or sets the folder to be used for shadow copy files. If the value is not set, the system defaults for shadow copying are used. public string? ShadowCopyFolder { get; set; } Property Value string ShadowCopyOrDefault Gets a flag indicating whether shadow copies should be used. If the flag is not set, returns the default value (true). public bool ShadowCopyOrDefault { get; } Property Value bool ShowLiveOutput Gets or sets a flag indicating whether output from ITestOutputHelper should be shown live as they're logged (in addition to being collected together after the test finishes). public bool? ShowLiveOutput { get; set; } Property Value bool? ShowLiveOutputOrDefault Gets a flag indicating whether output from ITestOutputHelper should be shown live as they're logged (in addition to being collected together after the test finishes). If the flag is not set, returns the default value (false). public bool ShowLiveOutputOrDefault { get; } Property Value bool StopOnFail Gets or sets a flag indicating whether testing should stop on a failure. public bool? StopOnFail { get; set; } Property Value bool? StopOnFailOrDefault Gets a flag indicating whether testing should stop on a test failure. If the flag is not set, returns the default value (false). public bool StopOnFailOrDefault { get; } Property Value bool SynchronousMessageReporting Gets or sets a flag indicating that synchronous message reporting is desired. public bool? SynchronousMessageReporting { get; set; } Property Value bool? SynchronousMessageReportingOrDefault Gets a flag indicating that synchronous message reporting is desired. If the flag is not set, returns the default value (false). public bool SynchronousMessageReportingOrDefault { get; } Property Value bool"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyDiscoveryFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyDiscoveryFinished.html",
    "title": "Class TestAssemblyDiscoveryFinished | xunit",
    "summary": "Class TestAssemblyDiscoveryFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Reports that runner has just finished discovery for a test assembly. This message will arrive after the test framework's IDiscoveryComplete message, and contains the project metadata associated with the discovery. public class TestAssemblyDiscoveryFinished : IMessageSinkMessage, IJsonSerializable Inheritance object TestAssemblyDiscoveryFinished Implements IMessageSinkMessage IJsonSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Remarks This message does not support serialization or deserialization. Properties Assembly Gets information about the assembly being discovered. public required XunitProjectAssembly Assembly { get; set; } Property Value XunitProjectAssembly DiscoveryOptions Gets the options that were used during discovery. public required ITestFrameworkDiscoveryOptions DiscoveryOptions { get; set; } Property Value ITestFrameworkDiscoveryOptions TestCasesToRun Gets the count of the number of test cases that will be run (post-filtering). public int TestCasesToRun { get; set; } Property Value int Methods ToJson() Converts the given object to JSON. public string? ToJson() Returns string Returns the object in JSON form, if possible; returns null if the object cannot be represented in JSON form."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyDiscoveryStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyDiscoveryStarting.html",
    "title": "Class TestAssemblyDiscoveryStarting | xunit",
    "summary": "Class TestAssemblyDiscoveryStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Reports that runner is about to start discovery for a test assembly. This message will arrive before the test framework's Xunit.DiscoveryStarting message, and contains the project metadata associated with the discovery. public class TestAssemblyDiscoveryStarting : IMessageSinkMessage, IJsonSerializable Inheritance object TestAssemblyDiscoveryStarting Implements IMessageSinkMessage IJsonSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Remarks This message does not support serialization or deserialization. Properties AppDomain Gets a flag which indicates whether the tests will be discovered and run in a separate app domain. public required AppDomainOption AppDomain { get; set; } Property Value AppDomainOption Assembly Gets information about the assembly being discovered. public required XunitProjectAssembly Assembly { get; set; } Property Value XunitProjectAssembly DiscoveryOptions Gets the options that will be used during discovery. public required ITestFrameworkDiscoveryOptions DiscoveryOptions { get; set; } Property Value ITestFrameworkDiscoveryOptions ShadowCopy Gets a flag which indicates whether shadow copies are being used. If app domains are not enabled, then this value is ignored. public required bool ShadowCopy { get; set; } Property Value bool Methods ToJson() Converts the given object to JSON. public string? ToJson() Returns string Returns the object in JSON form, if possible; returns null if the object cannot be represented in JSON form."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyExecutionFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyExecutionFinished.html",
    "title": "Class TestAssemblyExecutionFinished | xunit",
    "summary": "Class TestAssemblyExecutionFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Reports that runner is about to start execution for a test assembly. This message will arrive after the test framework's ITestAssemblyFinished message, and contains the project metadata associated with the execution. public class TestAssemblyExecutionFinished : IMessageSinkMessage, IJsonSerializable Inheritance object TestAssemblyExecutionFinished Implements IMessageSinkMessage IJsonSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Remarks This message does not support serialization or deserialization. Properties Assembly Gets information about the assembly being executed. public required XunitProjectAssembly Assembly { get; set; } Property Value XunitProjectAssembly ExecutionOptions Gets the options that was used during execution. public required ITestFrameworkExecutionOptions ExecutionOptions { get; set; } Property Value ITestFrameworkExecutionOptions ExecutionSummary Gets the summary of the execution results for the test assembly. public required ExecutionSummary ExecutionSummary { get; set; } Property Value ExecutionSummary Methods ToJson() Converts the given object to JSON. public string? ToJson() Returns string Returns the object in JSON form, if possible; returns null if the object cannot be represented in JSON form."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyExecutionStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyExecutionStarting.html",
    "title": "Class TestAssemblyExecutionStarting | xunit",
    "summary": "Class TestAssemblyExecutionStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Reports that runner is about to start execution for a test assembly. This message will arrive before the test framework's ITestAssemblyStarting message, and contains the project metadata associated with the discovery. public class TestAssemblyExecutionStarting : IMessageSinkMessage, IJsonSerializable Inheritance object TestAssemblyExecutionStarting Implements IMessageSinkMessage IJsonSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Remarks This message does not support serialization or deserialization. Properties Assembly Gets information about the assembly being executed. public required XunitProjectAssembly Assembly { get; set; } Property Value XunitProjectAssembly ExecutionOptions Gets the options that will be used during execution. public required ITestFrameworkExecutionOptions ExecutionOptions { get; set; } Property Value ITestFrameworkExecutionOptions Seed Gets the seed value used for randomization. If null, then the test framework does not support setting a randomization seed. (For stock versions of xUnit.net, support for settable randomization seeds started with v3.) public required int? Seed { get; set; } Property Value int? Methods ToJson() Converts the given object to JSON. public string? ToJson() Returns string Returns the object in JSON form, if possible; returns null if the object cannot be represented in JSON form."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyFinished.html",
    "title": "Class TestAssemblyFinished | xunit",
    "summary": "Class TestAssemblyFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestAssemblyFinished. [JsonTypeID(\"test-assembly-finished\")] public sealed class TestAssemblyFinished : TestAssemblyMessage, IJsonDeserializable, ITestAssemblyFinished, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestAssemblyFinished Implements IJsonDeserializable ITestAssemblyFinished ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal Remarks Note: Will be 0 if there was no value provided during deserialization. FinishTime Gets the date and time when the test assembly execution finished. public required DateTimeOffset FinishTime { get; set; } Property Value DateTimeOffset Remarks Note: Will be MinValue if there was no value provided during deserialization. TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyMessage.html",
    "title": "Class TestAssemblyMessage | xunit",
    "summary": "Class TestAssemblyMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestAssemblyMessage. public abstract class TestAssemblyMessage : MessageSinkMessage, IJsonDeserializable, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage Implements IJsonDeserializable ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived DiscoveryComplete DiscoveryStarting TestAssemblyCleanupFailure TestAssemblyFinished TestAssemblyStarting TestCollectionMessage Inherited Members MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AssemblyUniqueID Gets the assembly's unique ID. Can be used to correlate test messages with the appropriate assembly that they're related to. public required string AssemblyUniqueID { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestAssemblyStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestAssemblyStarting.html",
    "title": "Class TestAssemblyStarting | xunit",
    "summary": "Class TestAssemblyStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestAssemblyStarting. [JsonTypeID(\"test-assembly-starting\")] public sealed class TestAssemblyStarting : TestAssemblyMessage, IJsonDeserializable, ITestAssemblyStarting, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IAssemblyMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestAssemblyStarting Implements IJsonDeserializable ITestAssemblyStarting ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IAssemblyMetadata Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). public required string AssemblyName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. AssemblyPath Gets the on-disk location of the assembly under test. public required string AssemblyPath { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. public required string? ConfigFilePath { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. Seed Gets the seed value used for randomization. If null, then the test framework does not support getting or setting a randomization seed. (For stock versions of xUnit.net, support for settable randomization seeds started with v3.) public required int? Seed { get; set; } Property Value int? Remarks Note: Will be null if there was no value provided during deserialization. StartTime Gets the date and time when the test assembly execution began. public required DateTimeOffset StartTime { get; set; } Property Value DateTimeOffset Remarks Note: Will be MinValue if there was no value provided during deserialization. TargetFramework Gets the target framework that the assembly was compiled against. Examples: \".NETFramework,Version=v4.7.2\", \".NETCoreApp,Version=v6.0\". This information is read from TargetFrameworkAttribute on the test assembly, which is normally auto-generated (but could be missing or empty). public required string? TargetFramework { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestEnvironment Gets a display string that describes the test execution environment. Examples: \"32-bit .NET Framework 4.8.4220.0\", \"64-bit .NET Core 4.6.29220.03\" public required string TestEnvironment { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. TestFrameworkDisplayName Gets a display string which describes the test framework and version number. Examples: \"xUnit.net v3 0.1.0-pre.15\", \"xUnit.net 2.4.1\" public required string TestFrameworkDisplayName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Traits Gets the trait values associated with this test assembly. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCaseCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCaseCleanupFailure.html",
    "title": "Class TestCaseCleanupFailure | xunit",
    "summary": "Class TestCaseCleanupFailure Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCaseCleanupFailure. [JsonTypeID(\"test-case-cleanup-failure\")] public sealed class TestCaseCleanupFailure : TestCaseMessage, IJsonDeserializable, ITestCaseCleanupFailure, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseCleanupFailure Implements IJsonDeserializable ITestCaseCleanupFailure ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string, string, string?, string?, string) Creates a new ITestCaseCleanupFailure constructed from an Exception object. public static ITestCaseCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID, string testCaseUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method testCaseUniqueID string The unique ID of the test case Returns ITestCaseCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCaseDiscovered.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCaseDiscovered.html",
    "title": "Class TestCaseDiscovered | xunit",
    "summary": "Class TestCaseDiscovered Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCaseDiscovered. [JsonTypeID(\"test-case-discovered\")] public sealed class TestCaseDiscovered : TestCaseMessage, IJsonDeserializable, ITestCaseDiscovered, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCaseMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseDiscovered Implements IJsonDeserializable ITestCaseDiscovered ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestCaseMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) MessageSinkMessageExtensions.WithSourceInfo(ITestCaseDiscovered, string?, int?) Properties Explicit Gets a flag indicating whether this test case was marked as explicit or not. public required bool Explicit { get; set; } Property Value bool Remarks Note: Will be false if there was no value provided during deserialization. Serialization Gets the serialized value of the test case, which allows it to be transferred across process boundaries. public required string Serialization { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. SkipReason Gets the display text for the reason a test is being skipped; if the test is not statically skipped, returns null. (A test may be dynamically skipped at runtime while still returning null.) public required string? SkipReason { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. SourceFilePath Gets the source file name. A null value indicates that the source file name is not known. public required string? SourceFilePath { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. SourceLineNumber Gets the source file line number. A null value indicates that the source file line number is not known. public required int? SourceLineNumber { get; set; } Property Value int? Remarks Note: Will be null if there was no value provided during deserialization. TestCaseDisplayName Gets the display name of the test case. public required string TestCaseDisplayName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. TestClassMetadataToken Gets the MetadataToken for the test class. If the test did not originate in a class, will return null. public required int? TestClassMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestClassName is null. TestClassName Gets the full name of the class where the test is defined (i.e., FullName). If the test did not originiate in a class, will return null. public required string? TestClassName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestClassNamespace Gets the namespace of the class where the test is defined. If the test did not originate in a class, or the class it originated in does not reside in a namespace, will return null. public required string? TestClassNamespace { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestClassSimpleName Gets the simple name of the class where the test is defined (the class name without namespace). If the test did not originiate in a class, will return null. public required string? TestClassSimpleName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestMethodMetadataToken Gets the MetadataToken for the test method. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required int? TestMethodMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestMethodName is null. TestMethodName Gets the method name where the test is defined, in the TestClassName class. If the test did not originiate in a method, will return null. public required string? TestMethodName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestMethodParameterTypesVSTest Gets the types for the test method parameters. If the test did not originate in a method, or the test framework does not provide this information, will return null; if the test method has no parameters, will return an empty array. public required string[]? TestMethodParameterTypesVSTest { get; set; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required string? TestMethodReturnTypeVSTest { get; set; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCaseFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCaseFinished.html",
    "title": "Class TestCaseFinished | xunit",
    "summary": "Class TestCaseFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCaseFinished. [JsonTypeID(\"test-case-finished\")] public sealed class TestCaseFinished : TestCaseMessage, IJsonDeserializable, ITestCaseFinished, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseFinished Implements IJsonDeserializable ITestCaseFinished ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal Remarks Note: Will be 0 if there was no value provided during deserialization. TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCaseMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCaseMessage.html",
    "title": "Class TestCaseMessage | xunit",
    "summary": "Class TestCaseMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCaseMessage. public abstract class TestCaseMessage : TestMethodMessage, IJsonDeserializable, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage Implements IJsonDeserializable ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestCaseCleanupFailure TestCaseDiscovered TestCaseFinished TestCaseStarting TestMessage Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestCaseUniqueID Gets the test case's unique ID. Can be used to correlate test messages with the appropriate test case that they're related to. public required string TestCaseUniqueID { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCaseStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCaseStarting.html",
    "title": "Class TestCaseStarting | xunit",
    "summary": "Class TestCaseStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCaseStarting. [JsonTypeID(\"test-case-starting\")] public sealed class TestCaseStarting : TestCaseMessage, IJsonDeserializable, ITestCaseStarting, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCaseMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseStarting Implements IJsonDeserializable ITestCaseStarting ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestCaseMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties Explicit Gets a flag indicating whether this test case was marked as explicit or not. public required bool Explicit { get; set; } Property Value bool Remarks Note: Will be false if there was no value provided during deserialization. SkipReason Gets the display text for the reason a test is being skipped; if the test is not statically skipped, returns null. (A test may be dynamically skipped at runtime while still returning null.) public required string? SkipReason { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. SourceFilePath Gets the source file name. A null value indicates that the source file name is not known. public required string? SourceFilePath { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. SourceLineNumber Gets the source file line number. A null value indicates that the source file line number is not known. public required int? SourceLineNumber { get; set; } Property Value int? Remarks Note: Will be null if there was no value provided during deserialization. TestCaseDisplayName Gets the display name of the test case. public required string TestCaseDisplayName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. TestClassMetadataToken Gets the MetadataToken for the test class. If the test did not originate in a class, will return null. public required int? TestClassMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestClassName is null. TestClassName Gets the full name of the class where the test is defined (i.e., FullName). If the test did not originiate in a class, will return null. public required string? TestClassName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestClassNamespace Gets the namespace of the class where the test is defined. If the test did not originate in a class, or the class it originated in does not reside in a namespace, will return null. public required string? TestClassNamespace { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestClassSimpleName Gets the simple name of the class where the test is defined (the class name without namespace). If the test did not originiate in a class, will return null. public required string? TestClassSimpleName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestMethodMetadataToken Gets the MetadataToken for the test method. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required int? TestMethodMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestMethodName is null. TestMethodName Gets the method name where the test is defined, in the TestClassName class. If the test did not originiate in a method, will return null. public required string? TestMethodName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestMethodParameterTypesVSTest Gets the types for the test method parameters. If the test did not originate in a method, or the test framework does not provide this information, will return null; if the test method has no parameters, will return an empty array. public required string[]? TestMethodParameterTypesVSTest { get; set; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required string? TestMethodReturnTypeVSTest { get; set; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassCleanupFailure.html",
    "title": "Class TestClassCleanupFailure | xunit",
    "summary": "Class TestClassCleanupFailure Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassCleanupFailure. [JsonTypeID(\"test-class-cleanup-failure\")] public sealed class TestClassCleanupFailure : TestClassMessage, IJsonDeserializable, ITestClassCleanupFailure, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestClassCleanupFailure Implements IJsonDeserializable ITestClassCleanupFailure ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string, string, string?) Creates a new ITestClassCleanupFailure constructed from an Exception object. public static ITestClassCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class Returns ITestClassCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassConstructionFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassConstructionFinished.html",
    "title": "Class TestClassConstructionFinished | xunit",
    "summary": "Class TestClassConstructionFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassConstructionFinished. [JsonTypeID(\"test-class-construction-finished\")] public sealed class TestClassConstructionFinished : TestMessage, IJsonDeserializable, ITestClassConstructionFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassConstructionFinished Implements IJsonDeserializable ITestClassConstructionFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?)"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassConstructionStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassConstructionStarting.html",
    "title": "Class TestClassConstructionStarting | xunit",
    "summary": "Class TestClassConstructionStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassConstructionStarting. [JsonTypeID(\"test-class-construction-starting\")] public sealed class TestClassConstructionStarting : TestMessage, IJsonDeserializable, ITestClassConstructionStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassConstructionStarting Implements IJsonDeserializable ITestClassConstructionStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?)"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassDisposeFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassDisposeFinished.html",
    "title": "Class TestClassDisposeFinished | xunit",
    "summary": "Class TestClassDisposeFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassDisposeFinished. [JsonTypeID(\"test-class-dispose-finished\")] public sealed class TestClassDisposeFinished : TestMessage, IJsonDeserializable, ITestClassDisposeFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassDisposeFinished Implements IJsonDeserializable ITestClassDisposeFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?)"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassDisposeStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassDisposeStarting.html",
    "title": "Class TestClassDisposeStarting | xunit",
    "summary": "Class TestClassDisposeStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassDisposeStarting. [JsonTypeID(\"test-class-dispose-starting\")] public sealed class TestClassDisposeStarting : TestMessage, IJsonDeserializable, ITestClassDisposeStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassDisposeStarting Implements IJsonDeserializable ITestClassDisposeStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?)"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassFinished.html",
    "title": "Class TestClassFinished | xunit",
    "summary": "Class TestClassFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassFinished [JsonTypeID(\"test-class-finished\")] public sealed class TestClassFinished : TestClassMessage, IJsonDeserializable, ITestClassFinished, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestClassFinished Implements IJsonDeserializable ITestClassFinished ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal Remarks Note: Will be 0 if there was no value provided during deserialization. TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassMessage.html",
    "title": "Class TestClassMessage | xunit",
    "summary": "Class TestClassMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassMessage. public abstract class TestClassMessage : TestCollectionMessage, IJsonDeserializable, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage Implements IJsonDeserializable ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestClassCleanupFailure TestClassFinished TestClassStarting TestMethodMessage Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestClassUniqueID Gets the test class's unique ID. Can be used to correlate test messages with the appropriate test class that they're related to. Will be null if the test did not originate from a class. public required string? TestClassUniqueID { get; set; } Property Value string Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestClassStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestClassStarting.html",
    "title": "Class TestClassStarting | xunit",
    "summary": "Class TestClassStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestClassStarting. [JsonTypeID(\"test-class-starting\")] public sealed class TestClassStarting : TestClassMessage, IJsonDeserializable, ITestClassStarting, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestClassMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestClassStarting Implements IJsonDeserializable ITestClassStarting ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestClassMetadata Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestClassName Gets the full name of the test class (i.e., FullName). public required string TestClassName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. TestClassNamespace Gets the namespace of the class where the test is defined. Will return null for classes not residing in a namespace. public required string? TestClassNamespace { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestClassSimpleName Gets the simple name of the test class (the class name without namespace). public required string TestClassSimpleName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Traits Gets the trait values associated with this test class (and the test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCleanupFailure.html",
    "title": "Class TestCleanupFailure | xunit",
    "summary": "Class TestCleanupFailure Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCleanupFailure. [JsonTypeID(\"test-cleanup-failure\")] public sealed class TestCleanupFailure : TestMessage, IJsonDeserializable, ITestCleanupFailure, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestCleanupFailure Implements IJsonDeserializable ITestCleanupFailure ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string, string, string?, string?, string, string) Creates a new ITestCleanupFailure constructed from an Exception object. public static ITestCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID, string testCaseUniqueID, string testUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method testCaseUniqueID string The unique ID of the test case testUniqueID string The unique ID of the test Returns ITestCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCollectionCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCollectionCleanupFailure.html",
    "title": "Class TestCollectionCleanupFailure | xunit",
    "summary": "Class TestCollectionCleanupFailure Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCollectionCleanupFailure. [JsonTypeID(\"test-collection-cleanup-failure\")] public sealed class TestCollectionCleanupFailure : TestCollectionMessage, IJsonDeserializable, ITestCollectionCleanupFailure, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestCollectionCleanupFailure Implements IJsonDeserializable ITestCollectionCleanupFailure ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string, string) Creates a new ITestCollectionCleanupFailure constructed from an Exception object. public static ITestCollectionCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon Returns ITestCollectionCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCollectionFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCollectionFinished.html",
    "title": "Class TestCollectionFinished | xunit",
    "summary": "Class TestCollectionFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCollectionFinished. [JsonTypeID(\"test-collection-finished\")] public sealed class TestCollectionFinished : TestCollectionMessage, IJsonDeserializable, ITestCollectionFinished, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestCollectionFinished Implements IJsonDeserializable ITestCollectionFinished ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal Remarks Note: Will be 0 if there was no value provided during deserialization. TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCollectionMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCollectionMessage.html",
    "title": "Class TestCollectionMessage | xunit",
    "summary": "Class TestCollectionMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCollectionMessage. public abstract class TestCollectionMessage : TestAssemblyMessage, IJsonDeserializable, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage Implements IJsonDeserializable ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestClassMessage TestCollectionCleanupFailure TestCollectionFinished TestCollectionStarting Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestCollectionUniqueID Gets the test collection's unique ID. Can be used to correlate test messages with the appropriate test collection that they're related to. public required string TestCollectionUniqueID { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestCollectionStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestCollectionStarting.html",
    "title": "Class TestCollectionStarting | xunit",
    "summary": "Class TestCollectionStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestCollectionStarting. [JsonTypeID(\"test-collection-starting\")] public sealed class TestCollectionStarting : TestCollectionMessage, IJsonDeserializable, ITestCollectionStarting, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCollectionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestCollectionStarting Implements IJsonDeserializable ITestCollectionStarting ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestCollectionMetadata Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestCollectionClassName Gets the type that the test collection was defined with, if available; may be null if the test collection didn't have a definition type. public required string? TestCollectionClassName { get; set; } Property Value string Remarks Note: Will be null if there was no value provided during deserialization. TestCollectionDisplayName Gets the display name of the test collection. public required string TestCollectionDisplayName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Traits Gets the trait values associated with this test collection (and the test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestDiscoverySink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestDiscoverySink.html",
    "title": "Class TestDiscoverySink | xunit",
    "summary": "Class TestDiscoverySink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IMessageSink designed for test discovery for a single test assembly. The Finished event is triggered when discovery is complete. public class TestDiscoverySink : IMessageSink, IDisposable Inheritance object TestDiscoverySink Implements IMessageSink IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestDiscoverySink(Func<bool>?) Initializes a new instance of the TestDiscoverySink class. public TestDiscoverySink(Func<bool>? cancelThunk = null) Parameters cancelThunk Func<bool> An optional thunk which can be used to control cancellation. Properties DiscoverySink Gets the event sink used to record discovery messages. protected DiscoveryEventSink DiscoverySink { get; } Property Value DiscoveryEventSink Finished Gets an event which is signaled once discovery is finished. public ManualResetEvent Finished { get; } Property Value ManualResetEvent TestCases The list of discovered test cases. public List<ITestCaseDiscovered> TestCases { get; } Property Value List<ITestCaseDiscovered> Methods Dispose() public void Dispose() OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestExecutionSummaries.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestExecutionSummaries.html",
    "title": "Class TestExecutionSummaries | xunit",
    "summary": "Class TestExecutionSummaries Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Reports multi-assembly test execution summary information. public class TestExecutionSummaries : IMessageSinkMessage, IJsonSerializable Inheritance object TestExecutionSummaries Implements IMessageSinkMessage IJsonSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Remarks This message does not support serialization or deserialization. Properties ElapsedClockTime Gets the clock time elapsed when running the tests. This may different significantly from the sum of the times reported in the summaries, if the runner chose to run the test assemblies in parallel. public TimeSpan ElapsedClockTime { get; set; } Property Value TimeSpan SummariesByAssemblyUniqueID Gets the summaries of all the tests run. The key is the unique ID of the test assembly; the value is the summary of test execution for that assembly. public List<(string AssemblyUniqueID, ExecutionSummary Summary)> SummariesByAssemblyUniqueID { get; } Property Value List<(string AssemblyUniqueID, ExecutionSummary Summary)> Methods Add(string, ExecutionSummary) Add assembly summary information. public void Add(string assemblyUniqueID, ExecutionSummary summary) Parameters assemblyUniqueID string The unique ID of the assembly summary ExecutionSummary The execution summary ToJson() Converts the given object to JSON. public string? ToJson() Returns string Returns the object in JSON form, if possible; returns null if the object cannot be represented in JSON form."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestFailed.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestFailed.html",
    "title": "Class TestFailed | xunit",
    "summary": "Class TestFailed Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestFailed. [JsonTypeID(\"test-failed\")] public sealed class TestFailed : TestResultMessage, IJsonDeserializable, ITestFailed, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestFailed Implements IJsonDeserializable ITestFailed ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata IErrorMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties Cause Gets the cause of the test failure. public required FailureCause Cause { get; set; } Property Value FailureCause Remarks Note: Will be Unknown if there was no value provided during deserialization. ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string, string, string?, string?, string, string, decimal, string?, string[]?, DateTimeOffset?) Creates a new ITestFailed constructed from an Exception object. public static ITestFailed FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID, string testCaseUniqueID, string testUniqueID, decimal executionTime, string? output, string[]? warnings, DateTimeOffset? finishTime = null) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method testCaseUniqueID string The unique ID of the test case testUniqueID string The unique ID of the test executionTime decimal The execution time of the test (may be null if the test wasn't executed) output string The (optional) output from the test warnings string[] The (optional) warnings that were recorded during test execution finishTime DateTimeOffset? The time when the test finished executing; defaults to UtcNow Returns ITestFailed Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestFinished.html",
    "title": "Class TestFinished | xunit",
    "summary": "Class TestFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestFinished. [JsonTypeID(\"test-finished\")] public sealed class TestFinished : TestResultMessage, IJsonDeserializable, ITestFinished, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestFinished Implements IJsonDeserializable ITestFinished ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestResultMessage.ToString() TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties Attachments Gets any attachments that were added to the test result via Xunit.TestContext.AddAttachment. public required IReadOnlyDictionary<string, TestAttachment> Attachments { get; set; } Property Value IReadOnlyDictionary<string, TestAttachment> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestFrameworkOptions.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestFrameworkOptions.html",
    "title": "Class TestFrameworkOptions | xunit",
    "summary": "Class TestFrameworkOptions Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents options passed to a test framework for discovery or execution. public class TestFrameworkOptions : ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, ITestFrameworkOptions Inheritance object TestFrameworkOptions Implements ITestFrameworkDiscoveryOptions ITestFrameworkExecutionOptions ITestFrameworkOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TestFrameworkOptionsReadWriteExtensions.GetCulture(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessages(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetIncludeSourceInformation(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetIncludeSourceInformationOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessages(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetMethodDisplay(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOptions(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOptionsOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetPreEnumerateTheories(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetPreEnumerateTheoriesOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxEnumerableLength(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectDepth(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectMemberCount(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxStringLength(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReporting(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReportingOrDefault(ITestFrameworkDiscoveryOptions) TestFrameworkOptionsReadWriteExtensions.SetCulture(ITestFrameworkDiscoveryOptions, string?) TestFrameworkOptionsReadWriteExtensions.SetDiagnosticMessages(ITestFrameworkDiscoveryOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetIncludeSourceInformation(ITestFrameworkDiscoveryOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetInternalDiagnosticMessages(ITestFrameworkDiscoveryOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetMethodDisplay(ITestFrameworkDiscoveryOptions, TestMethodDisplay?) TestFrameworkOptionsReadWriteExtensions.SetMethodDisplayOptions(ITestFrameworkDiscoveryOptions, TestMethodDisplayOptions?) TestFrameworkOptionsReadWriteExtensions.SetPreEnumerateTheories(ITestFrameworkDiscoveryOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxEnumerableLength(ITestFrameworkDiscoveryOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectDepth(ITestFrameworkDiscoveryOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectMemberCount(ITestFrameworkDiscoveryOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxStringLength(ITestFrameworkDiscoveryOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetSynchronousMessageReporting(ITestFrameworkDiscoveryOptions, bool?) TestFrameworkOptionsReadWriteExtensions.GetAssertEquivalentMaxDepth(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetCulture(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessages(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetDisableParallelization(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetDisableParallelizationOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetExplicitOption(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetExplicitOptionOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetFailSkips(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetFailSkipsOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetFailTestsWithWarnings(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetFailTestsWithWarningsOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessages(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetMaxParallelThreads(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetMaxParallelThreadsOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetParallelAlgorithm(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetParallelAlgorithmOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxEnumerableLength(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectDepth(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectMemberCount(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetPrintMaxStringLength(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetSeed(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetShowLiveOutput(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetShowLiveOutputOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetStopOnTestFail(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetStopOnTestFailOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReporting(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReportingOrDefault(ITestFrameworkExecutionOptions) TestFrameworkOptionsReadWriteExtensions.SetAssertEquivalentMaxDepth(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetCulture(ITestFrameworkExecutionOptions, string?) TestFrameworkOptionsReadWriteExtensions.SetDiagnosticMessages(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetDisableParallelization(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetExplicitOption(ITestFrameworkExecutionOptions, ExplicitOption?) TestFrameworkOptionsReadWriteExtensions.SetFailSkips(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetFailTestsWithWarnings(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetInternalDiagnosticMessages(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetMaxParallelThreads(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetParallelAlgorithm(ITestFrameworkExecutionOptions, ParallelAlgorithm?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxEnumerableLength(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectDepth(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectMemberCount(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetPrintMaxStringLength(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetSeed(ITestFrameworkExecutionOptions, int?) TestFrameworkOptionsReadWriteExtensions.SetShowLiveOutput(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetStopOnTestFail(ITestFrameworkExecutionOptions, bool?) TestFrameworkOptionsReadWriteExtensions.SetSynchronousMessageReporting(ITestFrameworkExecutionOptions, bool?) Methods Empty() INTERNAL METHOD, FOR TESTING PURPOSES ONLY. DO NOT CALL. public static TestFrameworkOptions Empty() Returns TestFrameworkOptions ForDiscovery(TestAssemblyConfiguration) Creates an instance of TestFrameworkOptions for discovery purposes. public static ITestFrameworkDiscoveryOptions ForDiscovery(TestAssemblyConfiguration configuration) Parameters configuration TestAssemblyConfiguration The configuration to copy values from. Returns ITestFrameworkDiscoveryOptions ForDiscoveryFromSerialization(string) Creates an instance of TestFrameworkOptions for discovery purposes. public static ITestFrameworkDiscoveryOptions ForDiscoveryFromSerialization(string optionsJson) Parameters optionsJson string The serialized discovery options. Returns ITestFrameworkDiscoveryOptions ForExecution(TestAssemblyConfiguration) Creates an instance of TestFrameworkOptions for execution purposes. public static ITestFrameworkExecutionOptions ForExecution(TestAssemblyConfiguration configuration) Parameters configuration TestAssemblyConfiguration The configuration to copy values from. Returns ITestFrameworkExecutionOptions ForExecutionFromSerialization(string) Creates an instance of TestFrameworkOptions for execution purposes. public static ITestFrameworkExecutionOptions ForExecutionFromSerialization(string optionsJson) Parameters optionsJson string The serialized execution options. Returns ITestFrameworkExecutionOptions GetValue<TValue>(string) Gets a value from the options collection. public TValue? GetValue<TValue>(string name) Parameters name string The name of the value. Returns TValue Returns the value. Type Parameters TValue The type of the value. SetValue<TValue>(string, TValue) Sets a value into the options collection. public void SetValue<TValue>(string name, TValue value) Parameters name string The name of the value. value TValue The value. Type Parameters TValue The type of the value. ToJson() Converts the test framework options into JSON. Used for serializing the options for sending across a process boundary. public string ToJson() Returns string The serialized framework options."
  },
  "v3/2.0.0/Xunit.Runner.Common.TestMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestMessage.html",
    "title": "Class TestMessage | xunit",
    "summary": "Class TestMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestMessage. public abstract class TestMessage : TestCaseMessage, IJsonDeserializable, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage Implements IJsonDeserializable ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived AfterTestFinished AfterTestStarting BeforeTestFinished BeforeTestStarting TestClassConstructionFinished TestClassConstructionStarting TestClassDisposeFinished TestClassDisposeStarting TestCleanupFailure TestOutput TestResultMessage TestStarting Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestUniqueID Gets the test's unique ID. Can be used to correlate test messages with the appropriate test that they're related to. public required string TestUniqueID { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestMessageSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestMessageSink.html",
    "title": "Class TestMessageSink | xunit",
    "summary": "Class TestMessageSink Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IMessageSink that provides access to events for all levels of reporting. public class TestMessageSink : AggregateMessageSink, IAsyncDisposable, IMessageSink Inheritance object AggregateMessageSink TestMessageSink Implements IAsyncDisposable IMessageSink Derived DefaultRunnerReporterMessageHandler Inherited Members AggregateMessageSink.AggregatedSinks AggregateMessageSink.DisposeAsync() AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Diagnostics Gets a list of diagnostics events that can be subscribed to. public DiagnosticEventSink Diagnostics { get; } Property Value DiagnosticEventSink Discovery Gets a list of discovery events that can be subscribed to. public DiscoveryEventSink Discovery { get; } Property Value DiscoveryEventSink Execution Gets a list of execution events that can be subscribed to. public ExecutionEventSink Execution { get; } Property Value ExecutionEventSink Runner Gets a list of runner events that can be subscribed to. public RunnerEventSink Runner { get; } Property Value RunnerEventSink"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestMethodCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestMethodCleanupFailure.html",
    "title": "Class TestMethodCleanupFailure | xunit",
    "summary": "Class TestMethodCleanupFailure Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestMethodCleanupFailure. [JsonTypeID(\"test-method-cleanup-failure\")] public sealed class TestMethodCleanupFailure : TestMethodMessage, IJsonDeserializable, ITestMethodCleanupFailure, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestMethodCleanupFailure Implements IJsonDeserializable ITestMethodCleanupFailure ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] Remarks Note: Will be an empty array if there was no value provided during deserialization. ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Remarks Note: Will be an empty array if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object FromException(Exception, string, string, string?, string?) Creates a new ITestMethodCleanupFailure constructed from an Exception object. public static ITestMethodCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method Returns ITestMethodCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestMethodFinished.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestMethodFinished.html",
    "title": "Class TestMethodFinished | xunit",
    "summary": "Class TestMethodFinished Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestMethodFinished. [JsonTypeID(\"test-method-finished\")] public sealed class TestMethodFinished : TestMethodMessage, IJsonDeserializable, ITestMethodFinished, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestMethodFinished Implements IJsonDeserializable ITestMethodFinished ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal Remarks Note: Will be 0 if there was no value provided during deserialization. TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestMethodMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestMethodMessage.html",
    "title": "Class TestMethodMessage | xunit",
    "summary": "Class TestMethodMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestMethodMessage. public abstract class TestMethodMessage : TestClassMessage, IJsonDeserializable, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage Implements IJsonDeserializable ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestCaseMessage TestMethodCleanupFailure TestMethodFinished TestMethodStarting Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties TestMethodUniqueID Gets the test method's unique ID. Can be used to correlate test messages with the appropriate test method that they're related to. Will be null if the test did not originate from a method. public required string? TestMethodUniqueID { get; set; } Property Value string Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestMethodStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestMethodStarting.html",
    "title": "Class TestMethodStarting | xunit",
    "summary": "Class TestMethodStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestMethodStarting. [JsonTypeID(\"test-method-starting\")] public sealed class TestMethodStarting : TestMethodMessage, IJsonDeserializable, ITestMethodStarting, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestMethodMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestMethodStarting Implements IJsonDeserializable ITestMethodStarting ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestMethodMetadata Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties MethodName Gets the name of the test method that is associated with this message. public required string MethodName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Traits Gets the trait values associated with this test method (and the test class, test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestNotRun.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestNotRun.html",
    "title": "Class TestNotRun | xunit",
    "summary": "Class TestNotRun Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestNotRun. [JsonTypeID(\"test-not-run\")] public sealed class TestNotRun : TestResultMessage, IJsonDeserializable, ITestNotRun, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestNotRun Implements IJsonDeserializable ITestNotRun ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestResultMessage.ToString() TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?)"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestOutput.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestOutput.html",
    "title": "Class TestOutput | xunit",
    "summary": "Class TestOutput Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestOutput. [JsonTypeID(\"test-output\")] public sealed class TestOutput : TestMessage, IJsonDeserializable, ITestOutput, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestOutput Implements IJsonDeserializable ITestOutput ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties Output Gets the line of output. public required string Output { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestPassed.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestPassed.html",
    "title": "Class TestPassed | xunit",
    "summary": "Class TestPassed Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestPassed. [JsonTypeID(\"test-passed\")] public sealed class TestPassed : TestResultMessage, IJsonDeserializable, ITestPassed, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestPassed Implements IJsonDeserializable ITestPassed ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestResultMessage.ToString() TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?)"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestProjectConfiguration.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestProjectConfiguration.html",
    "title": "Class TestProjectConfiguration | xunit",
    "summary": "Class TestProjectConfiguration Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents the configuration settings for a test runner which are independent of the test assembly. Are usually passed via command line or some other equivalent mechanism. Accessed via XunitProject.Configuration. public class TestProjectConfiguration Inheritance object TestProjectConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields EnvNameNoColor Gets the environment variable name used to test for the user requesting no color output. public const string EnvNameNoColor = \"NO_COLOR\" Field Value string Properties AssemblyInfo Gets or sets a flag which indicates whether the runner should return assembly information rather than listing or executing tests. public bool? AssemblyInfo { get; set; } Property Value bool? AssemblyInfoOrDefault Gets a flag which indicates whether the runner should return assembly information rather than listing or executing tests. If the flag is not specified, returns the default value (false). public bool AssemblyInfoOrDefault { get; } Property Value bool Debug Gets or sets a flag which indicates whether the runner should attempt to attach the debugger before running any tests. public bool? Debug { get; set; } Property Value bool? DebugOrDefault Gets a flag which indicates whether the runner should attempt to attach the debugger before running any tests. If the flag is not specified, returns the default value (false). public bool DebugOrDefault { get; } Property Value bool IgnoreFailures Gets or sets a flag which indicates whether the runner should ignore test failures. public bool? IgnoreFailures { get; set; } Property Value bool? IgnoreFailuresOrDefault Gets a flag which indicates whether the runner should ignore test failures. If the flag is not specified, returns the default value (false). public bool IgnoreFailuresOrDefault { get; } Property Value bool List Gets or sets a flag to indicate that we should list things instead of run them (and what we're listing, and in what format). public (ListOption Option, ListFormat Format)? List { get; set; } Property Value (ListOption Option, ListFormat Format)? NoAutoReporters Gets or sets a flag indicating that the test runner should not attempt to use any automatically (aka environmentally) enabled reporters. public bool? NoAutoReporters { get; set; } Property Value bool? NoAutoReportersOrDefault Gets a flag indicating that the test runner should not attempt to use any automatically (aka environmentally) enabled reporters. If the flag is not set, returns the default value (false). public bool NoAutoReportersOrDefault { get; } Property Value bool NoColor Gets or sets a flag indicating that the test runner should not output any color codes when writing text to the console. public bool? NoColor { get; set; } Property Value bool? NoColorOrDefault Gets a flag indicating that the test runner should not output any color codes when writing text to the console. If the flag is not set, returns true if the user has defined the NO_COLOR environment variable, or false otherwise. public bool NoColorOrDefault { get; } Property Value bool NoLogo Gets or sets a flag indicating that the test runner should not output the copyright information. public bool? NoLogo { get; set; } Property Value bool? NoLogoOrDefault Gets a flag indicating that the test runner hsould not output the copyright information. If the flag is not set, returns the default value (false). public bool NoLogoOrDefault { get; } Property Value bool Output The output files that should be generated from the test run. The key is the output type, and the value is the output filename. The output type matches the ID property on the transforms available in TransformFactory.AvailableTransforms. public Dictionary<string, string> Output { get; } Property Value Dictionary<string, string> Pause Gets or sets a flag indicating that the test runner should pause before running any tests. public bool? Pause { get; set; } Property Value bool? PauseOrDefault Gets a flag indicating that the test runner should pause before running any tests. If the flag is not set, returns the default value (false). public bool PauseOrDefault { get; } Property Value bool UseAnsiColor Gets or sets a flag indicating that ANSI color usage should be forced on Windows. ANSI color is always used for non-Windows. public bool? UseAnsiColor { get; set; } Property Value bool? UseAnsiColorOrDefault Gets a flag indicating that ANSI color usage should be forced on Windows. ANSI color is always used for non-Windows. If the flag is not set, returns the default value (false). public bool UseAnsiColorOrDefault { get; } Property Value bool Wait Gets or sets a flag indicating that the test runner should pause after all tests have run. public bool? Wait { get; set; } Property Value bool? WaitForDebugger Gets or sets a flag indicating that the test runner should wait for a debugger to be attached before performing any actions. public bool? WaitForDebugger { get; set; } Property Value bool? WaitForDebuggerOrDefault Gets a flag indicating that the test runner should wait for a debugger to be attached before performing any actions. If the flag is not set, returns the default value (false). public bool WaitForDebuggerOrDefault { get; } Property Value bool WaitOrDefault Gets a flag indicating that the test runner should pause after all tests have run. If the flag is not set, returns the default value (false). public bool WaitOrDefault { get; } Property Value bool"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestResultMessage.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestResultMessage.html",
    "title": "Class TestResultMessage | xunit",
    "summary": "Class TestResultMessage Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestResultMessage. public abstract class TestResultMessage : TestMessage, IJsonDeserializable, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage Implements IJsonDeserializable ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Derived TestFailed TestFinished TestNotRun TestPassed TestSkipped Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.EmptyTraits MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties ExecutionTime The time spent executing the test, in seconds. Will be 0 if the test was not executed. public required decimal ExecutionTime { get; set; } Property Value decimal Remarks Note: Will be 0 if there was no value provided during deserialization. FinishTime Gets the date and time when the test execution finished. public required DateTimeOffset FinishTime { get; set; } Property Value DateTimeOffset Remarks Note: Will be MinValue if there was no value provided during deserialization. Output The captured output of the test. Will be Empty if there was no output. public required string Output { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Warnings Gets a list of the warning messages that were recorded during execution. Will be null if there were no warnings. public required string[]? Warnings { get; set; } Property Value string[] Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestSkipped.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestSkipped.html",
    "title": "Class TestSkipped | xunit",
    "summary": "Class TestSkipped Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestSkipped. [JsonTypeID(\"test-skipped\")] public sealed class TestSkipped : TestResultMessage, IJsonDeserializable, ITestSkipped, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestSkipped Implements IJsonDeserializable ITestSkipped ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties Reason Gets the reason given for skipping the test. public required string Reason { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.TestStarting.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TestStarting.html",
    "title": "Class TestStarting | xunit",
    "summary": "Class TestStarting Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Default implementation of ITestStarting. [JsonTypeID(\"test-starting\")] public sealed class TestStarting : TestMessage, IJsonDeserializable, ITestStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestStarting Implements IJsonDeserializable ITestStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestMetadata Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.UnsetStringPropertyValue MessageSinkMessage.FromJson(IReadOnlyDictionary<string, object>) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) MessageSinkMessageExtensions.DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Properties Explicit Gets a flag which indicates whether the test is marked as explicit or not. public required bool Explicit { get; set; } Property Value bool Remarks Note: Will be false if there was no value provided during deserialization. StartTime Gets the date and time when the test execution began. public required DateTimeOffset StartTime { get; set; } Property Value DateTimeOffset Remarks Note: Will be MinValue if there was no value provided during deserialization. TestDisplayName Gets the display name of the test. public required string TestDisplayName { get; set; } Property Value string Remarks Note: Will be UnsetStringPropertyValue if there was no value provided during deserialization. Timeout Gets the timeout for the test, in milliseconds; if 0, there is no timeout. public required int Timeout { get; set; } Property Value int Remarks Note: Will be 0 if there was no value provided during deserialization. Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Remarks Note: Will be an empty dictionary if there was no value provided during deserialization. Methods Deserialize(IReadOnlyDictionary<string, object?>) Override to deserialize the values in the dictionary into the message. protected override void Deserialize(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the JSON object Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Runner.Common.Transform.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.Transform.html",
    "title": "Class Transform | xunit",
    "summary": "Class Transform Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents a single report transformation from XML. public class Transform Inheritance object Transform Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Transform(string, string, Action<XElement, string>) Represents a single report transformation from XML. public Transform(string id, string description, Action<XElement, string> outputHandler) Parameters id string The transform ID description string The transform description outputHandler Action<XElement, string> The handler which will write the v2 XML to the given file Properties Description Gets description of the transformation. Suitable for displaying to end users. public string Description { get; } Property Value string ID Gets the transform ID. public string ID { get; } Property Value string OutputHandler Gets the output handler for the transformation. Converts XML to a file on the file system. public Action<XElement, string> OutputHandler { get; } Property Value Action<XElement, string>"
  },
  "v3/2.0.0/Xunit.Runner.Common.TransformFactory.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.TransformFactory.html",
    "title": "Class TransformFactory | xunit",
    "summary": "Class TransformFactory Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Used to retrieve a list of available public class TransformFactory Inheritance object TransformFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AvailableTransforms Gets the list of available transforms. public static IReadOnlyList<Transform> AvailableTransforms { get; } Property Value IReadOnlyList<Transform> Methods CreateAssembliesElement() Creates the root \"assemblies\" XML element. public static XElement CreateAssembliesElement() Returns XElement FinishAssembliesElement(XElement) Finishes the assemblies element by supplementing with summary attributes. public static void FinishAssembliesElement(XElement assembliesElement) Parameters assembliesElement XElement GetXmlTransformers(XunitProject) Gets the list of XML transformer functions for the given project. public static List<Action<XElement>> GetXmlTransformers(XunitProject project) Parameters project XunitProject The project to get transforms for. Returns List<Action<XElement>> The list of transform functions. Transform(string, XElement, string) Runs the transformation for the given ID and XML, and writes it to the given output file. public static void Transform(string id, XElement assembliesElement, string outputFileName) Parameters id string The transform ID assembliesElement XElement The assembly XML to transform outputFileName string The output file name"
  },
  "v3/2.0.0/Xunit.Runner.Common.VerboseReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.VerboseReporter.html",
    "title": "Class VerboseReporter | xunit",
    "summary": "Class VerboseReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that supplements the default reporter behavior by printing out the start and finish of each executing test. public class VerboseReporter : IRunnerReporter Inheritance object VerboseReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.VerboseReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.VerboseReporterMessageHandler.html",
    "title": "Class VerboseReporterMessageHandler | xunit",
    "summary": "Class VerboseReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports VerboseReporter. public class VerboseReporterMessageHandler : DefaultRunnerReporterMessageHandler, IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink TestMessageSink DefaultRunnerReporterMessageHandler VerboseReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members DefaultRunnerReporterMessageHandler.EnvVar_HidePassingOutput DefaultRunnerReporterMessageHandler.Logger DefaultRunnerReporterMessageHandler.MetadataCache DefaultRunnerReporterMessageHandler.Escape(string) DefaultRunnerReporterMessageHandler.EscapeMultiLineIndent(string, string) DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(XunitProjectAssembly) DefaultRunnerReporterMessageHandler.GetExecutionOptions(string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string, params object[]) DefaultRunnerReporterMessageHandler.LogStackTrace(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogOutput(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogWarnings(StackFrameInfo, string[]) DefaultRunnerReporterMessageHandler.HandleErrorMessage(MessageHandlerArgs<IErrorMessage>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting>) DefaultRunnerReporterMessageHandler.HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished>) DefaultRunnerReporterMessageHandler.HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting>) DefaultRunnerReporterMessageHandler.HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished>) DefaultRunnerReporterMessageHandler.HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting>) DefaultRunnerReporterMessageHandler.HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished>) DefaultRunnerReporterMessageHandler.HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting>) DefaultRunnerReporterMessageHandler.HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries>) DefaultRunnerReporterMessageHandler.HandleTestFailed(MessageHandlerArgs<ITestFailed>) DefaultRunnerReporterMessageHandler.HandleTestFinished(MessageHandlerArgs<ITestFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting>) DefaultRunnerReporterMessageHandler.HandleTestOutput(MessageHandlerArgs<ITestOutput>) DefaultRunnerReporterMessageHandler.HandleTestPassed(MessageHandlerArgs<ITestPassed>) DefaultRunnerReporterMessageHandler.HandleTestSkipped(MessageHandlerArgs<ITestSkipped>) DefaultRunnerReporterMessageHandler.HandleTestStarting(MessageHandlerArgs<ITestStarting>) DefaultRunnerReporterMessageHandler.WriteDefaultSummary(IRunnerLogger, TestExecutionSummaries) TestMessageSink.Diagnostics TestMessageSink.Discovery TestMessageSink.Execution TestMessageSink.Runner AggregateMessageSink.AggregatedSinks AggregateMessageSink.DisposeAsync() AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors VerboseReporterMessageHandler(IRunnerLogger) Initializes a new instance of the VerboseReporterMessageHandler class. public VerboseReporterMessageHandler(IRunnerLogger logger) Parameters logger IRunnerLogger The logger used to report messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.VstsReporter.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.VstsReporter.html",
    "title": "Class VstsReporter | xunit",
    "summary": "Class VstsReporter Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporter that reports results to Azure DevOps/VSTS. This is auto-enabled by the presence of four required environment variables: \"VSTS_ACCESS_TOKEN\", \"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI\", \"SYSTEM_TEAMPROJECT\", and \"BUILD_BUILDID\". public class VstsReporter : IRunnerReporter Inheritance object VstsReporter Implements IRunnerReporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanBeEnvironmentallyEnabled Gets a value which indicates if it's possible for this reporter to be environmentally enabled. public bool CanBeEnvironmentallyEnabled { get; } Property Value bool Remarks Note that this differs from IsEnvironmentallyEnabled which checks to see whether the conditions currently exist to environmentally enable the reporter. This value is used when constructing the console runner help output that lists which runners might be environmentally enabled. Description Gets the description of the reporter. This is typically used when showing the user the invocation option for the reporter. public string Description { get; } Property Value string ForceNoLogo Gets a value which indicates whether this runner wishes to force no logo. Useful for runners which are designed for purely parseable output (for example, JsonReporter). public bool ForceNoLogo { get; } Property Value bool IsEnvironmentallyEnabled Gets a value which indicates whether the reporter should be environmentally enabled. public bool IsEnvironmentallyEnabled { get; } Property Value bool Remarks When a runner reporter is environmentally enabled in Microsoft Testing Platform CLI mode (or dotnet test), by default all realtime output is filtered except calls to LogRaw(string) (unless the user has specified the --xunit-info switch). Environmentally enabled reporters that require realtime console output (for example, to send formatted messages to a CI system which parses the console output) must use LogRaw(string) to ensure those messages will always be visible. All other messages will always be output to the Microsoft Testing Platform diagnostic logs, which are enabled via the --diagnostic switch. RunnerSwitch Gets a value which indicates a runner switch which can be used to explicitly enable the runner. If the return value is null, then the reported can only be environmentally enabled (implicitly). This value is used either as a command line switch (with the console or .NET CLI runner) or as a runner configuration value (with the MSBuild runner). public string? RunnerSwitch { get; } Property Value string Remarks Runner switches are only used in xUnit.net native CLI mode. When Microsoft Testing Platform CLI mode is enabled, reporters are only supported via environmental enablement, since MTP generally controls all the normal output. Methods CreateMessageHandler(IRunnerLogger, IMessageSink?) Creates a message handler that will report messages for the given test assembly. public ValueTask<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink? diagnosticMessageSink) Parameters logger IRunnerLogger The logger used to send result messages to diagnosticMessageSink IMessageSink An optional message sink that diagnostic messages can be sent to. Returns ValueTask<IRunnerReporterMessageHandler> The message handler that handles the messages"
  },
  "v3/2.0.0/Xunit.Runner.Common.VstsReporterMessageHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.VstsReporterMessageHandler.html",
    "title": "Class VstsReporterMessageHandler | xunit",
    "summary": "Class VstsReporterMessageHandler Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll An implementation of IRunnerReporterMessageHandler that supports VstsReporter. public class VstsReporterMessageHandler : DefaultRunnerReporterMessageHandler, IRunnerReporterMessageHandler, IMessageSink, IAsyncDisposable Inheritance object AggregateMessageSink TestMessageSink DefaultRunnerReporterMessageHandler VstsReporterMessageHandler Implements IRunnerReporterMessageHandler IMessageSink IAsyncDisposable Inherited Members DefaultRunnerReporterMessageHandler.EnvVar_HidePassingOutput DefaultRunnerReporterMessageHandler.Logger DefaultRunnerReporterMessageHandler.MetadataCache DefaultRunnerReporterMessageHandler.Escape(string) DefaultRunnerReporterMessageHandler.EscapeMultiLineIndent(string, string) DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(XunitProjectAssembly) DefaultRunnerReporterMessageHandler.GetExecutionOptions(string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string) DefaultRunnerReporterMessageHandler.LogError(IErrorMetadata, string, params object[]) DefaultRunnerReporterMessageHandler.LogStackTrace(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogOutput(StackFrameInfo, string) DefaultRunnerReporterMessageHandler.LogWarnings(StackFrameInfo, string[]) DefaultRunnerReporterMessageHandler.HandleErrorMessage(MessageHandlerArgs<IErrorMessage>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs<TestAssemblyDiscoveryFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs<TestAssemblyDiscoveryStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionFinished(MessageHandlerArgs<TestAssemblyExecutionFinished>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionStarting(MessageHandlerArgs<TestAssemblyExecutionStarting>) DefaultRunnerReporterMessageHandler.HandleTestAssemblyCleanupFailure(MessageHandlerArgs<ITestAssemblyCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCaseCleanupFailure(MessageHandlerArgs<ITestCaseCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCaseFinished(MessageHandlerArgs<ITestCaseFinished>) DefaultRunnerReporterMessageHandler.HandleTestCaseStarting(MessageHandlerArgs<ITestCaseStarting>) DefaultRunnerReporterMessageHandler.HandleTestClassCleanupFailure(MessageHandlerArgs<ITestClassCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestClassFinished(MessageHandlerArgs<ITestClassFinished>) DefaultRunnerReporterMessageHandler.HandleTestClassStarting(MessageHandlerArgs<ITestClassStarting>) DefaultRunnerReporterMessageHandler.HandleTestCleanupFailure(MessageHandlerArgs<ITestCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionCleanupFailure(MessageHandlerArgs<ITestCollectionCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestCollectionFinished(MessageHandlerArgs<ITestCollectionFinished>) DefaultRunnerReporterMessageHandler.HandleTestCollectionStarting(MessageHandlerArgs<ITestCollectionStarting>) DefaultRunnerReporterMessageHandler.HandleTestExecutionSummaries(MessageHandlerArgs<TestExecutionSummaries>) DefaultRunnerReporterMessageHandler.HandleTestFinished(MessageHandlerArgs<ITestFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodCleanupFailure(MessageHandlerArgs<ITestMethodCleanupFailure>) DefaultRunnerReporterMessageHandler.HandleTestMethodFinished(MessageHandlerArgs<ITestMethodFinished>) DefaultRunnerReporterMessageHandler.HandleTestMethodStarting(MessageHandlerArgs<ITestMethodStarting>) DefaultRunnerReporterMessageHandler.HandleTestOutput(MessageHandlerArgs<ITestOutput>) DefaultRunnerReporterMessageHandler.WriteDefaultSummary(IRunnerLogger, TestExecutionSummaries) TestMessageSink.Diagnostics TestMessageSink.Discovery TestMessageSink.Execution TestMessageSink.Runner AggregateMessageSink.AggregatedSinks AggregateMessageSink.GetOrCreateAggregatedSink<TDispatcher>(ref TDispatcher) AggregateMessageSink.OnMessage(IMessageSinkMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Initializes a new instance of the VstsReporterMessageHandler class. Constructors VstsReporterMessageHandler(IRunnerLogger, string, string, int) An implementation of IRunnerReporterMessageHandler that supports VstsReporter. public VstsReporterMessageHandler(IRunnerLogger logger, string baseUri, string accessToken, int buildId) Parameters logger IRunnerLogger The logger used to report messages baseUri string The base URI for talking to Azure DevOps/VSTS accessToken string The access token required to talk to Azure DevOps/VSTS buildId int The ID of build that's currently being run Remarks Initializes a new instance of the VstsReporterMessageHandler class. Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public override ValueTask DisposeAsync() Returns ValueTask HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished>) Called when ITestAssemblyFinished is raised. protected override void HandleTestAssemblyFinished(MessageHandlerArgs<ITestAssemblyFinished> args) Parameters args MessageHandlerArgs<ITestAssemblyFinished> An object that contains the event data. HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting>) Called when ITestAssemblyStarting is raised. protected override void HandleTestAssemblyStarting(MessageHandlerArgs<ITestAssemblyStarting> args) Parameters args MessageHandlerArgs<ITestAssemblyStarting> An object that contains the event data. HandleTestFailed(MessageHandlerArgs<ITestFailed>) Called when ITestFailed is raised. protected override void HandleTestFailed(MessageHandlerArgs<ITestFailed> args) Parameters args MessageHandlerArgs<ITestFailed> An object that contains the event data. HandleTestPassed(MessageHandlerArgs<ITestPassed>) Called when ITestPassed is raised. protected override void HandleTestPassed(MessageHandlerArgs<ITestPassed> args) Parameters args MessageHandlerArgs<ITestPassed> An object that contains the event data. HandleTestSkipped(MessageHandlerArgs<ITestSkipped>) Called when ITestSkipped is raised. protected override void HandleTestSkipped(MessageHandlerArgs<ITestSkipped> args) Parameters args MessageHandlerArgs<ITestSkipped> An object that contains the event data. HandleTestStarting(MessageHandlerArgs<ITestStarting>) Called when ITestStarting is raised. protected override void HandleTestStarting(MessageHandlerArgs<ITestStarting> args) Parameters args MessageHandlerArgs<ITestStarting> An object that contains the event data."
  },
  "v3/2.0.0/Xunit.Runner.Common.XunitFilters.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.XunitFilters.html",
    "title": "Class XunitFilters | xunit",
    "summary": "Class XunitFilters Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents the ability to track query filters or simple filters. Any attempt to add a mix of the two will result in an exception. public class XunitFilters : ITestCaseFilter Inheritance object XunitFilters Implements ITestCaseFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Empty Gets a flag indicating whether there are any active filters. public bool Empty { get; } Property Value bool Methods AddExcludedClassFilter(string) Adds a simple filter which excludes a fully qualified class name. public void AddExcludedClassFilter(string query) Parameters query string Remarks The query may begin and/or end with * to add as a wildcard. No other wildcards are permitted in any other locations. AddExcludedMethodFilter(string) public void AddExcludedMethodFilter(string query) Parameters query string AddExcludedNamespaceFilter(string) public void AddExcludedNamespaceFilter(string query) Parameters query string AddExcludedTraitFilter(string, string) public void AddExcludedTraitFilter(string name, string value) Parameters name string value string AddIncludedClassFilter(string) Adds a simple filter matching a fully qualified class name. public void AddIncludedClassFilter(string query) Parameters query string Remarks The query may begin and/or end with * to add as a wildcard. No other wildcards are permitted in any other locations. AddIncludedMethodFilter(string) public void AddIncludedMethodFilter(string query) Parameters query string AddIncludedNamespaceFilter(string) public void AddIncludedNamespaceFilter(string query) Parameters query string AddIncludedTraitFilter(string, string) public void AddIncludedTraitFilter(string name, string value) Parameters name string value string AddQueryFilter(string) Adds a query filter. public void AddQueryFilter(string query) Parameters query string Remarks For more information on the query syntax, see https://xunit.net/docs/query-filter-language Filter(string, ITestCaseMetadata) Determines whether the given testCase passes the filter. public bool Filter(string assemblyName, ITestCaseMetadata testCase) Parameters assemblyName string The simple assembly name without file extension testCase ITestCaseMetadata The test case to be checked against the filter Returns bool ToXunit3Arguments() Gets the command-line arguments to pass to an xUnit.net v3 test assembly to perform the filtering contained within this filter. public IReadOnlyCollection<string> ToXunit3Arguments() Returns IReadOnlyCollection<string>"
  },
  "v3/2.0.0/Xunit.Runner.Common.XunitProject.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.XunitProject.html",
    "title": "Class XunitProject | xunit",
    "summary": "Class XunitProject Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents a project which contains zero or more test assemblies, as well as global (cross-assembly) configuration settings. public class XunitProject Inheritance object XunitProject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Assemblies Gets the assemblies that are in the project. public ICollection<XunitProjectAssembly> Assemblies { get; } Property Value ICollection<XunitProjectAssembly> Configuration Gets the configuration values for the test project. public TestProjectConfiguration Configuration { get; } Property Value TestProjectConfiguration HasRunnerReporter Gets a flag indicating whether RunnerReporter has been set yet or not. public bool HasRunnerReporter { get; } Property Value bool RunnerReporter Gets or sets the runner reporter. public IRunnerReporter RunnerReporter { get; set; } Property Value IRunnerReporter Methods Add(XunitProjectAssembly) Adds an assembly to the project. public void Add(XunitProjectAssembly assembly) Parameters assembly XunitProjectAssembly The assembly to add to the project."
  },
  "v3/2.0.0/Xunit.Runner.Common.XunitProjectAssembly.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.XunitProjectAssembly.html",
    "title": "Class XunitProjectAssembly | xunit",
    "summary": "Class XunitProjectAssembly Namespace Xunit.Runner.Common Assembly xunit.v3.runner.common.dll Represents an assembly in an XunitProject. public class XunitProjectAssembly Inheritance object XunitProjectAssembly Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitProjectAssembly(XunitProject, string, AssemblyMetadata) Represents an assembly in an XunitProject. public XunitProjectAssembly(XunitProject project, string assemblyFileName, AssemblyMetadata assemblyMetadata) Parameters project XunitProject The project this assembly belongs to. assemblyFileName string The assembly filename assemblyMetadata AssemblyMetadata The assembly metadata Properties Assembly Gets or sets the assembly under test. May be null when the test assembly is not loaded into the current AppDomain. public Assembly? Assembly { get; set; } Property Value Assembly AssemblyDisplayName Gets the assembly display name. public string AssemblyDisplayName { get; } Property Value string AssemblyFileName Gets or sets the assembly file name. public string AssemblyFileName { get; set; } Property Value string AssemblyMetadata Gets or sets the metadata about the assembly. public AssemblyMetadata AssemblyMetadata { get; set; } Property Value AssemblyMetadata ConfigFileName Gets or sets the config file name. public string? ConfigFileName { get; set; } Property Value string Configuration Gets the configuration values for the test assembly. public TestAssemblyConfiguration Configuration { get; } Property Value TestAssemblyConfiguration Identifier Gets an identifier for the current assembly. This is guaranteed to be unique, but not necessarily repeatable across runs (because it relies on GetHashCode()). public string Identifier { get; } Property Value string Project Gets the project that this project assembly belongs to. public XunitProject Project { get; } Property Value XunitProject TestCasesToRun Gets a list of serialized test cases to be run. If the list is empty, then all test cases (that match the filters) will be run. public List<string> TestCasesToRun { get; } Property Value List<string>"
  },
  "v3/2.0.0/Xunit.Runner.Common.html": {
    "href": "v3/2.0.0/Xunit.Runner.Common.html",
    "title": "Namespace Xunit.Runner.Common | xunit",
    "summary": "Namespace Xunit.Runner.Common Classes AfterTestFinished Default implementation of IAfterTestFinished. AfterTestStarting Default implementation of IAfterTestStarting. AggregateMessageSink An implementation of IMessageSink which dispatches messages to one or more individual message sinks. AppVeyorReporter An implementation of IRunnerReporter that reports results to AppVeyor. This is auto-enabled by the presence of the \"APPVEYOR_API_URL\" environment variable, which points to the AppVeyor API endpoint that is used to report tests. It has no switch for manual enablement, since the API endpoint is required. AppVeyorReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports AppVeyorReporter. AssemblyMetadata Represents metadata about an assembly. BeforeTestFinished Default implementation of IBeforeTestFinished. BeforeTestStarting Default implementation of IBeforeTestStarting. ConfigReader This class is used to read configuration information for a test assembly. ConfigReader_Configuration This class is used to read configuration information for a test assembly. ConfigReader_Json This class is used to read JSON-based configuration information for a test assembly. ConfigUtility Utilities for reading configuration values. ConsoleDiagnosticMessageSink Logs diagnostic messages to the system console. ConsoleHelper This class helps write colored text to the console. On Windows, it will use the built-in console functions; on Linux and macOS, it will use ANSI color codes. ConsoleProjectLister Helper class to list project contents out to Console. ConsoleRunnerLogger An implementation of IRunnerLogger which logs messages to a TextWriter (typically the one from Out). DefaultRunnerReporter The default implementation of IRunnerReporter, used by runners when there is no other overridden reporter. It returns an instance of DefaultRunnerReporterMessageHandler. DefaultRunnerReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports DefaultRunnerReporter. DiagnosticEventSink Class that maps diagnostic messages to events. DiagnosticMessage Default implementation of IDiagnosticMessage. DiscoveryComplete Default implementation of IDiscoveryComplete. DiscoveryEventSink Class that maps test framework discovery messages to events. DiscoveryStarting Default implementation of IDiscoveryStarting. ErrorMessage Default implementation of IErrorMessage. ExecutionEventSink Class that maps test framework execution messages to events. ExecutionSink This is the execution sink which most runners will use, which can perform several operations (including recording XML results, detecting long running tests, failing skipped tests, failing tests with warnings, and converting the top-level discovery and execution messages into their runner counterparts). ExecutionSinkOptions These are the options used when creating ExecutionSink. This is set up as an options class so that new options can be added without breaking binary compatibility. ExecutionSummary Collects execution totals for a group of test cases. IRunnerLoggerExtensions Extensions methods for IRunnerLogger. InternalDiagnosticMessage Default implementation of IInternalDiagnosticMessage. JsonReporter An implementation of IRunnerReporter that reports results as individual JSON objects on the console. JsonReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports JsonReporter. LongRunningTestsSummary Represents information about long running tests from ExecutionSink. MessageHandlerArgs Allows cancellation during message handling. MessageHandlerArgs<TMessage> Wraps a message with the ability to cancel execution. MessageMetadataCache Caches message metadata for xUnit.net v3 messages. The metadata which is cached depends on the message that is passed (for example, looking up with an ITestAssemblyMessage will return an IAssemblyMetadata). Storage methods require the \"Starting\" versions of messages (as these are the ones which contain the metadata), and removal methods require the \"Finished\" versions of messages. MessageSinkMessage Default implementation of IMessageSinkMessage, with serialization and deserialization support. MessageSinkMessageDeserializer A class which understands how to deserialize IMessageSinkMessage instances that are decorated with JsonTypeIDAttribute. The built-in messages are registered by default, and additional messages can be registered via RegisterMessageSinkMessageType(Type). NullSourceInformationProvider A null implementation of ISourceInformationProvider which always returns empty source information. Get the singleton via Instance. QueryFilterParser This class is used to parse a graphy query. QuietReporter An implementation of IRunnerReporter that emits only error or warning messages. QuietReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports QuietReporter. RegisterRunnerReporterAttribute Used to decorate xUnit.net test assemblies to indicate the availability of a custom runner reporter. RegisteredRunnerReporters Utility class for enumerating the runner reporters registered for the given assembly. RunnerEventSink Class that maps test runner messages to events. SilentReporter An implementation of IRunnerReporter that does not report any messages. Typically only used in context with the VSTest adapter, to prevent double reporting of messages SilentReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports SilentReporter. StackFrameTransformer Transforms stack frames and stack traces into compiler-like output so they can be double-clicked in Visual Studio. TeamCityReporter An implementation of IRunnerReporter that reports results to TeamCity. This is auto-enabled by the presence of the \"TEAMCITY_PROJECT_NAME\" environment variable. TeamCityReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports TeamCityReporter. TestAssemblyCleanupFailure Default implementation of ITestAssemblyCleanupFailure. TestAssemblyConfiguration Represents the configuration items set in the configuration file of a test assembly. Should be read with the ConfigReader class. TestAssemblyDiscoveryFinished Reports that runner has just finished discovery for a test assembly. This message will arrive after the test framework's IDiscoveryComplete message, and contains the project metadata associated with the discovery. TestAssemblyDiscoveryStarting Reports that runner is about to start discovery for a test assembly. This message will arrive before the test framework's Xunit.DiscoveryStarting message, and contains the project metadata associated with the discovery. TestAssemblyExecutionFinished Reports that runner is about to start execution for a test assembly. This message will arrive after the test framework's ITestAssemblyFinished message, and contains the project metadata associated with the execution. TestAssemblyExecutionStarting Reports that runner is about to start execution for a test assembly. This message will arrive before the test framework's ITestAssemblyStarting message, and contains the project metadata associated with the discovery. TestAssemblyFinished Default implementation of ITestAssemblyFinished. TestAssemblyMessage Default implementation of ITestAssemblyMessage. TestAssemblyStarting Default implementation of ITestAssemblyStarting. TestCaseCleanupFailure Default implementation of ITestCaseCleanupFailure. TestCaseDiscovered Default implementation of ITestCaseDiscovered. TestCaseFinished Default implementation of ITestCaseFinished. TestCaseMessage Default implementation of ITestCaseMessage. TestCaseStarting Default implementation of ITestCaseStarting. TestClassCleanupFailure Default implementation of ITestClassCleanupFailure. TestClassConstructionFinished Default implementation of ITestClassConstructionFinished. TestClassConstructionStarting Default implementation of ITestClassConstructionStarting. TestClassDisposeFinished Default implementation of ITestClassDisposeFinished. TestClassDisposeStarting Default implementation of ITestClassDisposeStarting. TestClassFinished Default implementation of ITestClassFinished TestClassMessage Default implementation of ITestClassMessage. TestClassStarting Default implementation of ITestClassStarting. TestCleanupFailure Default implementation of ITestCleanupFailure. TestCollectionCleanupFailure Default implementation of ITestCollectionCleanupFailure. TestCollectionFinished Default implementation of ITestCollectionFinished. TestCollectionMessage Default implementation of ITestCollectionMessage. TestCollectionStarting Default implementation of ITestCollectionStarting. TestDiscoverySink An implementation of IMessageSink designed for test discovery for a single test assembly. The Finished event is triggered when discovery is complete. TestExecutionSummaries Reports multi-assembly test execution summary information. TestFailed Default implementation of ITestFailed. TestFinished Default implementation of ITestFinished. TestFrameworkOptions Represents options passed to a test framework for discovery or execution. TestMessage Default implementation of ITestMessage. TestMessageSink An implementation of IMessageSink that provides access to events for all levels of reporting. TestMethodCleanupFailure Default implementation of ITestMethodCleanupFailure. TestMethodFinished Default implementation of ITestMethodFinished. TestMethodMessage Default implementation of ITestMethodMessage. TestMethodStarting Default implementation of ITestMethodStarting. TestNotRun Default implementation of ITestNotRun. TestOutput Default implementation of ITestOutput. TestPassed Default implementation of ITestPassed. TestProjectConfiguration Represents the configuration settings for a test runner which are independent of the test assembly. Are usually passed via command line or some other equivalent mechanism. Accessed via XunitProject.Configuration. TestResultMessage Default implementation of ITestResultMessage. TestSkipped Default implementation of ITestSkipped. TestStarting Default implementation of ITestStarting. Transform Represents a single report transformation from XML. TransformFactory Used to retrieve a list of available VerboseReporter An implementation of IRunnerReporter that supplements the default reporter behavior by printing out the start and finish of each executing test. VerboseReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports VerboseReporter. VstsReporter An implementation of IRunnerReporter that reports results to Azure DevOps/VSTS. This is auto-enabled by the presence of four required environment variables: \"VSTS_ACCESS_TOKEN\", \"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI\", \"SYSTEM_TEAMPROJECT\", and \"BUILD_BUILDID\". VstsReporterMessageHandler An implementation of IRunnerReporterMessageHandler that supports VstsReporter. XunitFilters Represents the ability to track query filters or simple filters. Any attempt to add a mix of the two will result in an exception. XunitProject Represents a project which contains zero or more test assemblies, as well as global (cross-assembly) configuration settings. XunitProjectAssembly Represents an assembly in an XunitProject. Structs SourceInformation Source information returned by ISourceInformationProvider. StackFrameInfo Represents the top of a stack frame, typically taken from an exception or failure information. Interfaces IRegisterRunnerReporterAttribute Used to decorate xUnit.net test assemblies to indicate the availability of a custom runner reporter. IRunnerLogger Interface implemented by runners, passed to IRunnerReporter, so that the report can log lines of text to the output device. IRunnerReporter This interface represents a reporter which is invoked by a test runner during test execution. The report can be explicitly invoked by a command line switch or implicitly invoked by being environmentally enabled (for example, a reporter that emits messages for TeamCity). IRunnerReporterMessageHandler Indicates a message sink that's designed for use with runner reporters. In particular, this allows runner reporters to implement IAsyncDisposable and forces runners to dispose of the message handler that's returned to them. ISourceInformationProvider Represents a provider which gives source line information for a test case after discovery has completed. This is typically provided by a third party runner (for example, the VSTest plugin provides this via DiaSession from Visual Studio). It's used to supplement test case metadata when the discovery process itself cannot provide source file and line information. ITestCaseFilter Represents a filter run against a test case (and the associated assembly it resides in). Enums AppDomainOption Indicates the current level of app domain support that's in effect, for use by runner reporters. AppDomainSupport Indicates the level of app domain support that the runner is requesting. Note that these values are only valid for v1 and v2 tests; v3 tests always run in a separate process rather than in the runner process. ListFormat Designates the format that the test list should take. ListOption Indicates the kind of list a runner should generate, rather than running tests. ParallelismOption Represents available parallelism options TargetFrameworkIdentifier Represents the target framework identifier that an assembly is targeting Delegates MessageHandler<TMessage> Represents a handler for a message, which includes the ability to signal that tests should stop running."
  },
  "v3/2.0.0/Xunit.Runner.v1.IXunit1Executor.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.IXunit1Executor.html",
    "title": "Interface IXunit1Executor | xunit",
    "summary": "Interface IXunit1Executor Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll Represents a wrapper around the Executor class from xUnit.net v1. public interface IXunit1Executor : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestFrameworkDisplayName Gets the display name of the test framework. string TestFrameworkDisplayName { get; } Property Value string Methods EnumerateTests(ICallbackEventHandler?) Enumerates the tests in the assembly. void EnumerateTests(ICallbackEventHandler? handler) Parameters handler ICallbackEventHandler The optional callback handler used to return information. RunTests(string, List<string>, ICallbackEventHandler) Runs the tests in a class. void RunTests(string type, List<string> methods, ICallbackEventHandler handler) Parameters type string The class to run. methods List<string> The methods in the class to run. handler ICallbackEventHandler The callback handler used to return information."
  },
  "v3/2.0.0/Xunit.Runner.v1.TestClassCallbackHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.TestClassCallbackHandler.html",
    "title": "Class TestClassCallbackHandler | xunit",
    "summary": "Class TestClassCallbackHandler Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll A handler that dispatches v1 Executor messages from running a test class. public class TestClassCallbackHandler : XmlNodeCallbackHandler, ICallbackEventHandler Inheritance object MarshalByRefObject XmlNodeCallbackHandler TestClassCallbackHandler Implements ICallbackEventHandler Inherited Members XmlNodeCallbackHandler.LastNode XmlNodeCallbackHandler.LastNodeArrived XmlNodeCallbackHandler.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestClassCallbackHandler(IList<Xunit1TestCase>, IMessageSink) Initializes a new instance of the TestClassCallbackHandler class. public TestClassCallbackHandler(IList<Xunit1TestCase> testCases, IMessageSink messageSink) Parameters testCases IList<Xunit1TestCase> The test cases that are being run. messageSink IMessageSink The message sink to call with the translated results. Properties TestClassResults Gets the test class results, after the execution has completed. public Xunit1RunSummary TestClassResults { get; } Property Value Xunit1RunSummary Methods OnXmlNode(XmlNode?) Called when an XML node arrives. Dispatches the XML node to the callback. public override bool OnXmlNode(XmlNode? node) Parameters node XmlNode The arriving XML node. Returns bool Return true to continue running tests; false to stop running tests."
  },
  "v3/2.0.0/Xunit.Runner.v1.XmlNodeCallbackHandler.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.XmlNodeCallbackHandler.html",
    "title": "Class XmlNodeCallbackHandler | xunit",
    "summary": "Class XmlNodeCallbackHandler Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll An implementation of ICallbackEventHandler used to translate v1 Executor XML messages. public class XmlNodeCallbackHandler : MarshalByRefObject, ICallbackEventHandler Inheritance object MarshalByRefObject XmlNodeCallbackHandler Implements ICallbackEventHandler Derived TestClassCallbackHandler Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Initializes a new instance of the XmlNodeCallbackHandler class. Constructors XmlNodeCallbackHandler(Predicate<XmlNode?>?, string?) An implementation of ICallbackEventHandler used to translate v1 Executor XML messages. public XmlNodeCallbackHandler(Predicate<XmlNode?>? callback = null, string? lastNodeName = null) Parameters callback Predicate<XmlNode> The callback to call when each XML node arrives. lastNodeName string The name of the expected final XML node, which triggers LastNodeArrived. Remarks Initializes a new instance of the XmlNodeCallbackHandler class. Properties LastNode Gets the last node that was sent. public XmlNode? LastNode { get; protected set; } Property Value XmlNode LastNodeArrived Gets an event that is triggered when the last node has arrived. public ManualResetEvent LastNodeArrived { get; protected set; } Property Value ManualResetEvent Methods InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission. OnXmlNode(XmlNode?) Called when an XML node arrives. Dispatches the XML node to the callback. public virtual bool OnXmlNode(XmlNode? node) Parameters node XmlNode The arriving XML node. Returns bool Return true to continue running tests; false to stop running tests."
  },
  "v3/2.0.0/Xunit.Runner.v1.Xunit1.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.Xunit1.html",
    "title": "Class Xunit1 | xunit",
    "summary": "Class Xunit1 Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll This class is used to do discovery and execution of xUnit.net v1 tests. Runner authors are strongly encouraged to use XunitFrontController instead of using this class directly. public class Xunit1 : IFrontController, IFrontControllerDiscoverer, IAsyncDisposable Inheritance object Xunit1 Implements IFrontController IFrontControllerDiscoverer IAsyncDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit1(IMessageSink, AppDomainSupport, ISourceInformationProvider, string, string?, bool, string?) This constructor is used by factory methods and unit tests only. protected Xunit1(IMessageSink diagnosticMessageSink, AppDomainSupport appDomainSupport, ISourceInformationProvider sourceInformationProvider, string assemblyFileName, string? configFileName = null, bool shadowCopy = true, string? shadowCopyFolder = null) Parameters diagnosticMessageSink IMessageSink appDomainSupport AppDomainSupport sourceInformationProvider ISourceInformationProvider assemblyFileName string configFileName string shadowCopy bool shadowCopyFolder string Properties CanUseAppDomains Gets a flag indicating whether this discovery/execution can use app domains. public bool CanUseAppDomains { get; } Property Value bool TargetFramework Gets the target framework that the test assembly is linked against. public string TargetFramework { get; } Property Value string TestAssemblyUniqueID Gets the unique ID for the test assembly provided to the discoverer. public string TestAssemblyUniqueID { get; } Property Value string TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public string TestFrameworkDisplayName { get; } Property Value string Methods CreateExecutor() Creates a wrapper to call the Executor call from xUnit.net v1. protected virtual IXunit1Executor CreateExecutor() Returns IXunit1Executor The executor wrapper. DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask Find(IMessageSink, bool, Predicate<ITestCaseDiscovered>?) INTERNAL METHOD, FOR TESTING PURPOSES ONLY. DO NOT CALL. protected void Find(IMessageSink messageSink, bool includeSourceInformation, Predicate<ITestCaseDiscovered>? filter) Parameters messageSink IMessageSink includeSourceInformation bool filter Predicate<ITestCaseDiscovered> Find(IMessageSink, FrontControllerFindSettings) Starts the process of finding tests in an assembly. Typically only used by runners which discover tests and present them into a UI for the user to interactively choose for selective run (via Run(IMessageSink, FrontControllerRunSettings)). For runners which simply wish to discover and immediately run tests, they should instead use FindAndRun(IMessageSink, FrontControllerFindAndRunSettings), which permits the same filtering logic as this method. public void Find(IMessageSink messageSink, FrontControllerFindSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindSettings The settings used during discovery. FindAndRun(IMessageSink, bool, Predicate<ITestCaseDiscovered>?, bool) INTERNAL METHOD, FOR TESTING PURPOSES ONLY. DO NOT CALL. protected void FindAndRun(IMessageSink messageSink, bool includeSourceInformation, Predicate<ITestCaseDiscovered>? filter, bool markAllAsNotRun) Parameters messageSink IMessageSink includeSourceInformation bool filter Predicate<ITestCaseDiscovered> markAllAsNotRun bool FindAndRun(IMessageSink, FrontControllerFindAndRunSettings) Starts the process of finding and running tests in an assembly. Typically only used by runner which do not present test discovery UIs to users that allow them to run selected tests (those should instead use Find(IMessageSink, FrontControllerFindSettings) and Run(IMessageSink, FrontControllerRunSettings) as separate operations). public void FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindAndRunSettings The settings used during discovery and execution. ForDiscoveryAndExecution(XunitProjectAssembly, ISourceInformationProvider?, IMessageSink?) Returns an implementation of IFrontController which can be used for both discovery and execution of xUnit.net v1 tests. public static IFrontController ForDiscoveryAndExecution(XunitProjectAssembly projectAssembly, ISourceInformationProvider? sourceInformationProvider = null, IMessageSink? diagnosticMessageSink = null) Parameters projectAssembly XunitProjectAssembly The test project assembly. sourceInformationProvider ISourceInformationProvider The optional source information provider. diagnosticMessageSink IMessageSink The optional message sink which receives IDiagnosticMessage and IInternalDiagnosticMessage messages. Returns IFrontController Run(IReadOnlyCollection<Xunit1TestCase>, IMessageSink, bool) INTERNAL METHOD, FOR TESTING PURPOSES ONLY. DO NOT CALL. protected void Run(IReadOnlyCollection<Xunit1TestCase> testCases, IMessageSink messageSink, bool markAllAsNotRun) Parameters testCases IReadOnlyCollection<Xunit1TestCase> messageSink IMessageSink markAllAsNotRun bool Run(IMessageSink, FrontControllerRunSettings) Starts the process of running selected tests in the assembly. The serialized test cases to run come from calling Find(IMessageSink, FrontControllerFindSettings). public void Run(IMessageSink messageSink, FrontControllerRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerRunSettings The settings used during execution."
  },
  "v3/2.0.0/Xunit.Runner.v1.Xunit1Executor.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.Xunit1Executor.html",
    "title": "Class Xunit1Executor | xunit",
    "summary": "Class Xunit1Executor Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll Default implementation of IXunit1Executor. Creates a remote app domain for the test assembly to be loaded into. Disposing of the executor releases the app domain. public class Xunit1Executor : IXunit1Executor, IDisposable Inheritance object Xunit1Executor Implements IXunit1Executor IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit1Executor(IMessageSink, bool, string, string?, bool, string?) Initializes a new instance of the Xunit1Executor class. public Xunit1Executor(IMessageSink diagnosticMessageSink, bool useAppDomain, string testAssemblyFileName, string? configFileName = null, bool shadowCopy = true, string? shadowCopyFolder = null) Parameters diagnosticMessageSink IMessageSink The message sink which receives IDiagnosticMessage and IInternalDiagnosticMessage messages. useAppDomain bool Determines whether tests should be run in a separate app domain. testAssemblyFileName string The filename of the test assembly. configFileName string The filename of the configuration file. shadowCopy bool Set to true to enable shadow copying the assemblies. shadowCopyFolder string The path on disk to use for shadow copying; if null, a folder will be automatically (randomly) generated Properties TestFrameworkDisplayName Gets the display name of the test framework. public string TestFrameworkDisplayName { get; } Property Value string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() EnumerateTests(ICallbackEventHandler?) Enumerates the tests in the assembly. public void EnumerateTests(ICallbackEventHandler? handler) Parameters handler ICallbackEventHandler The optional callback handler used to return information. RunTests(string, List<string>, ICallbackEventHandler) Runs the tests in a class. public void RunTests(string type, List<string> methods, ICallbackEventHandler handler) Parameters type string The class to run. methods List<string> The methods in the class to run. handler ICallbackEventHandler The callback handler used to return information."
  },
  "v3/2.0.0/Xunit.Runner.v1.Xunit1RunSummary.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.Xunit1RunSummary.html",
    "title": "Class Xunit1RunSummary | xunit",
    "summary": "Class Xunit1RunSummary Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll Collects statistics from running tests. public class Xunit1RunSummary Inheritance object Xunit1RunSummary Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Continue A flag that indicates whether or not to continue running tests. public bool Continue Field Value bool Failed The number of tests that failed. public int Failed Field Value int NotRun The number of tests that were not run. public int NotRun Field Value int Skipped The number of tests that were skipped. public int Skipped Field Value int Time The time spent running the tests. public decimal Time Field Value decimal Total The total number of tests run. public int Total Field Value int Methods Aggregate(Xunit1RunSummary) Aggregates the current results with the other results. public void Aggregate(Xunit1RunSummary other) Parameters other Xunit1RunSummary The other result. Reset() Resets the counted results back to zero. public void Reset()"
  },
  "v3/2.0.0/Xunit.Runner.v1.Xunit1TestCase.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.Xunit1TestCase.html",
    "title": "Class Xunit1TestCase | xunit",
    "summary": "Class Xunit1TestCase Namespace Xunit.Runner.v1 Assembly xunit.v3.runner.utility.netfx.dll Contains the data required to serialize a test case for xUnit.net v1. public sealed class Xunit1TestCase : IXunitSerializable Inheritance object Xunit1TestCase Implements IXunitSerializable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit1TestCase() Initializes a new instance of the Xunit1TestCase class. public Xunit1TestCase() Properties AssemblyUniqueID Deserialization constructor. public string AssemblyUniqueID { get; set; } Property Value string SkipReason Gets the reason this test is being skipped; will return null when the test is not skipped. public string? SkipReason { get; set; } Property Value string SourceFilePath Gets the source file path of the test method, if known. public string? SourceFilePath { get; set; } Property Value string SourceLineNumber Gets the source line number of the test method, if known. public int? SourceLineNumber { get; set; } Property Value int? TestCaseDisplayName Gets the display name for the test case. public string TestCaseDisplayName { get; set; } Property Value string TestCaseUniqueID Gets the unique ID for the test case. public string TestCaseUniqueID { get; set; } Property Value string TestClass Gets the fully qualified type name of the test class. public string TestClass { get; set; } Property Value string TestClassUniqueID Gets the unique ID for the test class. public string TestClassUniqueID { get; set; } Property Value string TestCollectionUniqueID Gets the unique ID of the test collection. public string TestCollectionUniqueID { get; set; } Property Value string TestMethod Gets the name of the test method. public string TestMethod { get; set; } Property Value string TestMethodUniqueID Gets the unique ID of the test method. public string TestMethodUniqueID { get; set; } Property Value string Traits Gets the traits that are associated with this test case. public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods ToTestCaseDiscovered(bool) Converts the test case to ITestCaseDiscovered, with optional serialization of the test case. public ITestCaseDiscovered ToTestCaseDiscovered(bool includeSerialization) Parameters includeSerialization bool A flag to indicate whether serialization is needed. Returns ITestCaseDiscovered ToTestCaseFinished(Xunit1RunSummary) Converts the test case to ITestCaseFinished. public ITestCaseFinished ToTestCaseFinished(Xunit1RunSummary testCaseResults) Parameters testCaseResults Xunit1RunSummary Returns ITestCaseFinished ToTestCaseFinishedNotRun() Converts the test case to ITestCaseFinished for a not-run test case. public ITestCaseFinished ToTestCaseFinishedNotRun() Returns ITestCaseFinished ToTestCaseStarting() Converts the test case to ITestCaseStarting. public ITestCaseStarting ToTestCaseStarting() Returns ITestCaseStarting ToTestFailed(decimal, string, XmlNode, int) Converts the test case to ITestFailed. public ITestFailed ToTestFailed(decimal executionTime, string output, XmlNode failure, int currentTestIndex) Parameters executionTime decimal output string failure XmlNode currentTestIndex int Returns ITestFailed ToTestFinished(decimal, string, int) Converts the test case to ITestFinished. public ITestFinished ToTestFinished(decimal executionTime, string output, int currentTestIndex) Parameters executionTime decimal output string currentTestIndex int Returns ITestFinished ToTestFinishedNotRun(int) Converts the test case to ITestFinished for a not-run test. public ITestFinished ToTestFinishedNotRun(int currentTestIndex) Parameters currentTestIndex int Returns ITestFinished ToTestMethodFinished(Xunit1RunSummary) Converts the test case to ITestMethodFinished. public ITestMethodFinished ToTestMethodFinished(Xunit1RunSummary testMethodResults) Parameters testMethodResults Xunit1RunSummary Returns ITestMethodFinished ToTestMethodFinishedNotRun() Converts the test case to ITestMethodFinished for a not-run test. public ITestMethodFinished ToTestMethodFinishedNotRun() Returns ITestMethodFinished ToTestMethodStarting() Converts the test case to ITestMethodStarting. public ITestMethodStarting ToTestMethodStarting() Returns ITestMethodStarting ToTestNotRun(int) Converts the test case to ITestNotRun. public ITestNotRun ToTestNotRun(int currentTestIndex) Parameters currentTestIndex int Returns ITestNotRun ToTestOutput(string, int) Converts the test case to ITestOutput. public ITestOutput ToTestOutput(string output, int currentTestIndex) Parameters output string currentTestIndex int Returns ITestOutput ToTestPassed(decimal, string, int) Converts the test case to ITestPassed. public ITestPassed ToTestPassed(decimal executionTime, string output, int currentTestIndex) Parameters executionTime decimal output string currentTestIndex int Returns ITestPassed ToTestSkipped(string, int) Converts the test case to ITestSkipped. public ITestSkipped ToTestSkipped(string reason, int currentTestIndex) Parameters reason string currentTestIndex int Returns ITestSkipped ToTestStarting(string, int) Converts the test case to ITestStarting. public ITestStarting ToTestStarting(string testDisplayName, int currentTestIndex) Parameters testDisplayName string currentTestIndex int Returns ITestStarting"
  },
  "v3/2.0.0/Xunit.Runner.v1.html": {
    "href": "v3/2.0.0/Xunit.Runner.v1.html",
    "title": "Namespace Xunit.Runner.v1 | xunit",
    "summary": "Namespace Xunit.Runner.v1 Classes TestClassCallbackHandler A handler that dispatches v1 Executor messages from running a test class. XmlNodeCallbackHandler An implementation of ICallbackEventHandler used to translate v1 Executor XML messages. Xunit1 This class is used to do discovery and execution of xUnit.net v1 tests. Runner authors are strongly encouraged to use XunitFrontController instead of using this class directly. Xunit1Executor Default implementation of IXunit1Executor. Creates a remote app domain for the test assembly to be loaded into. Disposing of the executor releases the app domain. Xunit1RunSummary Collects statistics from running tests. Xunit1TestCase Contains the data required to serialize a test case for xUnit.net v1. Interfaces IXunit1Executor Represents a wrapper around the Executor class from xUnit.net v1."
  },
  "v3/2.0.0/Xunit.Runner.v2.IMessageSinkMessageWithTypes.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.IMessageSinkMessageWithTypes.html",
    "title": "Interface IMessageSinkMessageWithTypes | xunit",
    "summary": "Interface IMessageSinkMessageWithTypes Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll Identifies a message that can return its own type information. public interface IMessageSinkMessageWithTypes Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties InterfaceTypes Gets the interface type full names of the implemented interfaces. HashSet<string> InterfaceTypes { get; } Property Value HashSet<string>"
  },
  "v3/2.0.0/Xunit.Runner.v2.IMessageSinkWithTypes.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.IMessageSinkWithTypes.html",
    "title": "Interface IMessageSinkWithTypes | xunit",
    "summary": "Interface IMessageSinkWithTypes Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll Represents an endpoint for the reception of test messages. This endpoint can have the list of types of the message passed in to optimize the performance of message dispatching. public interface IMessageSinkWithTypes : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessageWithTypes(IMessageSinkMessage, HashSet<string>?) Reports the presence of a message on the message bus with an optional list of message types. This method should never throw exceptions. bool OnMessageWithTypes(IMessageSinkMessage message, HashSet<string>? messageTypes) Parameters message IMessageSinkMessage The message from the message bus. messageTypes HashSet<string> The list of message types, or null. Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2.html",
    "title": "Class Xunit2 | xunit",
    "summary": "Class Xunit2 Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll This class is used to do discovery and execution of xUnit.net v2 tests. Discovery can be source-based; execution requires a file-system based assembly. Runner authors are strongly encouraged to use XunitFrontController instead of using this class directly, unless you are doing source-based discovery of v2 tests. public class Xunit2 : IFrontController, IFrontControllerDiscoverer, IAsyncDisposable Inheritance object Xunit2 Implements IFrontController IFrontControllerDiscoverer IAsyncDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanUseAppDomains Gets a value indicating whether the tests can use app domains (must be linked against desktop execution library). public bool CanUseAppDomains { get; } Property Value bool DiagnosticMessageSink Gets the message sink used to report diagnostic messages. public IMessageSink DiagnosticMessageSink { get; } Property Value IMessageSink DisposalTracker Gets a tracker for disposable objects. protected DisposalTracker DisposalTracker { get; } Property Value DisposalTracker TargetFramework Gets the target framework that the test assembly is linked against. public string TargetFramework { get; } Property Value string TestAssemblyUniqueID Gets the unique ID for the test assembly provided to the discoverer. public string TestAssemblyUniqueID { get; protected set; } Property Value string TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public string TestFrameworkDisplayName { get; } Property Value string Methods CreateOptimizedRemoteMessageSink(IMessageSink, bool) Creates a high performance cross-AppDomain message sink that utilizes IMessageSinkWithTypes which can be passed to Xunit.Abstractions.ITestFrameworkDiscoverer and Xunit.Abstractions.ITestFrameworkExecutor. protected IMessageSink CreateOptimizedRemoteMessageSink(IMessageSink sink, bool serializeDiscoveredTestCases = true) Parameters sink IMessageSink The local message sink to receive the messages. serializeDiscoveredTestCases bool A flag which indicates whether test case serialization is required Returns IMessageSink DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask Find(IMessageSink, FrontControllerFindSettings) Starts the process of finding tests in an assembly. Typically only used by runners which discover tests and present them into a UI for the user to interactively choose for selective run (via Run(IMessageSink, FrontControllerRunSettings)). For runners which simply wish to discover and immediately run tests, they should instead use FindAndRun(IMessageSink, FrontControllerFindAndRunSettings), which permits the same filtering logic as this method. public void Find(IMessageSink messageSink, FrontControllerFindSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindSettings The settings used during discovery. FindAndRun(IMessageSink, FrontControllerFindAndRunSettings) Starts the process of finding and running tests in an assembly. Typically only used by runner which do not present test discovery UIs to users that allow them to run selected tests (those should instead use Find(IMessageSink, FrontControllerFindSettings) and Run(IMessageSink, FrontControllerRunSettings) as separate operations). public void FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindAndRunSettings The settings used during discovery and execution. ForDiscovery(IAssemblyInfo, XunitProjectAssembly, ISourceInformationProvider?, IMessageSink?, bool) Returns an implementation of IFrontControllerDiscoverer which can be used to discover xUnit.net v2 tests, including source-based discovery. public static IFrontControllerDiscoverer ForDiscovery(IAssemblyInfo assemblyInfo, XunitProjectAssembly projectAssembly, ISourceInformationProvider? sourceInformationProvider = null, IMessageSink? diagnosticMessageSink = null, bool verifyAssembliesOnDisk = true) Parameters assemblyInfo IAssemblyInfo The assembly to use for discovery projectAssembly XunitProjectAssembly The test project assembly. sourceInformationProvider ISourceInformationProvider The optional source information provider. diagnosticMessageSink IMessageSink The message sink which receives IDiagnosticMessage and IInternalDiagnosticMessage messages. verifyAssembliesOnDisk bool Determines whether or not to check for the existence of assembly files. Returns IFrontControllerDiscoverer ForDiscoveryAndExecution(XunitProjectAssembly, ISourceInformationProvider?, IMessageSink?, bool) Returns an implementation of IFrontController which can be used for both discovery and execution of xUnit.net v2 tests. public static IFrontController ForDiscoveryAndExecution(XunitProjectAssembly projectAssembly, ISourceInformationProvider? sourceInformationProvider = null, IMessageSink? diagnosticMessageSink = null, bool verifyAssembliesOnDisk = true) Parameters projectAssembly XunitProjectAssembly The test project assembly. sourceInformationProvider ISourceInformationProvider The optional source information provider. diagnosticMessageSink IMessageSink The message sink which receives IDiagnosticMessage and IInternalDiagnosticMessage messages. verifyAssembliesOnDisk bool Determines whether or not to check for the existence of assembly files. Returns IFrontController Run(IMessageSink, FrontControllerRunSettings) Starts the process of running selected tests in the assembly. The serialized test cases to run come from calling Find(IMessageSink, FrontControllerFindSettings). public void Run(IMessageSink messageSink, FrontControllerRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerRunSettings The settings used during execution."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2DiscoverySink.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2DiscoverySink.html",
    "title": "Class Xunit2DiscoverySink | xunit",
    "summary": "Class Xunit2DiscoverySink Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll An implementation of Xunit.Abstractions.IMessageSink and IMessageSinkWithTypes which collects native xUnit.net v2 test cases, for use with FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). public class Xunit2DiscoverySink : MarshalByRefObject, IMessageSink, IMessageSinkWithTypes, IDisposable Inheritance object MarshalByRefObject Xunit2DiscoverySink Implements IMessageSink IMessageSinkWithTypes IDisposable Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit2DiscoverySink(string, XunitFilters) An implementation of Xunit.Abstractions.IMessageSink and IMessageSinkWithTypes which collects native xUnit.net v2 test cases, for use with FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). public Xunit2DiscoverySink(string assemblyName, XunitFilters filters) Parameters assemblyName string The assembly name that this discovery sink is discovering filters XunitFilters The filters to be applied to the discovered test cases Properties Finished Gets an event which is signaled once discovery is finished. public AutoResetEvent Finished { get; } Property Value AutoResetEvent TestCases The list of discovered test cases. public List<ITestCase> TestCases { get; } Property Value List<ITestCase> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission. OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. OnMessageWithTypes(IMessageSinkMessage, HashSet<string>?) Reports the presence of a message on the message bus with an optional list of message types. This method should never throw exceptions. public bool OnMessageWithTypes(IMessageSinkMessage message, HashSet<string>? messageTypes) Parameters message IMessageSinkMessage The message from the message bus. messageTypes HashSet<string> The list of message types, or null. Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2MessageAdapter.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2MessageAdapter.html",
    "title": "Class Xunit2MessageAdapter | xunit",
    "summary": "Class Xunit2MessageAdapter Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll A class which adapts xUnit.net v2 messages to xUnit.net v3 messages. public class Xunit2MessageAdapter Inheritance object Xunit2MessageAdapter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit2MessageAdapter(string?, ITestFrameworkDiscoverer?) A class which adapts xUnit.net v2 messages to xUnit.net v3 messages. public Xunit2MessageAdapter(string? assemblyUniqueID = null, ITestFrameworkDiscoverer? discoverer = null) Parameters assemblyUniqueID string The unique ID of the assembly these message belong to discoverer ITestFrameworkDiscoverer The discoverer used to serialize test cases Methods Adapt(IMessageSinkMessage, HashSet<string>?) Adapts a v2 message to a v3 message. public IMessageSinkMessage Adapt(IMessageSinkMessage message, HashSet<string>? messageTypes = null) Parameters message IMessageSinkMessage messageTypes HashSet<string> Returns IMessageSinkMessage Exceptions ArgumentException Thrown if the message is not of a known type."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2MessageSink.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2MessageSink.html",
    "title": "Class Xunit2MessageSink | xunit",
    "summary": "Class Xunit2MessageSink Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll A message sink which implements both Xunit.Abstractions.IMessageSink and IMessageSinkWithTypes which adapts (with Xunit2MessageAdapter and dispatches any incoming v2 messages to the given v3 message sink. public class Xunit2MessageSink : MarshalByRefObject, IMessageSink, IMessageSinkWithTypes, IDisposable Inheritance object MarshalByRefObject Xunit2MessageSink Implements IMessageSink IMessageSinkWithTypes IDisposable Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit2MessageSink(IMessageSink, string?, ITestFrameworkDiscoverer?) A message sink which implements both Xunit.Abstractions.IMessageSink and IMessageSinkWithTypes which adapts (with Xunit2MessageAdapter and dispatches any incoming v2 messages to the given v3 message sink. public Xunit2MessageSink(IMessageSink v3MessageSink, string? assemblyUniqueID = null, ITestFrameworkDiscoverer? discoverer = null) Parameters v3MessageSink IMessageSink The v3 message sink to which to report the messages assemblyUniqueID string The unique ID of the assembly these message belong to discoverer ITestFrameworkDiscoverer The discoverer used to serialize test cases Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission. OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. OnMessageWithTypes(IMessageSinkMessage, HashSet<string>?) Reports the presence of a message on the message bus with an optional list of message types. This method should never throw exceptions. public bool OnMessageWithTypes(IMessageSinkMessage message, HashSet<string>? messageTypes) Parameters message IMessageSinkMessage The message from the message bus. messageTypes HashSet<string> The list of message types, or null. Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2Options.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2Options.html",
    "title": "Class Xunit2Options | xunit",
    "summary": "Class Xunit2Options Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll An implementation of xUnit.net v2's Xunit.Abstractions.ITestFrameworkDiscoveryOptions and Xunit.Abstractions.ITestFrameworkExecutionOptions, which delegates calls to an xUnit.net v3 implementation of ITestFrameworkOptions. public class Xunit2Options : LongLivedMarshalByRefObject, ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, ITestFrameworkOptions Inheritance object MarshalByRefObject LongLivedMarshalByRefObject Xunit2Options Implements ITestFrameworkDiscoveryOptions ITestFrameworkExecutionOptions ITestFrameworkOptions Inherited Members LongLivedMarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Initializes a new instance of the Xunit2Options class. Constructors Xunit2Options(ITestFrameworkOptions) An implementation of xUnit.net v2's Xunit.Abstractions.ITestFrameworkDiscoveryOptions and Xunit.Abstractions.ITestFrameworkExecutionOptions, which delegates calls to an xUnit.net v3 implementation of ITestFrameworkOptions. public Xunit2Options(ITestFrameworkOptions v3Options) Parameters v3Options ITestFrameworkOptions The v3 options object to delegate all the calls to. Remarks Initializes a new instance of the Xunit2Options class. Methods GetValue<TValue>(string) Gets an option value. public TValue? GetValue<TValue>(string name) Parameters name string The name of the value. Returns TValue The value. Type Parameters TValue The type of the value. SetValue<TValue>(string, TValue) Sets an option value. public void SetValue<TValue>(string name, TValue value) Parameters name string The name of the value. value TValue The value to be set. Type Parameters TValue The type of the value."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2OptionsAdapter.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2OptionsAdapter.html",
    "title": "Class Xunit2OptionsAdapter | xunit",
    "summary": "Class Xunit2OptionsAdapter Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll Class used to adapt v3 discovery and execution options into v2 versions. public static class Xunit2OptionsAdapter Inheritance object Xunit2OptionsAdapter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Adapt(ITestFrameworkDiscoveryOptions) Adapts v3 framework discovery options into v2 framework discovery options. public static ITestFrameworkDiscoveryOptions Adapt(ITestFrameworkDiscoveryOptions options) Parameters options ITestFrameworkDiscoveryOptions Returns ITestFrameworkDiscoveryOptions Adapt(ITestFrameworkExecutionOptions) Adapts v3 framework execution options into v2 framework execution options. public static ITestFrameworkExecutionOptions Adapt(ITestFrameworkExecutionOptions options) Parameters options ITestFrameworkExecutionOptions Returns ITestFrameworkExecutionOptions"
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2SourceInformation.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2SourceInformation.html",
    "title": "Class Xunit2SourceInformation | xunit",
    "summary": "Class Xunit2SourceInformation Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll Default implementation of Xunit.Abstractions.ISourceInformation. public class Xunit2SourceInformation : MarshalByRefObject, ISourceInformation, IXunitSerializable Inheritance object MarshalByRefObject Xunit2SourceInformation Implements ISourceInformation IXunitSerializable Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties FileName Gets or sets the source file name. A null value indicates that the source file name is not known. public string? FileName { get; set; } Property Value string LineNumber Gets or sets the source file line. A null value indicates that the source file line is not known. public int? LineNumber { get; set; } Property Value int? Methods Deserialize(IXunitSerializationInfo) Called when the object should populate itself with data from the serialization info. public void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the data from InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission. Serialize(IXunitSerializationInfo) Called when the object should store its data into the serialization info. public void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the data in"
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2SourceInformationProvider.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2SourceInformationProvider.html",
    "title": "Class Xunit2SourceInformationProvider | xunit",
    "summary": "Class Xunit2SourceInformationProvider Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll An implementation of xUnit.net v2's Xunit.Abstractions.ISourceInformationProvider which delegates calls to an xUnit.net v3 implementation of ISourceInformationProvider. public class Xunit2SourceInformationProvider : MarshalByRefObject, ISourceInformationProvider, IDisposable Inheritance object MarshalByRefObject Xunit2SourceInformationProvider Implements ISourceInformationProvider IDisposable Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors Xunit2SourceInformationProvider(ISourceInformationProvider) Initializes a new instance of the Xunit2SourceInformationProvider class. public Xunit2SourceInformationProvider(ISourceInformationProvider v3Provider) Parameters v3Provider ISourceInformationProvider The xUnit.net v3 provider that is being wrapped Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetSourceInformation(ITestCase) Returns the source information for a test case. public ISourceInformation? GetSourceInformation(ITestCase testCase) Parameters testCase ITestCase The test case to retrieve information for. Returns ISourceInformation The source information, with null string and int values when the information is not available. Note: return value should never be null, only the interior data values inside. InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission."
  },
  "v3/2.0.0/Xunit.Runner.v2.Xunit2SourceInformationProviderAdapter.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.Xunit2SourceInformationProviderAdapter.html",
    "title": "Class Xunit2SourceInformationProviderAdapter | xunit",
    "summary": "Class Xunit2SourceInformationProviderAdapter Namespace Xunit.Runner.v2 Assembly xunit.v3.runner.utility.netfx.dll Class used to adapt v3 source information provider into v2 version. public static class Xunit2SourceInformationProviderAdapter Inheritance object Xunit2SourceInformationProviderAdapter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Adapt(ISourceInformationProvider) Create a Xunit.Abstractions.ISourceInformationProvider adapter around a ISourceInformationProvider instance. public static ISourceInformationProvider Adapt(ISourceInformationProvider v3Provider) Parameters v3Provider ISourceInformationProvider Returns ISourceInformationProvider"
  },
  "v3/2.0.0/Xunit.Runner.v2.html": {
    "href": "v3/2.0.0/Xunit.Runner.v2.html",
    "title": "Namespace Xunit.Runner.v2 | xunit",
    "summary": "Namespace Xunit.Runner.v2 Classes Xunit2 This class is used to do discovery and execution of xUnit.net v2 tests. Discovery can be source-based; execution requires a file-system based assembly. Runner authors are strongly encouraged to use XunitFrontController instead of using this class directly, unless you are doing source-based discovery of v2 tests. Xunit2DiscoverySink An implementation of Xunit.Abstractions.IMessageSink and IMessageSinkWithTypes which collects native xUnit.net v2 test cases, for use with FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). Xunit2MessageAdapter A class which adapts xUnit.net v2 messages to xUnit.net v3 messages. Xunit2MessageSink A message sink which implements both Xunit.Abstractions.IMessageSink and IMessageSinkWithTypes which adapts (with Xunit2MessageAdapter and dispatches any incoming v2 messages to the given v3 message sink. Xunit2Options An implementation of xUnit.net v2's Xunit.Abstractions.ITestFrameworkDiscoveryOptions and Xunit.Abstractions.ITestFrameworkExecutionOptions, which delegates calls to an xUnit.net v3 implementation of ITestFrameworkOptions. Xunit2OptionsAdapter Class used to adapt v3 discovery and execution options into v2 versions. Xunit2SourceInformation Default implementation of Xunit.Abstractions.ISourceInformation. Xunit2SourceInformationProvider An implementation of xUnit.net v2's Xunit.Abstractions.ISourceInformationProvider which delegates calls to an xUnit.net v3 implementation of ISourceInformationProvider. Xunit2SourceInformationProviderAdapter Class used to adapt v3 source information provider into v2 version. Interfaces IMessageSinkMessageWithTypes Identifies a message that can return its own type information. IMessageSinkWithTypes Represents an endpoint for the reception of test messages. This endpoint can have the list of types of the message passed in to optimize the performance of message dispatching."
  },
  "v3/2.0.0/Xunit.Runner.v3.Xunit3.html": {
    "href": "v3/2.0.0/Xunit.Runner.v3.Xunit3.html",
    "title": "Class Xunit3 | xunit",
    "summary": "Class Xunit3 Namespace Xunit.Runner.v3 Assembly xunit.v3.runner.utility.netfx.dll This class is used to do discovery and execution of xUnit.net v3 tests. Runner authors are strongly encouraged to use XunitFrontController instead of using this class directly. public class Xunit3 : IFrontController, IFrontControllerDiscoverer, IAsyncDisposable Inheritance object Xunit3 Implements IFrontController IFrontControllerDiscoverer IAsyncDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanUseAppDomains Gets a flag indicating whether this discovery/execution can use app domains. public bool CanUseAppDomains { get; } Property Value bool CoreFrameworkVersion Gets the version of xunit.v3.core.dll the test assembly is linked against. public Version CoreFrameworkVersion { get; } Property Value Version CoreFrameworkVersionInformational Gets the informational version of xunit.v3.core.dll the test assembly is linked against. public string CoreFrameworkVersionInformational { get; } Property Value string TargetFramework Gets the target framework that the test assembly is linked against. public string TargetFramework { get; } Property Value string TestAssemblyUniqueID Gets the unique ID for the test assembly provided to the discoverer. public string TestAssemblyUniqueID { get; } Property Value string TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public string TestFrameworkDisplayName { get; } Property Value string Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask Find(IMessageSink, FrontControllerFindSettings) Starts the process of finding tests in an assembly. Typically only used by runners which discover tests and present them into a UI for the user to interactively choose for selective run (via Run(IMessageSink, FrontControllerRunSettings)). For runners which simply wish to discover and immediately run tests, they should instead use FindAndRun(IMessageSink, FrontControllerFindAndRunSettings), which permits the same filtering logic as this method. public void Find(IMessageSink messageSink, FrontControllerFindSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindSettings The settings used during discovery. FindAndRun(IMessageSink, FrontControllerFindAndRunSettings) Starts the process of finding and running tests in an assembly. Typically only used by runner which do not present test discovery UIs to users that allow them to run selected tests (those should instead use Find(IMessageSink, FrontControllerFindSettings) and Run(IMessageSink, FrontControllerRunSettings) as separate operations). public void FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindAndRunSettings The settings used during discovery and execution. ForDiscoveryAndExecution(XunitProjectAssembly, ISourceInformationProvider?, IMessageSink?, ITestProcessLauncher?) Returns an implementation of IFrontController which can be used for both discovery and execution of xUnit.net v3 tests. public static IFrontController ForDiscoveryAndExecution(XunitProjectAssembly projectAssembly, ISourceInformationProvider? sourceInformationProvider = null, IMessageSink? diagnosticMessageSink = null, ITestProcessLauncher? testProcessLauncher = null) Parameters projectAssembly XunitProjectAssembly The test project assembly. sourceInformationProvider ISourceInformationProvider The optional source information provider. diagnosticMessageSink IMessageSink The message sink which receives IDiagnosticMessage and IInternalDiagnosticMessage messages. testProcessLauncher ITestProcessLauncher The test process launcher to use for starting the xUnit.net v3 test process. If not specified, will use LocalOutOfProcessTestProcessLauncher. Returns IFrontController Run(IMessageSink, FrontControllerRunSettings) Starts the process of running selected tests in the assembly. The serialized test cases to run come from calling Find(IMessageSink, FrontControllerFindSettings). public void Run(IMessageSink messageSink, FrontControllerRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerRunSettings The settings used during execution."
  },
  "v3/2.0.0/Xunit.Runner.v3.Xunit3ArgumentFactory.html": {
    "href": "v3/2.0.0/Xunit.Runner.v3.Xunit3ArgumentFactory.html",
    "title": "Class Xunit3ArgumentFactory | xunit",
    "summary": "Class Xunit3ArgumentFactory Namespace Xunit.Runner.v3 Assembly xunit.v3.runner.utility.netfx.dll This class is responsible for generating arguments used for calling xUnit.net v3 command line arguments. public static class Xunit3ArgumentFactory Inheritance object Xunit3ArgumentFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ForFind(Version, ITestFrameworkDiscoveryOptions, XunitFilters?, string?, ListOption?, bool) Gets command line switches based on a call to Find(IMessageSink, FrontControllerFindSettings). public static List<string> ForFind(Version coreFrameworkVersion, ITestFrameworkDiscoveryOptions options, XunitFilters? filters = null, string? configFileName = null, ListOption? listOption = null, bool waitForDebugger = false) Parameters coreFrameworkVersion Version options ITestFrameworkDiscoveryOptions filters XunitFilters configFileName string listOption ListOption? waitForDebugger bool Returns List<string> ForFindAndRun(Version, ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, XunitFilters?, string?, bool) Gets command line switches based on a call to FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). public static List<string> ForFindAndRun(Version coreFrameworkVersion, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, XunitFilters? filters = null, string? configFileName = null, bool waitForDebugger = false) Parameters coreFrameworkVersion Version discoveryOptions ITestFrameworkDiscoveryOptions executionOptions ITestFrameworkExecutionOptions filters XunitFilters configFileName string waitForDebugger bool Returns List<string> ForRun(Version, ITestFrameworkExecutionOptions, IReadOnlyCollection<string>, string?, bool) Gets command line switches based on a call to Run(IMessageSink, FrontControllerRunSettings). public static List<string> ForRun(Version coreFrameworkVersion, ITestFrameworkExecutionOptions options, IReadOnlyCollection<string> serializedTestCases, string? configFileName = null, bool waitForDebugger = false) Parameters coreFrameworkVersion Version options ITestFrameworkExecutionOptions serializedTestCases IReadOnlyCollection<string> configFileName string waitForDebugger bool Returns List<string>"
  },
  "v3/2.0.0/Xunit.Runner.v3.html": {
    "href": "v3/2.0.0/Xunit.Runner.v3.html",
    "title": "Namespace Xunit.Runner.v3 | xunit",
    "summary": "Namespace Xunit.Runner.v3 Classes Xunit3 This class is used to do discovery and execution of xUnit.net v3 tests. Runner authors are strongly encouraged to use XunitFrontController instead of using this class directly. Xunit3ArgumentFactory This class is responsible for generating arguments used for calling xUnit.net v3 command line arguments."
  },
  "v3/2.0.0/Xunit.Runners.AssemblyRunner.html": {
    "href": "v3/2.0.0/Xunit.Runners.AssemblyRunner.html",
    "title": "Class AssemblyRunner | xunit",
    "summary": "Class AssemblyRunner Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll A class which makes it simpler for casual runner authors to find and run tests and get results. public class AssemblyRunner : IAsyncDisposable, IMessageSink Inheritance object AssemblyRunner Implements IAsyncDisposable IMessageSink Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties OnDiagnosticMessage Set to get notification of diagnostic messages. public Action<DiagnosticMessageInfo>? OnDiagnosticMessage { get; set; } Property Value Action<DiagnosticMessageInfo> OnDiscoveryComplete Set to get notification of when test discovery is complete. public Action<DiscoveryCompleteInfo>? OnDiscoveryComplete { get; set; } Property Value Action<DiscoveryCompleteInfo> OnErrorMessage Set to get notification of error messages (unhandled exceptions outside of tests). public Action<ErrorMessageInfo>? OnErrorMessage { get; set; } Property Value Action<ErrorMessageInfo> OnExecutionComplete Set to get notification of when test execution is complete. public Action<ExecutionCompleteInfo>? OnExecutionComplete { get; set; } Property Value Action<ExecutionCompleteInfo> OnInternalDiagnosticMessage Set to get notification of internal diagnostic messages. public Action<InternalDiagnosticMessageInfo>? OnInternalDiagnosticMessage { get; set; } Property Value Action<InternalDiagnosticMessageInfo> OnTestFailed Set to get notification of failed tests. public Action<TestFailedInfo>? OnTestFailed { get; set; } Property Value Action<TestFailedInfo> OnTestFinished Set to get notification of finished tests (regardless of outcome). public Action<TestFinishedInfo>? OnTestFinished { get; set; } Property Value Action<TestFinishedInfo> OnTestOutput Set to get real-time notification of test output (for xUnit.net v2 tests only). Note that output is captured and reported back to all the test completion Info>s in addition to being sent to this Info>. public Action<TestOutputInfo>? OnTestOutput { get; set; } Property Value Action<TestOutputInfo> OnTestPassed Set to get notification of passing tests. public Action<TestPassedInfo>? OnTestPassed { get; set; } Property Value Action<TestPassedInfo> OnTestSkipped Set to get notification of skipped tests. public Action<TestSkippedInfo>? OnTestSkipped { get; set; } Property Value Action<TestSkippedInfo> OnTestStarting Set to get notification of when tests start running. public Action<TestStartingInfo>? OnTestStarting { get; set; } Property Value Action<TestStartingInfo> Status Gets the current status of the assembly runner public AssemblyRunnerStatus Status { get; } Property Value AssemblyRunnerStatus TestCaseFilter Set to be able to filter the test cases to decide which ones to run. If this is not set, then all test cases will be run. public Func<ITestCaseDiscovered, bool>? TestCaseFilter { get; set; } Property Value Func<ITestCaseDiscovered, bool> Methods Cancel() Call to request that the current run be cancelled. Note that cancellation may not be instantaneous, and even after cancellation has been acknowledged, you can expect to receive all the cleanup-related messages. public void Cancel() DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. protected virtual bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop. Start(AssemblyRunnerStartOptions?) Starts running tests. This call returns immediately, and status results are dispatched to the events on this class. Callers can check Status to find out the current status. public void Start(AssemblyRunnerStartOptions? startOptions = null) Parameters startOptions AssemblyRunnerStartOptions The optional start options. WithAppDomain(string, string?, bool, string?) Creates an assembly runner that discovers and run tests in a separate app domain. public static AssemblyRunner WithAppDomain(string assemblyFileName, string? configFileName = null, bool shadowCopy = true, string? shadowCopyFolder = null) Parameters assemblyFileName string The test assembly. configFileName string The test assembly configuration file. shadowCopy bool If set to true, runs tests in a shadow copied app domain, which allows tests to be discovered and run without locking assembly files on disk. shadowCopyFolder string The path on disk to use for shadow copying; if null, a folder will be automatically (randomly) generated Returns AssemblyRunner WithoutAppDomain(string) Creates an assembly runner that discovers and runs tests without a separate app domain. public static AssemblyRunner WithoutAppDomain(string assemblyFileName) Parameters assemblyFileName string The test assembly. Returns AssemblyRunner"
  },
  "v3/2.0.0/Xunit.Runners.AssemblyRunnerStartOptions.html": {
    "href": "v3/2.0.0/Xunit.Runners.AssemblyRunnerStartOptions.html",
    "title": "Class AssemblyRunnerStartOptions | xunit",
    "summary": "Class AssemblyRunnerStartOptions Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents options to be used when calling Start(AssemblyRunnerStartOptions?). public class AssemblyRunnerStartOptions Inheritance object AssemblyRunnerStartOptions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties DiagnosticMessages Indicates whether diagnostic messages should be generated. If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of false). public bool? DiagnosticMessages { get; set; } Property Value bool? Empty Gets an empty set of options (representing all default behavior). public static AssemblyRunnerStartOptions Empty { get; } Property Value AssemblyRunnerStartOptions InternalDiagnosticMessages Indicates whether internal diagnostic messages should be generated (these are typically low level diagnostic messages from the test engine itself that may be requested by xUnit.net developers when debugging issues inside xUnit.net itself). If unset (or set to null), will use the value from the configuraiton file (and if that isn't set, will use the default value of false). public bool? InternalDiagnosticMessages { get; set; } Property Value bool? MaxParallelThreads Indicates how many threads to use to run parallel tests (will have no affect if parallelism is turned off). A value of -1 indicates a desire for no thread limit; a value of 0 indicates a desire for the default limit (which is ProcessorCount); a value greater than 0 indicates an exact thread count is desired. If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of ProcessorCount). public int? MaxParallelThreads { get; set; } Property Value int? MethodDisplay Indicates how to display test methods. If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of ClassAndMethod). public TestMethodDisplay? MethodDisplay { get; set; } Property Value TestMethodDisplay? MethodDisplayOptions Indicates how to interpret test method names for display. If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of None). public TestMethodDisplayOptions? MethodDisplayOptions { get; set; } Property Value TestMethodDisplayOptions? Parallel Indicates whether to run test collections in parallel. If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of true). Note that test collection parallelization is only available in v2 test projects. public bool? Parallel { get; set; } Property Value bool? ParallelAlgorithm Indicates which algorithm to use when parallelizing tests (will have no effect if parallelism is turned off or if the max parallel threads is set to -1). If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of Conservative. For more information on the parallelism algorithms, see https://xunit.net/docs/running-tests-in-parallel#algorithms. public ParallelAlgorithm? ParallelAlgorithm { get; set; } Property Value ParallelAlgorithm? PreEnumerateTheories Indicates whether theories should be pre-enumerated (that is, enumerated during discovery rather than during execution). If unset (or set to null), will use the value from the configuration file (and if that isn't set, will use the default value of false). public bool? PreEnumerateTheories { get; set; } Property Value bool? TypesToRun Indicates the types to be run. If empty, will run all types in the assembly. public string[] TypesToRun { get; set; } Property Value string[]"
  },
  "v3/2.0.0/Xunit.Runners.AssemblyRunnerStatus.html": {
    "href": "v3/2.0.0/Xunit.Runners.AssemblyRunnerStatus.html",
    "title": "Enum AssemblyRunnerStatus | xunit",
    "summary": "Enum AssemblyRunnerStatus Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll An enumeration which describes the current state of the system public enum AssemblyRunnerStatus Fields Discovering = 2 The system is discovering tests Executing = 3 The system is executing tests Idle = 1 The system is not discovering or executing tests"
  },
  "v3/2.0.0/Xunit.Runners.DiagnosticMessageInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.DiagnosticMessageInfo.html",
    "title": "Class DiagnosticMessageInfo | xunit",
    "summary": "Class DiagnosticMessageInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents a diagnostic message from the xUnit.net system or third party extension. public class DiagnosticMessageInfo Inheritance object DiagnosticMessageInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DiagnosticMessageInfo(string) Represents a diagnostic message from the xUnit.net system or third party extension. public DiagnosticMessageInfo(string message) Parameters message string Properties Message The diagnostic message. public string Message { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.DiscoveryCompleteInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.DiscoveryCompleteInfo.html",
    "title": "Class DiscoveryCompleteInfo | xunit",
    "summary": "Class DiscoveryCompleteInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents test discovery being completed. public class DiscoveryCompleteInfo Inheritance object DiscoveryCompleteInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DiscoveryCompleteInfo(int, int) Represents test discovery being completed. public DiscoveryCompleteInfo(int testCasesDiscovered, int testCasesToRun) Parameters testCasesDiscovered int testCasesToRun int Properties TestCasesDiscovered The number of test cases that were discovered. public int TestCasesDiscovered { get; } Property Value int TestCasesToRun The number of test cases that will be run, after filtering was applied. public int TestCasesToRun { get; } Property Value int"
  },
  "v3/2.0.0/Xunit.Runners.ErrorMessageInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.ErrorMessageInfo.html",
    "title": "Class ErrorMessageInfo | xunit",
    "summary": "Class ErrorMessageInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents an error that happened outside the scope of a running test. public class ErrorMessageInfo Inheritance object ErrorMessageInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ErrorMessageInfo(ErrorMessageType, string?, string, string?) Represents an error that happened outside the scope of a running test. public ErrorMessageInfo(ErrorMessageType messageType, string? exceptionType, string exceptionMessage, string? exceptionStackTrace) Parameters messageType ErrorMessageType exceptionType string exceptionMessage string exceptionStackTrace string Properties ExceptionMessage The message from the exception that caused the test failure. public string ExceptionMessage { get; } Property Value string ExceptionStackTrace The stack trace from the exception that caused the test failure. public string? ExceptionStackTrace { get; } Property Value string ExceptionType The exception that caused the test failure. public string? ExceptionType { get; } Property Value string MesssageType The type of error condition that was encountered. public ErrorMessageType MesssageType { get; } Property Value ErrorMessageType"
  },
  "v3/2.0.0/Xunit.Runners.ErrorMessageType.html": {
    "href": "v3/2.0.0/Xunit.Runners.ErrorMessageType.html",
    "title": "Enum ErrorMessageType | xunit",
    "summary": "Enum ErrorMessageType Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll An enumeration which indicates the type of error message (for OnErrorMessage). public enum ErrorMessageType Fields CatastrophicError = 1 An unhandled exception occurred that disrupted the execution engine TestAssemblyCleanupFailure = 10 An unhandled exception happened while cleaning up from the test assembly TestCaseCleanupFailure = 50 An unhandled exception happened while cleaning up from the test case TestClassCleanupFailure = 30 An unhandled exception happened while cleaning up from the test class TestCleanupFailure = 60 An unhandled exception happened while cleaning up from the test TestCollectionCleanupFailure = 20 An unhandled exception happened while cleaning up from the test collection TestMethodCleanupFailure = 40 An unhandled exception happened while cleaning up from the test method"
  },
  "v3/2.0.0/Xunit.Runners.ExecutionCompleteInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.ExecutionCompleteInfo.html",
    "title": "Class ExecutionCompleteInfo | xunit",
    "summary": "Class ExecutionCompleteInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents test assembly execution being finished. public class ExecutionCompleteInfo Inheritance object ExecutionCompleteInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ExecutionCompleteInfo(int, int, int, int, decimal) Represents test assembly execution being finished. public ExecutionCompleteInfo(int totalTests, int testsFailed, int testsSkipped, int testsNotRun, decimal executionTime) Parameters totalTests int testsFailed int testsSkipped int testsNotRun int executionTime decimal Fields Empty Used to report results when no tests are executed. public static readonly ExecutionCompleteInfo Empty Field Value ExecutionCompleteInfo Properties ExecutionTime The total execution time spent running tests. public decimal ExecutionTime { get; } Property Value decimal TestsFailed The number of the tests that failed. public int TestsFailed { get; } Property Value int TestsNotRun The number of tests that were not run. public int TestsNotRun { get; } Property Value int TestsSkipped The number of tests that were skipped. public int TestsSkipped { get; } Property Value int TotalTests The total number of tests in the assembly. public int TotalTests { get; } Property Value int"
  },
  "v3/2.0.0/Xunit.Runners.InternalDiagnosticMessageInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.InternalDiagnosticMessageInfo.html",
    "title": "Class InternalDiagnosticMessageInfo | xunit",
    "summary": "Class InternalDiagnosticMessageInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents an internal diagnostic message from the xUnit.net system. public class InternalDiagnosticMessageInfo Inheritance object InternalDiagnosticMessageInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors InternalDiagnosticMessageInfo(string) Represents an internal diagnostic message from the xUnit.net system. public InternalDiagnosticMessageInfo(string message) Parameters message string Properties Message The diagnostic message. public string Message { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.TestExecutedInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestExecutedInfo.html",
    "title": "Class TestExecutedInfo | xunit",
    "summary": "Class TestExecutedInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents information about a test that was executed. public abstract class TestExecutedInfo : TestInfo Inheritance object TestInfo TestExecutedInfo Derived TestFailedInfo TestFinishedInfo TestPassedInfo Inherited Members TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestExecutedInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string, decimal, string?) Represents information about a test that was executed. protected TestExecutedInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string? output) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string executionTime decimal output string Properties ExecutionTime The number of seconds the test spent executing. public decimal ExecutionTime { get; } Property Value decimal Output The output from the test. public string Output { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.TestFailedInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestFailedInfo.html",
    "title": "Class TestFailedInfo | xunit",
    "summary": "Class TestFailedInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents a test that failed. public class TestFailedInfo : TestExecutedInfo Inheritance object TestInfo TestExecutedInfo TestFailedInfo Inherited Members TestExecutedInfo.ExecutionTime TestExecutedInfo.Output TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestFailedInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string, decimal, string?, string?, string, string?) public TestFailedInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string? output, string? exceptionType, string exceptionMessage, string? exceptionStackTrace) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string executionTime decimal output string exceptionType string exceptionMessage string exceptionStackTrace string Properties ExceptionMessage The message from the exception that caused the test failure. public string ExceptionMessage { get; } Property Value string ExceptionStackTrace The stack trace from the exception that caused the test failure. public string? ExceptionStackTrace { get; } Property Value string ExceptionType The exception that caused the test failure. public string? ExceptionType { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.TestFinishedInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestFinishedInfo.html",
    "title": "Class TestFinishedInfo | xunit",
    "summary": "Class TestFinishedInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents a test that finished, regardless of the result. public class TestFinishedInfo : TestExecutedInfo Inheritance object TestInfo TestExecutedInfo TestFinishedInfo Inherited Members TestExecutedInfo.ExecutionTime TestExecutedInfo.Output TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestFinishedInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string, decimal, string?) Represents a test that finished, regardless of the result. public TestFinishedInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string? output) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string executionTime decimal output string"
  },
  "v3/2.0.0/Xunit.Runners.TestInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestInfo.html",
    "title": "Class TestInfo | xunit",
    "summary": "Class TestInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll A base class which contains information about a test. public abstract class TestInfo Inheritance object TestInfo Derived TestExecutedInfo TestOutputInfo TestSkippedInfo TestStartingInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string) protected TestInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string Properties MethodName The name of the method that contains the test. public string MethodName { get; } Property Value string TestCollectionDisplayName The display name of the test collection the test belongs to. public string TestCollectionDisplayName { get; } Property Value string TestDisplayName The display name for the test. public string TestDisplayName { get; } Property Value string Traits The traits associated with the test. public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> TypeName The fully qualified type name of the class that contains the test. public string TypeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.TestOutputInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestOutputInfo.html",
    "title": "Class TestOutputInfo | xunit",
    "summary": "Class TestOutputInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents live test output. public class TestOutputInfo : TestInfo Inheritance object TestInfo TestOutputInfo Inherited Members TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestOutputInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string, string?) Represents live test output. public TestOutputInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName, string? output) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string output string Properties Output The output from the test. public string? Output { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.TestPassedInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestPassedInfo.html",
    "title": "Class TestPassedInfo | xunit",
    "summary": "Class TestPassedInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents a test that passed. public class TestPassedInfo : TestExecutedInfo Inheritance object TestInfo TestExecutedInfo TestPassedInfo Inherited Members TestExecutedInfo.ExecutionTime TestExecutedInfo.Output TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestPassedInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string, decimal, string?) Represents a test that passed. public TestPassedInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string? output) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string executionTime decimal output string"
  },
  "v3/2.0.0/Xunit.Runners.TestSkippedInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestSkippedInfo.html",
    "title": "Class TestSkippedInfo | xunit",
    "summary": "Class TestSkippedInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents a test that was skipped. public class TestSkippedInfo : TestInfo Inheritance object TestInfo TestSkippedInfo Inherited Members TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestSkippedInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string, string) public TestSkippedInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName, string skipReason) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string skipReason string Properties SkipReason Gets the reason that was given for skipping the test. public string SkipReason { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Runners.TestStartingInfo.html": {
    "href": "v3/2.0.0/Xunit.Runners.TestStartingInfo.html",
    "title": "Class TestStartingInfo | xunit",
    "summary": "Class TestStartingInfo Namespace Xunit.Runners Assembly xunit.v3.runner.utility.netfx.dll Represents a test that is starting. public class TestStartingInfo : TestInfo Inheritance object TestInfo TestStartingInfo Inherited Members TestInfo.TypeName TestInfo.MethodName TestInfo.Traits TestInfo.TestDisplayName TestInfo.TestCollectionDisplayName object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestStartingInfo(string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, string, string) Represents a test that is starting. public TestStartingInfo(string typeName, string methodName, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits, string testDisplayName, string testCollectionDisplayName) Parameters typeName string methodName string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> testDisplayName string testCollectionDisplayName string"
  },
  "v3/2.0.0/Xunit.Runners.html": {
    "href": "v3/2.0.0/Xunit.Runners.html",
    "title": "Namespace Xunit.Runners | xunit",
    "summary": "Namespace Xunit.Runners Classes AssemblyRunner A class which makes it simpler for casual runner authors to find and run tests and get results. AssemblyRunnerStartOptions Represents options to be used when calling Start(AssemblyRunnerStartOptions?). DiagnosticMessageInfo Represents a diagnostic message from the xUnit.net system or third party extension. DiscoveryCompleteInfo Represents test discovery being completed. ErrorMessageInfo Represents an error that happened outside the scope of a running test. ExecutionCompleteInfo Represents test assembly execution being finished. InternalDiagnosticMessageInfo Represents an internal diagnostic message from the xUnit.net system. TestExecutedInfo Represents information about a test that was executed. TestFailedInfo Represents a test that failed. TestFinishedInfo Represents a test that finished, regardless of the result. TestInfo A base class which contains information about a test. TestOutputInfo Represents live test output. TestPassedInfo Represents a test that passed. TestSkippedInfo Represents a test that was skipped. TestStartingInfo Represents a test that is starting. Enums AssemblyRunnerStatus An enumeration which describes the current state of the system ErrorMessageType An enumeration which indicates the type of error message (for OnErrorMessage)."
  },
  "v3/2.0.0/Xunit.Sdk.AllException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.AllException.html",
    "title": "Class AllException | xunit",
    "summary": "Class AllException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.All fails. public class AllException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException AllException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailures(int, IReadOnlyList<Tuple<int, string, Exception>>) Creates a new instance of the AllException class to be thrown when one or more items failed during All<T>(IEnumerable<T>, Action<T>) or All<T>(IEnumerable<T>, Action<T, int>), AllAsync<T>(IEnumerable<T>, Func<T, Task>), or AllAsync<T>(IEnumerable<T>, Func<T, int, Task>). public static AllException ForFailures(int totalItems, IReadOnlyList<Tuple<int, string, Exception>> errors) Parameters totalItems int The total number of items in the collection errors IReadOnlyList<Tuple<int, string, Exception>> The list of failures (as index, value, and exception) Returns AllException"
  },
  "v3/2.0.0/Xunit.Sdk.AnsiUtility.html": {
    "href": "v3/2.0.0/Xunit.Sdk.AnsiUtility.html",
    "title": "Class AnsiUtility | xunit",
    "summary": "Class AnsiUtility Namespace Xunit.Sdk Assembly xunit.v3.common.dll A utility class for ANSI color escape codes. public static class AnsiUtility Inheritance object AnsiUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnsiEscapeCodeRegex Gets a regular expression that can used to find ANSI color escape codes. public static Regex AnsiEscapeCodeRegex { get; } Property Value Regex Methods RemoveAnsiEscapeCodes(string) Strip ANSI color escape codes (in the form of ESC[1;2m) from a string value. public static string RemoveAnsiEscapeCodes(string message) Parameters message string The message that may contain ANSI color escape codes Returns string The message without the ANSI color escape codes"
  },
  "v3/2.0.0/Xunit.Sdk.ArgumentFormatter.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ArgumentFormatter.html",
    "title": "Class ArgumentFormatter | xunit",
    "summary": "Class ArgumentFormatter Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Formats value for display in assertion messages and data-driven test display names. public static class ArgumentFormatter Inheritance object ArgumentFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ellipsis Gets the ellipsis value (three middle dots, aka U+00B7). public static string Ellipsis { get; } Property Value string MaxEnumerableLength Gets the maximum number of values printed for collections before truncation. public static int MaxEnumerableLength { get; } Property Value int MaxObjectDepth Gets the maximum printing depth, in terms of objects before truncation. public static int MaxObjectDepth { get; } Property Value int MaxObjectMemberCount Gets the maximum number of items (properties or fields) printed in an object before truncation. public static int MaxObjectMemberCount { get; } Property Value int MaxStringLength Gets the maximum strength length before truncation. public static int MaxStringLength { get; } Property Value int Methods EscapeString(string) Escapes a string for printing, attempting to most closely model the value on how you would enter the value in a C# string literal. That means control codes that are normally backslash escaped (like \"\\n\" for newline) are represented like that; all other control codes for ASCII values under 32 are printed as \"\\xnn\". public static string EscapeString(string s) Parameters s string The string value to be escaped Returns string Format(object?, int) Formats a value for display. public static string Format(object? value, int depth = 1) Parameters value object The value to be formatted depth int The optional printing depth (1 indicates a top-level value) Returns string FormatTypeName(Type, bool) Formats a type. This maps built-in C# types to their C# native name (e.g., printing \"int\" instead of \"Int32\" or \"System.Int32\"). public static string FormatTypeName(Type type, bool fullTypeName = false) Parameters type Type The type to get the formatted name of fullTypeName bool Set to true to include the namespace; set to false for just the simple type name Returns string"
  },
  "v3/2.0.0/Xunit.Sdk.AssertEqualityResult.html": {
    "href": "v3/2.0.0/Xunit.Sdk.AssertEqualityResult.html",
    "title": "Class AssertEqualityResult | xunit",
    "summary": "Class AssertEqualityResult Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Indicates the result of comparing two values for equality. Includes success/failure information, as well as indices where the values differ, if the values are indexed (e.g., collections or strings). public class AssertEqualityResult : IEquatable<AssertEqualityResult> Inheritance object AssertEqualityResult Implements IEquatable<AssertEqualityResult> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Equal Returns true if the values were equal; false, otherwise. public bool Equal { get; } Property Value bool Exception Returns the exception that caused the failure, if it was based on an exception. public Exception? Exception { get; } Property Value Exception InnerResult Returns the comparer result for any inner comparison that caused this result to fail; returns null if there was no inner comparison. public AssertEqualityResult? InnerResult { get; } Property Value AssertEqualityResult Remarks If this value is set, then it generally indicates that this comparison was a failed collection comparison, and the inner result indicates the specific item comparison that caused the failure. MismatchIndexX Returns the index of the mismatch for the X value, if the comparison failed on a specific index. public int? MismatchIndexX { get; } Property Value int? MismatchIndexY Returns the index of the mismatch for the Y value, if the comparison failed on a specific index. public int? MismatchIndexY { get; } Property Value int? X The left-hand value in the comparison public object? X { get; } Property Value object Y The right-hand value in the comparison public object? Y { get; } Property Value object Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool Returns true if the values are equal; false, otherwise. Equals(AssertEqualityResult?) Determines whether the specified object is equal to the current object. public bool Equals(AssertEqualityResult? other) Parameters other AssertEqualityResult The object to compare with the current object. Returns bool Returns true if the values are equal; false, otherwise. ForMismatch(object?, object?, int, Exception?, AssertEqualityResult?) Creates an instance of AssertEqualityResult where the values were not equal, and there is a single mismatch index (for example, when comparing two collections). public static AssertEqualityResult ForMismatch(object? x, object? y, int mismatchIndex, Exception? exception = null, AssertEqualityResult? innerResult = null) Parameters x object The left-hand value in the comparison y object The right-hand value in the comparison mismatchIndex int The mismatch index for both X and Y values exception Exception The optional exception that was thrown to cause the failure innerResult AssertEqualityResult The optional inner result that caused the equality failure Returns AssertEqualityResult ForMismatch(object?, object?, int, int, Exception?, AssertEqualityResult?) Creates an instance of AssertEqualityResult where the values were not equal, and there are separate mismatch indices (for example, when comparing two strings under special circumstances). public static AssertEqualityResult ForMismatch(object? x, object? y, int mismatchIndexX, int mismatchIndexY, Exception? exception = null, AssertEqualityResult? innerResult = null) Parameters x object The left-hand value in the comparison y object The right-hand value in the comparison mismatchIndexX int The mismatch index for the X value mismatchIndexY int The mismatch index for the Y value exception Exception The optional exception that was thrown to cause the failure innerResult AssertEqualityResult The optional inner result that caused the equality failure Returns AssertEqualityResult ForResult(bool, object?, object?, Exception?, AssertEqualityResult?) Creates an instance of AssertEqualityResult. public static AssertEqualityResult ForResult(bool equal, object? x, object? y, Exception? exception = null, AssertEqualityResult? innerResult = null) Parameters equal bool A flag which indicates whether the values were equal x object The left-hand value in the comparison y object The right-hand value in the comparison exception Exception The optional exception that was thrown to cause the failure innerResult AssertEqualityResult The optional inner result that caused the equality failure Returns AssertEqualityResult GetHashCode() Gets a hash code for the object, to be used in hashed containers. public override int GetHashCode() Returns int Operators operator ==(AssertEqualityResult?, AssertEqualityResult?) Determines whether two instances of AssertEqualityResult are equal. public static bool operator ==(AssertEqualityResult? left, AssertEqualityResult? right) Parameters left AssertEqualityResult The first value right AssertEqualityResult The second value Returns bool Returns true if the values are equal; false, otherwise. operator !=(AssertEqualityResult?, AssertEqualityResult?) Determines whether two instances of AssertEqualityResult are not equal. public static bool operator !=(AssertEqualityResult? left, AssertEqualityResult? right) Parameters left AssertEqualityResult The first value right AssertEqualityResult The second value Returns bool Returns true if the values are not equal; false, otherwise."
  },
  "v3/2.0.0/Xunit.Sdk.AsyncUtility.html": {
    "href": "v3/2.0.0/Xunit.Sdk.AsyncUtility.html",
    "title": "Class AsyncUtility | xunit",
    "summary": "Class AsyncUtility Namespace Xunit.Sdk Assembly xunit.v3.common.dll Utility class for dealing with asynchronous operations. public static class AsyncUtility Inheritance object AsyncUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsAsync(MethodInfo) Determines if the given method is async, as matters to xUnit.net. This means it either (a) returns a Task or ValueTask; or, (b) it is an F# function which was declared as async. Note that this is not the same thing as an \"awaitable\" method, since xUnit.net does not recreate the compiler's await machinery at runtime. public static bool IsAsync(MethodInfo method) Parameters method MethodInfo The method to test Returns bool Returns true if the method is async; returns false otherwise. IsAsyncVoid(MethodInfo) Determines if the given method is async void by looking for the AsyncStateMachineAttribute and void return type on the method definition. public static bool IsAsyncVoid(MethodInfo method) Parameters method MethodInfo The method to test Returns bool Returns true if the method is async void; returns false otherwise. TryConvertToValueTask(object?) Given an object, will attempt to convert instances of Task or Microsoft.FSharp.Control.FSharpAsync`1 into ValueTask as appropriate. Will return null if the object is not a task of any supported type. Note that this list of supported tasks is purposefully identical to the list used by IsAsync(MethodInfo). public static ValueTask? TryConvertToValueTask(object? obj) Parameters obj object The object to convert Returns ValueTask? Returns a ValueTask for the given object, if it's compatible; returns null otherwise."
  },
  "v3/2.0.0/Xunit.Sdk.CollectionException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.CollectionException.html",
    "title": "Class CollectionException | xunit",
    "summary": "Class CollectionException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Collection fails. public class CollectionException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException CollectionException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForMismatchedItem(Exception, int, int?, string) Creates an instance of the CollectionException class to be thrown when an item comparison failed public static CollectionException ForMismatchedItem(Exception exception, int indexFailurePoint, int? failurePointerIndent, string formattedCollection) Parameters exception Exception The exception that was thrown indexFailurePoint int The item index for the failed item failurePointerIndent int? The number of spaces needed to indent the failure pointer formattedCollection string The formatted collection Returns CollectionException ForMismatchedItemCount(int, int, string) Creates an instance of the CollectionException class to be thrown when the item count in a collection does not match the expected count. public static CollectionException ForMismatchedItemCount(int expectedCount, int actualCount, string formattedCollection) Parameters expectedCount int The expected item count actualCount int The actual item count formattedCollection string The formatted collection Returns CollectionException"
  },
  "v3/2.0.0/Xunit.Sdk.CollectionTracker-1.html": {
    "href": "v3/2.0.0/Xunit.Sdk.CollectionTracker-1.html",
    "title": "Class CollectionTracker<T> | xunit",
    "summary": "Class CollectionTracker<T> Namespace Xunit.Sdk Assembly xunit.v3.assert.dll A utility class that can be used to wrap enumerables to prevent double enumeration. It offers the ability to safely print parts of the collection when failures are encountered, as well as some static versions of the printing functionality. public sealed class CollectionTracker<T> : CollectionTracker, IDisposable, IEnumerable<T>, IEnumerable Type Parameters T Inheritance object CollectionTracker CollectionTracker<T> Implements IDisposable IEnumerable<T> IEnumerable Inherited Members CollectionTracker.AreCollectionsEqual(CollectionTracker, CollectionTracker, IEqualityComparer, bool) CollectionTracker.Dispose() CollectionTracker.Wrap(IEnumerable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionTrackerExtensions.AsTracker<T>(IEnumerable<T>?) CollectionTrackerExtensions.AsTracker(IEnumerable?) ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) CollectionTrackerExtensions.GetEnumerator(CollectionTracker) Properties IterationCount Gets the number of iterations that have happened so far. public int IterationCount { get; } Property Value int Methods Dispose(bool) Override to provide an implementation of Dispose(). protected override void Dispose(bool disposing) Parameters disposing bool FormatIndexedMismatch(int, int, int?, out int?, int) Formats the collection when you have a mismatched index. The formatted result will be the section of the collection from startIndex to endIndex. These indices are usually obtained by calling GetMismatchExtents(int?, out int, out int). public override string FormatIndexedMismatch(int startIndex, int endIndex, int? mismatchedIndex, out int? pointerIndent, int depth = 1) Parameters startIndex int The start index of the collection to print endIndex int The end index of the collection to print mismatchedIndex int? The mismatched item index pointerIndent int? How many spaces into the output value the pointed-to item begins at depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection FormatIndexedMismatch(int?, out int?, int) Formats the collection when you have a mismatched index. The formatted result will be the section of the collection surrounded by the mismatched item. public override string FormatIndexedMismatch(int? mismatchedIndex, out int? pointerIndent, int depth = 1) Parameters mismatchedIndex int? The index of the mismatched item pointerIndent int? How many spaces into the output value the pointed-to item begins at depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection FormatIndexedMismatch(ReadOnlySpan<T>, int?, out int?, int) Formats a span with a mismatched index. public static string FormatIndexedMismatch(ReadOnlySpan<T> span, int? mismatchedIndex, out int? pointerIndent, int depth = 1) Parameters span ReadOnlySpan<T> The span to be formatted mismatchedIndex int? The mismatched index point pointerIndent int? How many spaces into the output value the pointed-to item begins at depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted span FormatStart(IEnumerable<T>, int) Formats the beginning part of a collection. public static string FormatStart(IEnumerable<T> collection, int depth = 1) Parameters collection IEnumerable<T> The collection to be formatted depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection FormatStart(int) Formats the beginning part of the collection. public override string FormatStart(int depth = 1) Parameters depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection FormatStart(ReadOnlySpan<T>, int) Formats the beginning part of a span. public static string FormatStart(ReadOnlySpan<T> span, int depth = 1) Parameters span ReadOnlySpan<T> The span to be formatted depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted span GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> GetMismatchExtents(int?, out int, out int) Gets the extents to print when you find a mismatched index, in the form of a startIndex and endIndex. If the mismatched index is null, the extents will start at index 0. public override void GetMismatchExtents(int? mismatchedIndex, out int startIndex, out int endIndex) Parameters mismatchedIndex int? The mismatched item index startIndex int The start index that should be used for printing endIndex int The end index that should be used for printing GetSafeEnumerator() Gets a safe version of IEnumerator that prevents double enumeration and does all the necessary tracking required for collection formatting. Should should be the same value returned by GetEnumerator(), except non-generic. protected override IEnumerator GetSafeEnumerator() Returns IEnumerator TypeAt(int?) Gets the full name of the type of the element at the given index, if known. Since this uses the item cache produced by enumeration, it may return null when we haven't enumerated enough to see the given element, or if we enumerated so much that the item has left the cache, or if the item at the given index is null. It will also return null when the index is null. public override string? TypeAt(int? index) Parameters index int? The item index Returns string Wrap(IEnumerable<T>) Wraps the given collection inside of a CollectionTracker<T>. public static CollectionTracker<T> Wrap(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection to be wrapped Returns CollectionTracker<T>"
  },
  "v3/2.0.0/Xunit.Sdk.CollectionTracker.html": {
    "href": "v3/2.0.0/Xunit.Sdk.CollectionTracker.html",
    "title": "Class CollectionTracker | xunit",
    "summary": "Class CollectionTracker Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Base class for generic CollectionTracker<T>, which also includes some public static functionality. public abstract class CollectionTracker : IDisposable Inheritance object CollectionTracker Implements IDisposable Derived CollectionTracker<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) CollectionTrackerExtensions.GetEnumerator(CollectionTracker) Constructors CollectionTracker(IEnumerable) Initializes a new instance of the CollectionTracker class. protected CollectionTracker(IEnumerable innerEnumerable) Parameters innerEnumerable IEnumerable Exceptions ArgumentNullException Properties InnerEnumerable Gets the inner enumerable that this collection track is wrapping. This is mostly provided for simplifying other APIs which require both the tracker and the collection (for example, AreCollectionsEqual(CollectionTracker?, CollectionTracker?, IEqualityComparer, bool)). protected IEnumerable InnerEnumerable { get; set; } Property Value IEnumerable Methods AreCollectionsEqual(CollectionTracker?, CollectionTracker?, IEqualityComparer, bool) Determine if two enumerable collections are equal. It contains logic that varies depending on the collection type (supporting arrays, dictionaries, sets, and generic enumerables). public static AssertEqualityResult AreCollectionsEqual(CollectionTracker? x, CollectionTracker? y, IEqualityComparer itemComparer, bool isDefaultItemComparer) Parameters x CollectionTracker First value to compare y CollectionTracker Second value to comare itemComparer IEqualityComparer The comparer used for individual item comparisons isDefaultItemComparer bool Pass true if the itemComparer is the default item comparer from Xunit.Sdk.AssertEqualityComparer<T>; pass false, otherwise. Returns AssertEqualityResult Returns true if the collections are equal; false, otherwise. Dispose() public void Dispose() Dispose(bool) Override to provide an implementation of Dispose(). protected abstract void Dispose(bool disposing) Parameters disposing bool FormatIndexedMismatch(int, int, int?, out int?, int) Formats the collection when you have a mismatched index. The formatted result will be the section of the collection from startIndex to endIndex. These indices are usually obtained by calling GetMismatchExtents(int?, out int, out int). public abstract string FormatIndexedMismatch(int startIndex, int endIndex, int? mismatchedIndex, out int? pointerIndent, int depth = 1) Parameters startIndex int The start index of the collection to print endIndex int The end index of the collection to print mismatchedIndex int? The mismatched item index pointerIndent int? How many spaces into the output value the pointed-to item begins at depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection FormatIndexedMismatch(int?, out int?, int) Formats the collection when you have a mismatched index. The formatted result will be the section of the collection surrounded by the mismatched item. public abstract string FormatIndexedMismatch(int? mismatchedIndex, out int? pointerIndent, int depth = 1) Parameters mismatchedIndex int? The index of the mismatched item pointerIndent int? How many spaces into the output value the pointed-to item begins at depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection FormatStart(int) Formats the beginning part of the collection. public abstract string FormatStart(int depth = 1) Parameters depth int The optional printing depth (1 indicates a top-level value) Returns string The formatted collection GetMismatchExtents(int?, out int, out int) Gets the extents to print when you find a mismatched index, in the form of a startIndex and endIndex. If the mismatched index is null, the extents will start at index 0. public abstract void GetMismatchExtents(int? mismatchedIndex, out int startIndex, out int endIndex) Parameters mismatchedIndex int? The mismatched item index startIndex int The start index that should be used for printing endIndex int The end index that should be used for printing GetSafeEnumerator() Gets a safe version of IEnumerator that prevents double enumeration and does all the necessary tracking required for collection formatting. Should should be the same value returned by GetEnumerator(), except non-generic. protected abstract IEnumerator GetSafeEnumerator() Returns IEnumerator TypeAt(int?) Gets the full name of the type of the element at the given index, if known. Since this uses the item cache produced by enumeration, it may return null when we haven't enumerated enough to see the given element, or if we enumerated so much that the item has left the cache, or if the item at the given index is null. It will also return null when the index is null. public abstract string? TypeAt(int? index) Parameters index int? The item index Returns string Wrap(IEnumerable) Wraps an untyped enumerable in an object-based CollectionTracker<T>. public static CollectionTracker<object> Wrap(IEnumerable enumerable) Parameters enumerable IEnumerable The untyped enumerable to wrap Returns CollectionTracker<object>"
  },
  "v3/2.0.0/Xunit.Sdk.CollectionTrackerExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.CollectionTrackerExtensions.html",
    "title": "Class CollectionTrackerExtensions | xunit",
    "summary": "Class CollectionTrackerExtensions Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Extension methods related to CollectionTracker<T>. public static class CollectionTrackerExtensions Inheritance object CollectionTrackerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsTracker(IEnumerable?) Wraps the given enumerable in an instance of CollectionTracker<T>. public static CollectionTracker? AsTracker(this IEnumerable? enumerable) Parameters enumerable IEnumerable The enumerable to be wrapped Returns CollectionTracker AsTracker<T>(IEnumerable<T>?) Wraps the given enumerable in an instance of CollectionTracker<T>. public static CollectionTracker<T>? AsTracker<T>(this IEnumerable<T>? enumerable) Parameters enumerable IEnumerable<T> The enumerable to be wrapped Returns CollectionTracker<T> Type Parameters T The item type of the collection GetEnumerator(CollectionTracker) Enumerates the elements inside the collection tracker. public static IEnumerator GetEnumerator(this CollectionTracker tracker) Parameters tracker CollectionTracker Returns IEnumerator"
  },
  "v3/2.0.0/Xunit.Sdk.ContainsException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ContainsException.html",
    "title": "Class ContainsException | xunit",
    "summary": "Class ContainsException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Contains fails. public class ContainsException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException ContainsException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForCollectionFilterNotMatched(string) Creates a new instance of the ContainsException class to be thrown when the requested filter did not match any items in the collection. public static ContainsException ForCollectionFilterNotMatched(string collection) Parameters collection string The collection Returns ContainsException ForCollectionItemNotFound(string, string) Creates a new instance of the ContainsException class to be thrown when the requested item was not available in the collection. public static ContainsException ForCollectionItemNotFound(string item, string collection) Parameters item string The expected item value collection string The collection Returns ContainsException ForKeyNotFound(string, string) Creates a new instance of the ContainsException class to be thrown when the requested key was not available in the dictionary. public static ContainsException ForKeyNotFound(string expectedKey, string keys) Parameters expectedKey string The expected key value keys string The dictionary keys Returns ContainsException ForSetItemNotFound(string, string) Creates a new instance of the ContainsException class to be thrown when the requested item was not found in the set. public static ContainsException ForSetItemNotFound(string item, string set) Parameters item string The expected item set string The set Returns ContainsException ForSubMemoryNotFound(string, string) Creates a new instance of the ContainsException class to be thrown when the requested sub-memory was not found in the memory. public static ContainsException ForSubMemoryNotFound(string expectedSubMemory, string memory) Parameters expectedSubMemory string The expected sub-memory memory string The memory Returns ContainsException ForSubSpanNotFound(string, string) Creates a new instance of the ContainsException class to be thrown when the requested sub-span was not found in the span. public static ContainsException ForSubSpanNotFound(string expectedSubSpan, string span) Parameters expectedSubSpan string The expected sub-span span string The span Returns ContainsException ForSubStringNotFound(string, string?) Creates a new instance of the ContainsException class to be thrown when the requested sub-string was not found in the string. public static ContainsException ForSubStringNotFound(string expectedSubString, string? @string) Parameters expectedSubString string The expected sub-string string string The string Returns ContainsException"
  },
  "v3/2.0.0/Xunit.Sdk.DisposalTracker.html": {
    "href": "v3/2.0.0/Xunit.Sdk.DisposalTracker.html",
    "title": "Class DisposalTracker | xunit",
    "summary": "Class DisposalTracker Namespace Xunit.Sdk Assembly xunit.v3.common.dll Tracks disposable objects, and disposes them in the reverse order they were added to the tracker. Supports both IDisposable and IAsyncDisposable. You can either directly dispose this object (via DisposeAsync()), or you can enumerate the items contained inside of it (via TrackedObjects). Also supports hand-registering disposal actions via AddAction(Action) and AddAsyncAction(Func<ValueTask>). Note that an object implements both interfaces, this will only call DisposeAsync() and will not call Dispose(). public class DisposalTracker : IAsyncDisposable Inheritance object DisposalTracker Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TrackedObjects Gets a list of the items that are currently being tracked. public IReadOnlyCollection<object> TrackedObjects { get; } Property Value IReadOnlyCollection<object> Methods Add(object?) Add an object to be disposed. It may optionally support IDisposable and/or IAsyncDisposable. public void Add(object? @object) Parameters object object The object to be disposed. AddAction(Action) Add an action to the list of things to be done during disposal. public void AddAction(Action cleanupAction) Parameters cleanupAction Action The cleanup action. AddAsyncAction(Func<ValueTask>) Add an action to the list of things to be done during disposal. public void AddAsyncAction(Func<ValueTask> cleanupAction) Parameters cleanupAction Func<ValueTask> The cleanup action. AddRange(IEnumerable<object?>) Add a collection of objects to be disposed. They may optionally support IDisposable and/or IAsyncDisposable. public void AddRange(IEnumerable<object?> collection) Parameters collection IEnumerable<object> The objects to be disposed. Clear() Removes all objects from the disposal tracker. public void Clear() DisposeAsync() Disposes all the objects that were added to the disposal tracker, in the reverse order of which they were added. For any object which implements both IDisposable and IAsyncDisposable we will favor DisposeAsync() and not call Dispose(). public ValueTask DisposeAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.Sdk.DistinctException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.DistinctException.html",
    "title": "Class DistinctException | xunit",
    "summary": "Class DistinctException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Distinct fails. public class DistinctException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException DistinctException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForDuplicateItem(string, string) Creates an instance of the DistinctException class that is thrown when a duplicate item is found in a collection. public static DistinctException ForDuplicateItem(string item, string collection) Parameters item string The duplicate item collection string The collection Returns DistinctException"
  },
  "v3/2.0.0/Xunit.Sdk.DoesNotContainException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.DoesNotContainException.html",
    "title": "Class DoesNotContainException | xunit",
    "summary": "Class DoesNotContainException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.DoesNotContain fails. public class DoesNotContainException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException DoesNotContainException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForCollectionFilterMatched(int, int?, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested filter matches an item in the collection. public static DoesNotContainException ForCollectionFilterMatched(int indexFailurePoint, int? failurePointerIndent, string collection) Parameters indexFailurePoint int The item index for where the item was found failurePointerIndent int? The number of spaces needed to indent the failure pointer collection string The collection Returns DoesNotContainException ForCollectionItemFound(string, int, int?, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested item was found in the collection. public static DoesNotContainException ForCollectionItemFound(string item, int indexFailurePoint, int? failurePointerIndent, string collection) Parameters item string The item that was found in the collection indexFailurePoint int The item index for where the item was found failurePointerIndent int? The number of spaces needed to indent the failure pointer collection string The collection Returns DoesNotContainException ForKeyFound(string, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested key was found in the dictionary. public static DoesNotContainException ForKeyFound(string expectedKey, string keys) Parameters expectedKey string The expected key value keys string The dictionary keys Returns DoesNotContainException ForSetItemFound(string, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested item was found in the set. public static DoesNotContainException ForSetItemFound(string item, string set) Parameters item string The item that was found in the collection set string The set Returns DoesNotContainException ForSubMemoryFound(string, int, int?, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested sub-memory was found in the memory. public static DoesNotContainException ForSubMemoryFound(string expectedSubMemory, int indexFailurePoint, int? failurePointerIndent, string memory) Parameters expectedSubMemory string The expected sub-memory indexFailurePoint int The item index for where the item was found failurePointerIndent int? The number of spaces needed to indent the failure pointer memory string The memory Returns DoesNotContainException ForSubSpanFound(string, int, int?, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested sub-span was found in the span. public static DoesNotContainException ForSubSpanFound(string expectedSubSpan, int indexFailurePoint, int? failurePointerIndent, string span) Parameters expectedSubSpan string The expected sub-span indexFailurePoint int The item index for where the item was found failurePointerIndent int? The number of spaces needed to indent the failure pointer span string The span Returns DoesNotContainException ForSubStringFound(string, int, string) Creates a new instance of the DoesNotContainException class to be thrown when the requested sub-string was found in the string. public static DoesNotContainException ForSubStringFound(string expectedSubString, int indexFailurePoint, string @string) Parameters expectedSubString string The expected sub-string indexFailurePoint int The item index for where the item was found string string The string Returns DoesNotContainException"
  },
  "v3/2.0.0/Xunit.Sdk.DoesNotMatchException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.DoesNotMatchException.html",
    "title": "Class DoesNotMatchException | xunit",
    "summary": "Class DoesNotMatchException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.DoesNotMatch fails. public class DoesNotMatchException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException DoesNotMatchException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForMatch(string, int, int, string) Creates a new instance of the DoesNotMatchException class, thrown when a regular expression matches the input string. public static DoesNotMatchException ForMatch(string expectedRegexPattern, int indexFailurePoint, int failurePointerIndent, string @string) Parameters expectedRegexPattern string The expected regular expression pattern indexFailurePoint int The item index for where the item was found failurePointerIndent int The number of spaces needed to indent the failure pointer string string The string matched again Returns DoesNotMatchException Exceptions InvalidOperationException"
  },
  "v3/2.0.0/Xunit.Sdk.EmptyException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.EmptyException.html",
    "title": "Class EmptyException | xunit",
    "summary": "Class EmptyException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Empty fails. public class EmptyException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException EmptyException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNonEmptyCollection(string) Creates a new instance of the EmptyException to be thrown when the collection is not empty. public static EmptyException ForNonEmptyCollection(string collection) Parameters collection string The non-empty collection Returns EmptyException ForNonEmptyString(string) Creates a new instance of the EmptyException to be thrown when the string is not empty. public static EmptyException ForNonEmptyString(string value) Parameters value string The non-empty string value Returns EmptyException"
  },
  "v3/2.0.0/Xunit.Sdk.EndsWithException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.EndsWithException.html",
    "title": "Class EndsWithException | xunit",
    "summary": "Class EndsWithException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.EndsWith fails. public class EndsWithException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException EndsWithException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForStringNotFound(string?, string?) Creates an instance of the EndsWithException class to be thrown when a string does not end with the given value. public static EndsWithException ForStringNotFound(string? expected, string? actual) Parameters expected string The expected ending actual string The actual value Returns EndsWithException"
  },
  "v3/2.0.0/Xunit.Sdk.EqualException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.EqualException.html",
    "title": "Class EqualException | xunit",
    "summary": "Class EqualException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Equal fails. public class EqualException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException EqualException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForMismatchedCollections(int?, string, int?, string?, string, int?, string?, string?) Creates a new instance of EqualException to be thrown when two collections are not equal. public static EqualException ForMismatchedCollections(int? mismatchedIndex, string expected, int? expectedPointer, string? expectedType, string actual, int? actualPointer, string? actualType, string? collectionDisplay = null) Parameters mismatchedIndex int? The index at which the collections differ expected string The expected collection expectedPointer int? The spacing into the expected collection where the difference occurs expectedType string The type of the expected collection items, when they differ in type actual string The actual collection actualPointer int? The spacing into the actual collection where the difference occurs actualType string The type of the actual collection items, when they differ in type collectionDisplay string The display name for the collection type (defaults to \"Collections\") Returns EqualException ForMismatchedCollectionsWithError(int?, string, int?, string?, string, int?, string?, Exception?, string?) Creates a new instance of EqualException to be thrown when two collections are not equal, and an error has occurred during comparison. public static EqualException ForMismatchedCollectionsWithError(int? mismatchedIndex, string expected, int? expectedPointer, string? expectedType, string actual, int? actualPointer, string? actualType, Exception? error, string? collectionDisplay = null) Parameters mismatchedIndex int? The index at which the collections differ expected string The expected collection expectedPointer int? The spacing into the expected collection where the difference occurs expectedType string The type of the expected collection items, when they differ in type actual string The actual collection actualPointer int? The spacing into the actual collection where the difference occurs actualType string The type of the actual collection items, when they differ in type error Exception The optional exception that was thrown during comparison collectionDisplay string The display name for the collection type (defaults to \"Collections\") Returns EqualException ForMismatchedStrings(string?, string?, int, int) Creates a new instance of EqualException to be thrown when two string values are not equal. public static EqualException ForMismatchedStrings(string? expected, string? actual, int expectedIndex, int actualIndex) Parameters expected string The expected value actual string The actual value expectedIndex int The index point in the expected string where the values differ actualIndex int The index point in the actual string where the values differ Returns EqualException ForMismatchedStringsWithHeader(string?, string?, int, int, string) Creates a new instance of EqualException to be thrown when two string values are not equal. public static EqualException ForMismatchedStringsWithHeader(string? expected, string? actual, int expectedIndex, int actualIndex, string header) Parameters expected string The expected value actual string The actual value expectedIndex int The index point in the expected string where the values differ actualIndex int The index point in the actual string where the values differ header string The header to display in the assertion heading Returns EqualException ForMismatchedValues(object?, object?, string?) Creates a new instance of EqualException to be thrown when two values are not equal. This may be simple values (like intrinsics) or complex values (like classes or structs). public static EqualException ForMismatchedValues(object? expected, object? actual, string? banner = null) Parameters expected object The expected value actual object The actual value banner string The banner to show; if null, then the standard banner of \"Values differ\" will be used Returns EqualException ForMismatchedValuesWithError(object?, object?, Exception?, string?) Creates a new instance of EqualException to be thrown when two values are not equal. This may be simple values (like intrinsics) or complex values (like classes or structs). Used when an error has occurred during comparison. public static EqualException ForMismatchedValuesWithError(object? expected, object? actual, Exception? error = null, string? banner = null) Parameters expected object The expected value actual object The actual value error Exception The optional exception that was thrown during comparison banner string The banner to show; if null, then the standard banner of \"Values differ\" will be used. If error is not null, then the banner used will always be \"Exception thrown during comparison\", regardless of the value passed here. Returns EqualException"
  },
  "v3/2.0.0/Xunit.Sdk.EquivalentException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.EquivalentException.html",
    "title": "Class EquivalentException | xunit",
    "summary": "Class EquivalentException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Equivalent fails. public class EquivalentException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException EquivalentException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForCircularReference(string) Creates a new instance of EquivalentException which shows a message that indicates a circular reference was discovered. public static EquivalentException ForCircularReference(string memberName) Parameters memberName string The name of the member that caused the circular reference Returns EquivalentException ForExceededDepth(int, string) Creates a new instance of EquivalentException which shows a message that indicates that the maximum comparison depth was exceeded. public static EquivalentException ForExceededDepth(int depth, string memberName) Parameters depth int The depth reached memberName string The member access which caused the failure Returns EquivalentException ForExtraCollectionValue(IEnumerable<object?>, IEnumerable<object?>, IEnumerable<object?>, string) Creates a new instance of EquivalentException which shows a message that indicates that actual contained one or more values that were not specified in expected. public static EquivalentException ForExtraCollectionValue(IEnumerable<object?> expected, IEnumerable<object?> actual, IEnumerable<object?> actualLeftovers, string memberName) Parameters expected IEnumerable<object> The values expected to be found in the actual collection. actual IEnumerable<object> The actual collection values. actualLeftovers IEnumerable<object> The values from actual that did not have matching expected values memberName string The name of the member that was being inspected (may be an empty string for a top-level collection) Returns EquivalentException ForGroupingWithMismatchedValues(object?, object?, string) Creates a new instance of EquivalentException which shows a message that indicates that the fault comes from an individual value mismatch one of the members. public static EquivalentException ForGroupingWithMismatchedValues(object? expected, object? actual, string keyName) Parameters expected object The expected member value actual object The actual member value keyName string The name of the key with mismatched values Returns EquivalentException ForMemberListMismatch(IEnumerable<string>, IEnumerable<string>, string) Creates a new instance of EquivalentException which shows a message that indicates that the list of available members does not match. public static EquivalentException ForMemberListMismatch(IEnumerable<string> expectedMemberNames, IEnumerable<string> actualMemberNames, string prefix) Parameters expectedMemberNames IEnumerable<string> The expected member names actualMemberNames IEnumerable<string> The actual member names prefix string The prefix to be applied to the member names (may be an empty string for a top-level object, or a name in \"member.\" format used as a prefix to show the member name list) Returns EquivalentException ForMemberValueMismatch(object?, object?, string, Exception?) Creates a new instance of EquivalentException which shows a message that indicates that the fault comes from an individual value mismatch one of the members. public static EquivalentException ForMemberValueMismatch(object? expected, object? actual, string memberName, Exception? innerException = null) Parameters expected object The expected member value actual object The actual member value memberName string The name of the mismatched member (may be an empty string for a top-level object) innerException Exception The inner exception that was thrown during value comparison, typically during a call to CompareTo(object) Returns EquivalentException ForMismatchedTypes(Type, Type, string) Creates a new instance of EquivalentException which shows a message that indicates that expectedType does not match actualType. This is typically only used in special case comparison where it would be known that general comparison would fail for other reasons, like two objects derived from FileSystemInfo with different concrete types. public static EquivalentException ForMismatchedTypes(Type expectedType, Type actualType, string memberName) Parameters expectedType Type The expected type actualType Type The actual type memberName string The name of the member that was being inspected (may be an empty string for a top-level comparison) Returns EquivalentException ForMissingCollectionValue(object?, IEnumerable<object?>, string) Creates a new instance of EquivalentException which shows a message that indicates a value was missing from the actual collection. public static EquivalentException ForMissingCollectionValue(object? expected, IEnumerable<object?> actual, string memberName) Parameters expected object The object that was expected to be found in actual collection. actual IEnumerable<object> The actual collection which was missing the object. memberName string The name of the member that was being inspected (may be an empty string for a top-level collection) Returns EquivalentException"
  },
  "v3/2.0.0/Xunit.Sdk.ExceptionUtility.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ExceptionUtility.html",
    "title": "Class ExceptionUtility | xunit",
    "summary": "Class ExceptionUtility Namespace Xunit.Sdk Assembly xunit.v3.common.dll Utility class for dealing with Exception and IErrorMetadata objects. public static class ExceptionUtility Inheritance object ExceptionUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CombineMessages(IErrorMetadata) Combines multiple levels of messages into a single message. public static string CombineMessages(IErrorMetadata errorMetadata) Parameters errorMetadata IErrorMetadata The error metadata from which to get the messages. Returns string The combined string. CombineStackTraces(IErrorMetadata) Combines multiple levels of stack traces into a single stack trace. public static string? CombineStackTraces(IErrorMetadata errorMetadata) Parameters errorMetadata IErrorMetadata The error metadata from which to get the stack traces. Returns string The combined string. ExtractMetadata(Exception) Unwraps exceptions and their inner exceptions. public static (string?[] ExceptionTypes, string[] Messages, string?[] StackTraces, int[] ExceptionParentIndices, FailureCause Cause) ExtractMetadata(Exception ex) Parameters ex Exception The exception to be converted. Returns (string[] ExceptionTypes, string[] Messages, string[] StackTraces, int[] ExceptionParentIndices, FailureCause Cause) The error metadata."
  },
  "v3/2.0.0/Xunit.Sdk.ExplicitOption.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ExplicitOption.html",
    "title": "Enum ExplicitOption | xunit",
    "summary": "Enum ExplicitOption Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates how explicit tests should be handled during execution. public enum ExplicitOption Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Off = 0 Indicates the non-explicit tests should be run, and explicit tests should not be run. This should be the default behavior in most runners. On = 1 Indicates that both non-explicit and explicit tests should be run. Only = 2 Indicates that non-explicit tests should not be run, and explicit tests should be run."
  },
  "v3/2.0.0/Xunit.Sdk.FailException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.FailException.html",
    "title": "Class FailException | xunit",
    "summary": "Class FailException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Fail is called. public class FailException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException FailException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailure(string?) Creates a new instance of the FailException class to be thrown when the user calls Fail(string?). public static FailException ForFailure(string? message) Parameters message string The user's failure message. Returns FailException"
  },
  "v3/2.0.0/Xunit.Sdk.FailureCause.html": {
    "href": "v3/2.0.0/Xunit.Sdk.FailureCause.html",
    "title": "Enum FailureCause | xunit",
    "summary": "Enum FailureCause Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates the cause of the test failure. public enum FailureCause Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Assertion = 3 Indicates that the test failed because of an assertion failure (that is, an exception was thrown that implements an interface named IAssertionException, regardless of the namespace or source assembly of the interface). For built-in exceptions, IAssertionException serves this purpose, but this is generally found by convention rather than type to prevent 3rd party assertion libraries from needing to take an explicit references to xUnit.net binaries. Exception = 2 Indicates that the test failed because it threw an unhandled exception. Other = 1 Indicates that a test failed for some reason other than a typical execution failure (for example, if a test was skipped but the flag was given to fail all skipped tests, or the test passed with warnings but the flag was given to fail tests with warnings). Timeout = 4 Indicates that the test failed because it exceeded the allowed time to run (typically specified via Timeout). This is indicated by an exception that is thrown which implements an interface named ITestTimeoutException, regardless of the namespace or source assembly of the interface. For fact attributes, ITestTimeoutException serves this purpose, but this is generally found by convention rather than type to prevent 3rd party libraries from needing to take an explicit reference to xUnit.net binaries. Unknown = 0 Indicates the test failure cause is unknown."
  },
  "v3/2.0.0/Xunit.Sdk.FalseException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.FalseException.html",
    "title": "Class FalseException | xunit",
    "summary": "Class FalseException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.False fails. public class FalseException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException FalseException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNonFalseValue(string?, bool?) Creates a new instance of the FalseException class to be thrown when a non-false value was provided. public static FalseException ForNonFalseValue(string? message, bool? value) Parameters message string The message to be displayed, or null for the default message value bool? The actual value Returns FalseException"
  },
  "v3/2.0.0/Xunit.Sdk.IAfterTestFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAfterTestFinished.html",
    "title": "Interface IAfterTestFinished | xunit",
    "summary": "Interface IAfterTestFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message is sent during execution to indicate that the After method of a IBeforeAfterTestAttribute just finished executing. public interface IAfterTestFinished : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. string AttributeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IAfterTestStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAfterTestStarting.html",
    "title": "Interface IAfterTestStarting | xunit",
    "summary": "Interface IAfterTestStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message is sent during execution to indicate that the After method of a IBeforeAfterTestAttribute is about to execute. public interface IAfterTestStarting : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. string AttributeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IAssemblyMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAssemblyMetadata.html",
    "title": "Interface IAssemblyMetadata | xunit",
    "summary": "Interface IAssemblyMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about a test assembly. public interface IAssemblyMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) IAssemblyMetadataExtensions.SimpleAssemblyName(IAssemblyMetadata) Properties AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). string AssemblyName { get; } Property Value string AssemblyPath Gets the on-disk location of the assembly under test. string AssemblyPath { get; } Property Value string ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. string? ConfigFilePath { get; } Property Value string Traits Gets the trait values associated with this test assembly. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test assembly. string UniqueID { get; } Property Value string Remarks The unique identifier for a test assembly should be able to discriminate among test assemblies with their associated configuration file (so the same assembly with two different configuration files should have two different unique IDs). This identifier should remain stable until such time as the developer changes some fundamental part of the identity. Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.Sdk.IAssemblyMetadataExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAssemblyMetadataExtensions.html",
    "title": "Class IAssemblyMetadataExtensions | xunit",
    "summary": "Class IAssemblyMetadataExtensions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Extension methods for IAssemblyMetadata. public static class IAssemblyMetadataExtensions Inheritance object IAssemblyMetadataExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SimpleAssemblyName(IAssemblyMetadata) Computes the simple assembly name from AssemblyName. public static string SimpleAssemblyName(this IAssemblyMetadata assemblyMetadata) Parameters assemblyMetadata IAssemblyMetadata Returns string The simple assembly name."
  },
  "v3/2.0.0/Xunit.Sdk.IAssertEqualityComparer-1.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAssertEqualityComparer-1.html",
    "title": "Interface IAssertEqualityComparer<T> | xunit",
    "summary": "Interface IAssertEqualityComparer<T> Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Represents a specialized version of IEqualityComparer<T> that returns information useful when formatting results for assertion failures. public interface IAssertEqualityComparer<T> : IEqualityComparer<T> Type Parameters T The type of the objects being compared. Inherited Members IEqualityComparer<T>.Equals(T, T) IEqualityComparer<T>.GetHashCode(T) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) IAssertEqualityComparerExtensions.Equals<T>(IAssertEqualityComparer<T>, T?, T?) Methods Equals(T?, CollectionTracker?, T?, CollectionTracker?) Compares two values and determines if they are equal. AssertEqualityResult Equals(T? x, CollectionTracker? xTracker, T? y, CollectionTracker? yTracker) Parameters x T The first value xTracker CollectionTracker The first value as a CollectionTracker (if it's a collection) y T The second value yTracker CollectionTracker The second value as a CollectionTracker (if it's a collection) Returns AssertEqualityResult Success or failure information"
  },
  "v3/2.0.0/Xunit.Sdk.IAssertEqualityComparerExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAssertEqualityComparerExtensions.html",
    "title": "Class IAssertEqualityComparerExtensions | xunit",
    "summary": "Class IAssertEqualityComparerExtensions Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Extension methods for IAssertEqualityComparer<T> public static class IAssertEqualityComparerExtensions Inheritance object IAssertEqualityComparerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Equals<T>(IAssertEqualityComparer<T>, T?, T?) Compares two values and determines if they are equal. public static AssertEqualityResult Equals<T>(this IAssertEqualityComparer<T> comparer, T? x, T? y) Parameters comparer IAssertEqualityComparer<T> The comparer x T The first value y T The second value Returns AssertEqualityResult Success or failure information Type Parameters T"
  },
  "v3/2.0.0/Xunit.Sdk.IAssertionException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IAssertionException.html",
    "title": "Interface IAssertionException | xunit",
    "summary": "Interface IAssertionException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll This is a marker interface implemented by all built-in assertion exceptions so that test failures can be marked with Assertion. public interface IAssertionException Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.IBeforeTestFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IBeforeTestFinished.html",
    "title": "Interface IBeforeTestFinished | xunit",
    "summary": "Interface IBeforeTestFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message is sent during execution to indicate that the Before method of a IBeforeAfterTestAttribute has completed executing. public interface IBeforeTestFinished : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. string AttributeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IBeforeTestStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IBeforeTestStarting.html",
    "title": "Interface IBeforeTestStarting | xunit",
    "summary": "Interface IBeforeTestStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message is sent during execution to indicate that the Before method of a IBeforeAfterTestAttribute is about to execute. public interface IBeforeTestStarting : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. string AttributeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IDiagnosticMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IDiagnosticMessage.html",
    "title": "Interface IDiagnosticMessage | xunit",
    "summary": "Interface IDiagnosticMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message is sent when code (1st or 3rd party) wants to alert the user to a situation that may require diagnostic investigation. This is typically not displayed unless the user has explicitly asked for diagnostic messages to be displayed (see https://xunit.net/docs/configuration-files#diagnosticMessages on how to enable display of diagnostic messages). public interface IDiagnosticMessage : IMessageSinkMessage, IJsonSerializable Inherited Members IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Message Gets the diagnostic message. string Message { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IDiscoveryComplete.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IDiscoveryComplete.html",
    "title": "Interface IDiscoveryComplete | xunit",
    "summary": "Interface IDiscoveryComplete Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that the discovery process has been completed for the requested assembly. public interface IDiscoveryComplete : ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCasesToRun Gets a count of the number of test cases that passed the filter and will be run. int TestCasesToRun { get; } Property Value int"
  },
  "v3/2.0.0/Xunit.Sdk.IDiscoveryStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IDiscoveryStarting.html",
    "title": "Interface IDiscoveryStarting | xunit",
    "summary": "Interface IDiscoveryStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that the discovery process is starting for the requested assembly. public interface IDiscoveryStarting : ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). string AssemblyName { get; } Property Value string AssemblyPath Gets the on-disk location of the assembly under test. string AssemblyPath { get; } Property Value string ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. string? ConfigFilePath { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IErrorMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IErrorMessage.html",
    "title": "Interface IErrorMessage | xunit",
    "summary": "Interface IErrorMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a catastrophic error has occurred. public interface IErrorMessage : IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.IErrorMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IErrorMetadata.html",
    "title": "Interface IErrorMetadata | xunit",
    "summary": "Interface IErrorMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about an error during test discovery or execution. public interface IErrorMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. int[] ExceptionParentIndices { get; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). string?[] ExceptionTypes { get; } Property Value string[] Messages Gets the message(s) of the exception(s). string[] Messages { get; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). string?[] StackTraces { get; } Property Value string[]"
  },
  "v3/2.0.0/Xunit.Sdk.IExecutionMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IExecutionMetadata.html",
    "title": "Interface IExecutionMetadata | xunit",
    "summary": "Interface IExecutionMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll This is metadata describing the execution of a single test. public interface IExecutionMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime The time spent executing the test, in seconds. Will be 0 if the test was not executed. decimal ExecutionTime { get; } Property Value decimal Output The captured output of the test. Will be Empty if there was no output. string Output { get; } Property Value string Warnings Gets a list of the warning messages that were recorded during execution. Will be null if there were no warnings. string[]? Warnings { get; } Property Value string[]"
  },
  "v3/2.0.0/Xunit.Sdk.IExecutionSummaryMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IExecutionSummaryMetadata.html",
    "title": "Interface IExecutionSummaryMetadata | xunit",
    "summary": "Interface IExecutionSummaryMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll This is metadata describing the summary during various phases of execution process (e.g., test case, test class, test collection, and assembly). It describes the aggregation of zero or more tests being executed. public interface IExecutionSummaryMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime Gets the execution time (in seconds) for this execution. decimal ExecutionTime { get; } Property Value decimal TestsFailed Gets the number of failing tests. int TestsFailed { get; } Property Value int TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. int TestsNotRun { get; } Property Value int TestsSkipped Gets the number of skipped tests. int TestsSkipped { get; } Property Value int TestsTotal Gets the total number of tests run and not run. int TestsTotal { get; } Property Value int"
  },
  "v3/2.0.0/Xunit.Sdk.IInternalDiagnosticMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IInternalDiagnosticMessage.html",
    "title": "Interface IInternalDiagnosticMessage | xunit",
    "summary": "Interface IInternalDiagnosticMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message is sent when xUnit.net itself wants to log internal messages and state that are typically only used by the xUnit.net team to gain a deeper understanding of potential end user issues. These messages are rarely useful to end users directly, and may result in very noisy logs. This is typically not displayed unless the user has explicit asked for internal diagnostic messages to be displayed (see on how to enable display of internal diagnostic messages). public interface IInternalDiagnosticMessage : IMessageSinkMessage, IJsonSerializable Inherited Members IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Message Gets the internal diagnostic message. string Message { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.IJsonDeserializable.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IJsonDeserializable.html",
    "title": "Interface IJsonDeserializable | xunit",
    "summary": "Interface IJsonDeserializable Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates that an object can be deserialized from string-serialized JSON. public interface IJsonDeserializable Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods FromJson(IReadOnlyDictionary<string, object?>) Deserializes the object's values from the provided JSON. void FromJson(IReadOnlyDictionary<string, object?> root) Parameters root IReadOnlyDictionary<string, object> The root of the deserialized JSON object"
  },
  "v3/2.0.0/Xunit.Sdk.IJsonSerializable.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IJsonSerializable.html",
    "title": "Interface IJsonSerializable | xunit",
    "summary": "Interface IJsonSerializable Namespace Xunit.Sdk Assembly xunit.v3.common.dll Interface that indicates an object can be serialized to JSON. public interface IJsonSerializable Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ToJson() Converts the given object to JSON. string? ToJson() Returns string Returns the object in JSON form, if possible; returns null if the object cannot be represented in JSON form."
  },
  "v3/2.0.0/Xunit.Sdk.IMessageSink.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IMessageSink.html",
    "title": "Interface IMessageSink | xunit",
    "summary": "Interface IMessageSink Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents an endpoint for the reception of test messages. public interface IMessageSink Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Sdk.IMessageSinkMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IMessageSinkMessage.html",
    "title": "Interface IMessageSinkMessage | xunit",
    "summary": "Interface IMessageSinkMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all test messages. A test message is a message that is used to communicate the status of discovery and/or execution of tests. public interface IMessageSinkMessage : IJsonSerializable Inherited Members IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.IRegisterXunitSerializerAttribute.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IRegisterXunitSerializerAttribute.html",
    "title": "Interface IRegisterXunitSerializerAttribute | xunit",
    "summary": "Interface IRegisterXunitSerializerAttribute Namespace Xunit.Sdk Assembly xunit.v3.common.dll Used to decorate xUnit.net test assemblies to register an external serializer for one or more supports types to serialize. public interface IRegisterXunitSerializerAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Serializer registration attributes are only valid at the assembly level. Properties SerializerType Gets the type of the serializer. Type SerializerType { get; } Property Value Type Remarks The serializer type must implement IXunitSerializer. SupportedTypesForSerialization Gets the types that are supported by the serializer. Type[] SupportedTypesForSerialization { get; } Property Value Type[] Remarks When searching for a serializer to deserialize a value, exact type matches are given higher priority than compatible type matches, and if more than one serializer can support a given type based on compatible type match, then one will be chosen arbitrarily to support the deserialization."
  },
  "v3/2.0.0/Xunit.Sdk.ITest.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITest.html",
    "title": "Interface ITest | xunit",
    "summary": "Interface ITest Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents a single test in the system. A test case typically contains only a single test, but may contain many if circumstances warrant it (for example, test data for a theory cannot be pre-enumerated, so the theory yields a single test case with multiple tests). public interface ITest : ITestMetadata Inherited Members ITestMetadata.TestDisplayName ITestMetadata.Traits ITestMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCase Gets the test case this test belongs to. ITestCase TestCase { get; } Property Value ITestCase"
  },
  "v3/2.0.0/Xunit.Sdk.ITestAssembly.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestAssembly.html",
    "title": "Interface ITestAssembly | xunit",
    "summary": "Interface ITestAssembly Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents a test assembly. public interface ITestAssembly : IAssemblyMetadata Inherited Members IAssemblyMetadata.AssemblyName IAssemblyMetadata.AssemblyPath IAssemblyMetadata.ConfigFilePath IAssemblyMetadata.Traits IAssemblyMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) IAssemblyMetadataExtensions.SimpleAssemblyName(IAssemblyMetadata) Remarks Although most test frameworks will use an Assembly for the test assembly, this is not a requirement at this layer. Assembly is just an abstraction that represents a group of zero or more ITestCollections. Properties ModuleVersionID Returns the module version ID of the test assembly. Used as the basis for randomization. Guid ModuleVersionID { get; } Property Value Guid"
  },
  "v3/2.0.0/Xunit.Sdk.ITestAssemblyCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestAssemblyCleanupFailure.html",
    "title": "Interface ITestAssemblyCleanupFailure | xunit",
    "summary": "Interface ITestAssemblyCleanupFailure Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an error has occurred during test assembly cleanup. public interface ITestAssemblyCleanupFailure : ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestAssemblyFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestAssemblyFinished.html",
    "title": "Interface ITestAssemblyFinished | xunit",
    "summary": "Interface ITestAssemblyFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that the execution process has been completed for the requested assembly. public interface ITestAssemblyFinished : ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inherited Members ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionSummaryMetadata.ExecutionTime IExecutionSummaryMetadata.TestsFailed IExecutionSummaryMetadata.TestsNotRun IExecutionSummaryMetadata.TestsSkipped IExecutionSummaryMetadata.TestsTotal Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties FinishTime Gets the date and time when the test assembly execution finished. DateTimeOffset FinishTime { get; } Property Value DateTimeOffset"
  },
  "v3/2.0.0/Xunit.Sdk.ITestAssemblyMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestAssemblyMessage.html",
    "title": "Interface ITestAssemblyMessage | xunit",
    "summary": "Interface ITestAssemblyMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all messages related to test assemblies. public interface ITestAssemblyMessage : IMessageSinkMessage, IJsonSerializable Inherited Members IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AssemblyUniqueID Gets the assembly's unique ID. Can be used to correlate test messages with the appropriate assembly that they're related to. string AssemblyUniqueID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestAssemblyStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestAssemblyStarting.html",
    "title": "Interface ITestAssemblyStarting | xunit",
    "summary": "Interface ITestAssemblyStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that the execution process is about to start for the requested assembly. public interface ITestAssemblyStarting : ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IAssemblyMetadata Inherited Members ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IAssemblyMetadata.AssemblyName IAssemblyMetadata.AssemblyPath IAssemblyMetadata.ConfigFilePath IAssemblyMetadata.Traits IAssemblyMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) IAssemblyMetadataExtensions.SimpleAssemblyName(IAssemblyMetadata) Properties Seed Gets the seed value used for randomization. If null, then the test framework does not support getting or setting a randomization seed. (For stock versions of xUnit.net, support for settable randomization seeds started with v3.) int? Seed { get; } Property Value int? StartTime Gets the date and time when the test assembly execution began. DateTimeOffset StartTime { get; } Property Value DateTimeOffset TargetFramework Gets the target framework that the assembly was compiled against. Examples: \".NETFramework,Version=v4.7.2\", \".NETCoreApp,Version=v6.0\". This information is read from TargetFrameworkAttribute on the test assembly, which is normally auto-generated (but could be missing or empty). string? TargetFramework { get; } Property Value string TestEnvironment Gets a display string that describes the test execution environment. Examples: \"32-bit .NET Framework 4.8.4220.0\", \"64-bit .NET Core 4.6.29220.03\" string TestEnvironment { get; } Property Value string TestFrameworkDisplayName Gets a display string which describes the test framework and version number. Examples: \"xUnit.net v3 0.1.0-pre.15\", \"xUnit.net 2.4.1\" string TestFrameworkDisplayName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCase.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCase.html",
    "title": "Interface ITestCase | xunit",
    "summary": "Interface ITestCase Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents a single test case in the system. This test case usually represents a single test, but in the case of dynamically generated data for data driven tests, the test case may actually return multiple results when run. public interface ITestCase : ITestCaseMetadata Inherited Members ITestCaseMetadata.Explicit ITestCaseMetadata.SkipReason ITestCaseMetadata.SourceFilePath ITestCaseMetadata.SourceLineNumber ITestCaseMetadata.TestCaseDisplayName ITestCaseMetadata.TestClassMetadataToken ITestCaseMetadata.TestClassName ITestCaseMetadata.TestClassNamespace ITestCaseMetadata.TestClassSimpleName ITestCaseMetadata.TestMethodMetadataToken ITestCaseMetadata.TestMethodName ITestCaseMetadata.TestMethodParameterTypesVSTest ITestCaseMetadata.TestMethodReturnTypeVSTest ITestCaseMetadata.Traits ITestCaseMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestClass Gets the test class that this test case belongs to; may be null if the test isn't backed by a class, but will not be null if TestMethod is not null (and must be the same instance returned via TestMethod). ITestClass? TestClass { get; } Property Value ITestClass TestCollection Gets the test collection this test case belongs to. Must be the same instance returned via TestMethod and/or TestClass when they are not null. ITestCollection TestCollection { get; } Property Value ITestCollection TestMethod Gets the test method this test case belongs to; may be null if the test isn't backed by a method. ITestMethod? TestMethod { get; } Property Value ITestMethod"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCaseCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCaseCleanupFailure.html",
    "title": "Interface ITestCaseCleanupFailure | xunit",
    "summary": "Interface ITestCaseCleanupFailure Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an error has occurred during test case cleanup. public interface ITestCaseCleanupFailure : ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCaseDiscovered.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCaseDiscovered.html",
    "title": "Interface ITestCaseDiscovered | xunit",
    "summary": "Interface ITestCaseDiscovered Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test case had been found during the discovery process. public interface ITestCaseDiscovered : ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCaseMetadata Inherited Members ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() ITestCaseMetadata.Explicit ITestCaseMetadata.SkipReason ITestCaseMetadata.SourceFilePath ITestCaseMetadata.SourceLineNumber ITestCaseMetadata.TestCaseDisplayName ITestCaseMetadata.TestClassMetadataToken ITestCaseMetadata.TestClassName ITestCaseMetadata.TestClassNamespace ITestCaseMetadata.TestClassSimpleName ITestCaseMetadata.TestMethodMetadataToken ITestCaseMetadata.TestMethodName ITestCaseMetadata.TestMethodParameterTypesVSTest ITestCaseMetadata.TestMethodReturnTypeVSTest ITestCaseMetadata.Traits ITestCaseMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Serialization Gets the serialized value of the test case, which allows it to be transferred across process boundaries. string Serialization { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCaseFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCaseFinished.html",
    "title": "Interface ITestCaseFinished | xunit",
    "summary": "Interface ITestCaseFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test case has finished executing. public interface ITestCaseFinished : ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inherited Members ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionSummaryMetadata.ExecutionTime IExecutionSummaryMetadata.TestsFailed IExecutionSummaryMetadata.TestsNotRun IExecutionSummaryMetadata.TestsSkipped IExecutionSummaryMetadata.TestsTotal Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCaseMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCaseMessage.html",
    "title": "Interface ITestCaseMessage | xunit",
    "summary": "Interface ITestCaseMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all messages related to test cases. public interface ITestCaseMessage : ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCaseUniqueID Gets the test case's unique ID. Can be used to correlate test messages with the appropriate test case that they're related to. string TestCaseUniqueID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCaseMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCaseMetadata.html",
    "title": "Interface ITestCaseMetadata | xunit",
    "summary": "Interface ITestCaseMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about a test case. public interface ITestCaseMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag indicating whether this test case was marked as explicit or not. bool Explicit { get; } Property Value bool SkipReason Gets the display text for the reason a test is being skipped; if the test is not statically skipped, returns null. (A test may be dynamically skipped at runtime while still returning null.) string? SkipReason { get; } Property Value string SourceFilePath Gets the source file name. A null value indicates that the source file name is not known. string? SourceFilePath { get; } Property Value string SourceLineNumber Gets the source file line number. A null value indicates that the source file line number is not known. int? SourceLineNumber { get; } Property Value int? TestCaseDisplayName Gets the display name of the test case. string TestCaseDisplayName { get; } Property Value string TestClassMetadataToken Gets the MetadataToken for the test class. If the test did not originate in a class, will return null. int? TestClassMetadataToken { get; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestClassName is null. TestClassName Gets the full name of the class where the test is defined (i.e., FullName). If the test did not originiate in a class, will return null. string? TestClassName { get; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. If the test did not originate in a class, or the class it originated in does not reside in a namespace, will return null. string? TestClassNamespace { get; } Property Value string TestClassSimpleName Gets the simple name of the class where the test is defined (the class name without namespace). If the test did not originiate in a class, will return null. string? TestClassSimpleName { get; } Property Value string TestMethodMetadataToken Gets the MetadataToken for the test method. If the test did not originate in a method, or the test framework did not provide this information, will return null. int? TestMethodMetadataToken { get; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestMethodName is null. TestMethodName Gets the method name where the test is defined, in the TestClassName class. If the test did not originiate in a method, will return null. string? TestMethodName { get; } Property Value string TestMethodParameterTypesVSTest Gets the types for the test method parameters. If the test did not originate in a method, or the test framework does not provide this information, will return null; if the test method has no parameters, will return an empty array. string[]? TestMethodParameterTypesVSTest { get; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. If the test did not originate in a method, or the test framework did not provide this information, will return null. string? TestMethodReturnTypeVSTest { get; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets a unique identifier for the test case. string UniqueID { get; } Property Value string Remarks The unique identifier for a test case should be able to discriminate among test cases, even those which are varied invocations against the same test method (i.e., theories). This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, class name, test name, or test data). Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.Sdk.ITestCaseStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCaseStarting.html",
    "title": "Interface ITestCaseStarting | xunit",
    "summary": "Interface ITestCaseStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test case is about to start executing. public interface ITestCaseStarting : ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCaseMetadata Inherited Members ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() ITestCaseMetadata.Explicit ITestCaseMetadata.SkipReason ITestCaseMetadata.SourceFilePath ITestCaseMetadata.SourceLineNumber ITestCaseMetadata.TestCaseDisplayName ITestCaseMetadata.TestClassMetadataToken ITestCaseMetadata.TestClassName ITestCaseMetadata.TestClassNamespace ITestCaseMetadata.TestClassSimpleName ITestCaseMetadata.TestMethodMetadataToken ITestCaseMetadata.TestMethodName ITestCaseMetadata.TestMethodParameterTypesVSTest ITestCaseMetadata.TestMethodReturnTypeVSTest ITestCaseMetadata.Traits ITestCaseMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClass.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClass.html",
    "title": "Interface ITestClass | xunit",
    "summary": "Interface ITestClass Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents a test class, which contributes one or more test cases (usually by way of test methods). public interface ITestClass : ITestClassMetadata Inherited Members ITestClassMetadata.TestClassName ITestClassMetadata.TestClassNamespace ITestClassMetadata.TestClassSimpleName ITestClassMetadata.Traits ITestClassMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Not all test frameworks will require that tests come from classes, so this abstraction may or many not be used. Properties TestCollection Gets the test collection this test class belongs to. ITestCollection TestCollection { get; } Property Value ITestCollection"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassCleanupFailure.html",
    "title": "Interface ITestClassCleanupFailure | xunit",
    "summary": "Interface ITestClassCleanupFailure Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an error has occurred during test class cleanup. public interface ITestClassCleanupFailure : ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassConstructionFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassConstructionFinished.html",
    "title": "Interface ITestClassConstructionFinished | xunit",
    "summary": "Interface ITestClassConstructionFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an instance of a test class has just been constructed. Instance (non-static) methods of tests get a new instance of the test class for each individual test execution; static methods do not get an instance of the test class. public interface ITestClassConstructionFinished : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassConstructionStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassConstructionStarting.html",
    "title": "Interface ITestClassConstructionStarting | xunit",
    "summary": "Interface ITestClassConstructionStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an instance of a test class is about to be constructed. Instance (non-static) methods of tests get a new instance of the test class for each individual test execution; static methods do not get an instance of the test class. public interface ITestClassConstructionStarting : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassDisposeFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassDisposeFinished.html",
    "title": "Interface ITestClassDisposeFinished | xunit",
    "summary": "Interface ITestClassDisposeFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that the Dispose() or DisposeAsync() method was just called on the test class for the test that just finished executing. public interface ITestClassDisposeFinished : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassDisposeStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassDisposeStarting.html",
    "title": "Interface ITestClassDisposeStarting | xunit",
    "summary": "Interface ITestClassDisposeStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that the Dispose() or DisposeAsync() method is about to be called on the test class for the test that just finished executing. public interface ITestClassDisposeStarting : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassFinished.html",
    "title": "Interface ITestClassFinished | xunit",
    "summary": "Interface ITestClassFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test class has finished executing (meaning, all of the test cases in this test class have finished running). public interface ITestClassFinished : ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inherited Members ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionSummaryMetadata.ExecutionTime IExecutionSummaryMetadata.TestsFailed IExecutionSummaryMetadata.TestsNotRun IExecutionSummaryMetadata.TestsSkipped IExecutionSummaryMetadata.TestsTotal Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassMessage.html",
    "title": "Interface ITestClassMessage | xunit",
    "summary": "Interface ITestClassMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all messages related to test classes. public interface ITestClassMessage : ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestClassUniqueID Gets the test class's unique ID. Can be used to correlate test messages with the appropriate test class that they're related to. Will be null if the test did not originate from a class. string? TestClassUniqueID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassMetadata.html",
    "title": "Interface ITestClassMetadata | xunit",
    "summary": "Interface ITestClassMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about a test class. public interface ITestClassMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestClassName Gets the full name of the test class (i.e., FullName). string TestClassName { get; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. Will return null for classes not residing in a namespace. string? TestClassNamespace { get; } Property Value string TestClassSimpleName Gets the simple name of the test class (the class name without namespace). string TestClassSimpleName { get; } Property Value string Traits Gets the trait values associated with this test class (and the test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test class. string UniqueID { get; } Property Value string Remarks The unique identifier for a test class should be able to discriminate among test classes in the same test assembly. This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, collection, or test class). Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.Sdk.ITestClassStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestClassStarting.html",
    "title": "Interface ITestClassStarting | xunit",
    "summary": "Interface ITestClassStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test class is about to begin executing. public interface ITestClassStarting : ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestClassMetadata Inherited Members ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() ITestClassMetadata.TestClassName ITestClassMetadata.TestClassNamespace ITestClassMetadata.TestClassSimpleName ITestClassMetadata.Traits ITestClassMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCleanupFailure.html",
    "title": "Interface ITestCleanupFailure | xunit",
    "summary": "Interface ITestCleanupFailure Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an error has occurred during test cleanup. public interface ITestCleanupFailure : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCollection.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCollection.html",
    "title": "Interface ITestCollection | xunit",
    "summary": "Interface ITestCollection Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents a group of test cases. public interface ITestCollection : ITestCollectionMetadata Inherited Members ITestCollectionMetadata.TestCollectionClassName ITestCollectionMetadata.TestCollectionDisplayName ITestCollectionMetadata.Traits ITestCollectionMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks The test framework decides how test collections are defined and what their purpose is. Properties TestAssembly Gets the test assembly this test collection belongs to. ITestAssembly TestAssembly { get; } Property Value ITestAssembly"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCollectionCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCollectionCleanupFailure.html",
    "title": "Interface ITestCollectionCleanupFailure | xunit",
    "summary": "Interface ITestCollectionCleanupFailure Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an error has occurred during test collection cleanup. public interface ITestCollectionCleanupFailure : ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCollectionFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCollectionFinished.html",
    "title": "Interface ITestCollectionFinished | xunit",
    "summary": "Interface ITestCollectionFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test collection has just finished executing (meaning, all the test classes in the collection has finished). public interface ITestCollectionFinished : ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inherited Members ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionSummaryMetadata.ExecutionTime IExecutionSummaryMetadata.TestsFailed IExecutionSummaryMetadata.TestsNotRun IExecutionSummaryMetadata.TestsSkipped IExecutionSummaryMetadata.TestsTotal Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCollectionMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCollectionMessage.html",
    "title": "Interface ITestCollectionMessage | xunit",
    "summary": "Interface ITestCollectionMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all messages related to test collections. public interface ITestCollectionMessage : ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCollectionUniqueID Gets the test collection's unique ID. Can be used to correlate test messages with the appropriate test collection that they're related to. string TestCollectionUniqueID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestCollectionMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCollectionMetadata.html",
    "title": "Interface ITestCollectionMetadata | xunit",
    "summary": "Interface ITestCollectionMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about a test collection. public interface ITestCollectionMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCollectionClassName Gets the type that the test collection was defined with, if available; may be null if the test collection didn't have a definition type. string? TestCollectionClassName { get; } Property Value string TestCollectionDisplayName Gets the display name of the test collection. string TestCollectionDisplayName { get; } Property Value string Traits Gets the trait values associated with this test collection (and the test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test collection. string UniqueID { get; } Property Value string Remarks The unique identifier for a test collection should be able to discriminate among test collections in the same test assembly. This identifier should remain stable until such time as the developer changes some fundamental part of the identity (the test assembly, the collection definition class, or the collection name). Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.Sdk.ITestCollectionStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestCollectionStarting.html",
    "title": "Interface ITestCollectionStarting | xunit",
    "summary": "Interface ITestCollectionStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test collection is about to start executing. public interface ITestCollectionStarting : ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCollectionMetadata Inherited Members ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() ITestCollectionMetadata.TestCollectionClassName ITestCollectionMetadata.TestCollectionDisplayName ITestCollectionMetadata.Traits ITestCollectionMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestFailed.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestFailed.html",
    "title": "Interface ITestFailed | xunit",
    "summary": "Interface ITestFailed Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test has failed. public interface ITestFailed : ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata, IErrorMetadata Inherited Members ITestResultMessage.FinishTime ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionMetadata.ExecutionTime IExecutionMetadata.Output IExecutionMetadata.Warnings IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Cause Gets the cause of the test failure. FailureCause Cause { get; } Property Value FailureCause"
  },
  "v3/2.0.0/Xunit.Sdk.ITestFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestFinished.html",
    "title": "Interface ITestFinished | xunit",
    "summary": "Interface ITestFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test has finished executing. public interface ITestFinished : ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inherited Members ITestResultMessage.FinishTime ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionMetadata.ExecutionTime IExecutionMetadata.Output IExecutionMetadata.Warnings Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Attachments Gets any attachments that were added to the test result via Xunit.TestContext.AddAttachment. IReadOnlyDictionary<string, TestAttachment> Attachments { get; } Property Value IReadOnlyDictionary<string, TestAttachment>"
  },
  "v3/2.0.0/Xunit.Sdk.ITestFrameworkDiscoveryOptions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestFrameworkDiscoveryOptions.html",
    "title": "Interface ITestFrameworkDiscoveryOptions | xunit",
    "summary": "Interface ITestFrameworkDiscoveryOptions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents an instance of ITestFrameworkOptions that is to be used for test discovery purposes. public interface ITestFrameworkDiscoveryOptions : ITestFrameworkOptions Inherited Members ITestFrameworkOptions.GetValue<TValue>(string) ITestFrameworkOptions.SetValue<TValue>(string, TValue) ITestFrameworkOptions.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestFrameworkExecutionOptions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestFrameworkExecutionOptions.html",
    "title": "Interface ITestFrameworkExecutionOptions | xunit",
    "summary": "Interface ITestFrameworkExecutionOptions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents an instance of ITestFrameworkOptions that is to be used for test execution purposes. public interface ITestFrameworkExecutionOptions : ITestFrameworkOptions Inherited Members ITestFrameworkOptions.GetValue<TValue>(string) ITestFrameworkOptions.SetValue<TValue>(string, TValue) ITestFrameworkOptions.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestFrameworkOptions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestFrameworkOptions.html",
    "title": "Interface ITestFrameworkOptions | xunit",
    "summary": "Interface ITestFrameworkOptions Namespace Xunit.Sdk Assembly xunit.v3.common.dll This interface should not be consumed directly; instead, you should consume ITestFrameworkDiscoveryOptions or ITestFrameworkExecutionOptions. public interface ITestFrameworkOptions Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods GetValue<TValue>(string) Gets an option value. TValue? GetValue<TValue>(string name) Parameters name string The name of the value. Returns TValue The value. Type Parameters TValue The type of the value. SetValue<TValue>(string, TValue) Sets an option value. void SetValue<TValue>(string name, TValue value) Parameters name string The name of the value. value TValue The value to be set. Type Parameters TValue The type of the value. ToJson() Converts the test framework options into JSON. Used for serializing the options for sending across a process boundary. string ToJson() Returns string The serialized framework options."
  },
  "v3/2.0.0/Xunit.Sdk.ITestMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMessage.html",
    "title": "Interface ITestMessage | xunit",
    "summary": "Interface ITestMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all messages related to tests. public interface ITestMessage : ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestUniqueID Gets the test's unique ID. Can be used to correlate test messages with the appropriate test that they're related to. string TestUniqueID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMetadata.html",
    "title": "Interface ITestMetadata | xunit",
    "summary": "Interface ITestMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about a test. public interface ITestMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestDisplayName Gets the display name of the test. string TestDisplayName { get; } Property Value string Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets a unique identifier for the test. string UniqueID { get; } Property Value string Remarks The unique identifier for a test should be able to discriminate among test, even those which are varied invocations against the same test method (i.e., theories). This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, class name, test name, or test data). Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.Sdk.ITestMethod.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMethod.html",
    "title": "Interface ITestMethod | xunit",
    "summary": "Interface ITestMethod Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents a test method, which contributes one or more test cases. public interface ITestMethod : ITestMethodMetadata Inherited Members ITestMethodMetadata.MethodName ITestMethodMetadata.Traits ITestMethodMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Not all test frameworks will require that tests come from methods, so this abstraction may or many not be used. Properties TestClass Gets the test class that this test method belongs to. ITestClass TestClass { get; } Property Value ITestClass"
  },
  "v3/2.0.0/Xunit.Sdk.ITestMethodCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMethodCleanupFailure.html",
    "title": "Interface ITestMethodCleanupFailure | xunit",
    "summary": "Interface ITestMethodCleanupFailure Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that an error has occurred during test method cleanup. public interface ITestMethodCleanupFailure : ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inherited Members ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IErrorMetadata.ExceptionParentIndices IErrorMetadata.ExceptionTypes IErrorMetadata.Messages IErrorMetadata.StackTraces Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestMethodFinished.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMethodFinished.html",
    "title": "Interface ITestMethodFinished | xunit",
    "summary": "Interface ITestMethodFinished Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test method has finished executing (meaning, all the test cases that derived from the test method have finished). public interface ITestMethodFinished : ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inherited Members ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionSummaryMetadata.ExecutionTime IExecutionSummaryMetadata.TestsFailed IExecutionSummaryMetadata.TestsNotRun IExecutionSummaryMetadata.TestsSkipped IExecutionSummaryMetadata.TestsTotal Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestMethodMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMethodMessage.html",
    "title": "Interface ITestMethodMessage | xunit",
    "summary": "Interface ITestMethodMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all messages related to test methods. public interface ITestMethodMessage : ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestMethodUniqueID Gets the test method's unique ID. Can be used to correlate test messages with the appropriate test method that they're related to. Will be null if the test did not originate from a method. string? TestMethodUniqueID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestMethodMetadata.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMethodMetadata.html",
    "title": "Interface ITestMethodMetadata | xunit",
    "summary": "Interface ITestMethodMetadata Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents metadata about a test method. public interface ITestMethodMetadata Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties MethodName Gets the name of the test method that is associated with this message. string MethodName { get; } Property Value string Traits Gets the trait values associated with this test method (and the test class, test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test method. string UniqueID { get; } Property Value string Remarks The unique identifier for a test method should be able to discriminate among test methods in the same test assembly. This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, collection, test class, or test method). Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.Sdk.ITestMethodStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestMethodStarting.html",
    "title": "Interface ITestMethodStarting | xunit",
    "summary": "Interface ITestMethodStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test method is about to begin executing. public interface ITestMethodStarting : ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestMethodMetadata Inherited Members ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() ITestMethodMetadata.MethodName ITestMethodMetadata.Traits ITestMethodMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestNotRun.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestNotRun.html",
    "title": "Interface ITestNotRun | xunit",
    "summary": "Interface ITestNotRun Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test was not run because it was excluded (either because it was marked as explicit and explicit tests weren't run, or because it was marked as not explicit as only explicit tests were run). public interface ITestNotRun : ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inherited Members ITestResultMessage.FinishTime ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionMetadata.ExecutionTime IExecutionMetadata.Output IExecutionMetadata.Warnings Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestOutput.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestOutput.html",
    "title": "Interface ITestOutput | xunit",
    "summary": "Interface ITestOutput Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a line of output was provided for a test. public interface ITestOutput : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Output Gets the line of output. string Output { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestPassed.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestPassed.html",
    "title": "Interface ITestPassed | xunit",
    "summary": "Interface ITestPassed Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates that a test has passed. public interface ITestPassed : ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inherited Members ITestResultMessage.FinishTime ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionMetadata.ExecutionTime IExecutionMetadata.Output IExecutionMetadata.Warnings Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.Sdk.ITestResultMessage.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestResultMessage.html",
    "title": "Interface ITestResultMessage | xunit",
    "summary": "Interface ITestResultMessage Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base interface for all individual test results (e.g., tests which pass, fail, skipped, or aren't run). public interface ITestResultMessage : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionMetadata.ExecutionTime IExecutionMetadata.Output IExecutionMetadata.Warnings Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties FinishTime Gets the date and time when the test execution finished. DateTimeOffset FinishTime { get; } Property Value DateTimeOffset"
  },
  "v3/2.0.0/Xunit.Sdk.ITestSkipped.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestSkipped.html",
    "title": "Interface ITestSkipped | xunit",
    "summary": "Interface ITestSkipped Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test was skipped. public interface ITestSkipped : ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inherited Members ITestResultMessage.FinishTime ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() IExecutionMetadata.ExecutionTime IExecutionMetadata.Output IExecutionMetadata.Warnings Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Reason Gets the reason given for skipping the test. string Reason { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.ITestStarting.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ITestStarting.html",
    "title": "Interface ITestStarting | xunit",
    "summary": "Interface ITestStarting Namespace Xunit.Sdk Assembly xunit.v3.common.dll This message indicates that a test is about to start executing. public interface ITestStarting : ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestMetadata Inherited Members ITestMessage.TestUniqueID ITestCaseMessage.TestCaseUniqueID ITestMethodMessage.TestMethodUniqueID ITestClassMessage.TestClassUniqueID ITestCollectionMessage.TestCollectionUniqueID ITestAssemblyMessage.AssemblyUniqueID IJsonSerializable.ToJson() ITestMetadata.TestDisplayName ITestMetadata.Traits ITestMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag which indicates whether the test is marked as explicit or not. bool Explicit { get; } Property Value bool StartTime Gets the date and time when the test execution began. DateTimeOffset StartTime { get; } Property Value DateTimeOffset Timeout Gets the timeout for the test, in milliseconds; if 0, there is no timeout. int Timeout { get; } Property Value int"
  },
  "v3/2.0.0/Xunit.Sdk.IXunitSerializable.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IXunitSerializable.html",
    "title": "Interface IXunitSerializable | xunit",
    "summary": "Interface IXunitSerializable Namespace Xunit.Sdk Assembly xunit.v3.common.dll This interface should be implemented by any custom object which requires serialization. In addition to implementing this interface, objects must also offer a parameterless public constructor so that an empty object can be created to be deserialized into. public interface IXunitSerializable Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Deserialize(IXunitSerializationInfo) Called when the object should populate itself with data from the serialization info. void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from Serialize(IXunitSerializationInfo) Called when the object should store its serialized values into the serialization info. void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.Sdk.IXunitSerializationInfo.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IXunitSerializationInfo.html",
    "title": "Interface IXunitSerializationInfo | xunit",
    "summary": "Interface IXunitSerializationInfo Namespace Xunit.Sdk Assembly xunit.v3.common.dll An interface that is implemented by the serialization infrastructure in xUnit.net. This is passed to objects which implement IXunitSerializable so they can serialize and deserialize themselves from the serialization store. public interface IXunitSerializationInfo Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) XunitSerializationInfoExtensions.AddValue<T>(IXunitSerializationInfo, string, T) XunitSerializationInfoExtensions.GetValue<T>(IXunitSerializationInfo, string) Methods AddValue(string, object?, Type?) Adds a value to the serialization. Supported value types include the built-in intrinsics (string, int, long, float, double, and decimal, including nullable versions of those), any class which implements IXunitSerializable), or arrays of any supported types. void AddValue(string key, object? value, Type? valueType) Parameters key string The key to store the value with value object The value to be stored valueType Type The type of the value to be stored; optional, unless the value of value is null. Exceptions ArgumentException Thrown if the value is not a supported type. GetValue(string) Gets a value from the serialization. object? GetValue(string key) Parameters key string The key of the value to retrieve Returns object The value, if present; null, otherwise"
  },
  "v3/2.0.0/Xunit.Sdk.IXunitSerializer.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IXunitSerializer.html",
    "title": "Interface IXunitSerializer | xunit",
    "summary": "Interface IXunitSerializer Namespace Xunit.Sdk Assembly xunit.v3.common.dll Implemented by types which can support serialization and deserialization. This allows external serializers for types which would be inconvenient or impossible to implement IXunitSerializable directly. public interface IXunitSerializer Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Deserialize(Type, string) Deserializes a value that was obtained from Serialize(object). object Deserialize(Type type, string serializedValue) Parameters type Type The type of the original value serializedValue string The serialized value Returns object The deserialized value IsSerializable(Type, object?, out string?) Determines if a specific value of data is serializable. bool IsSerializable(Type type, object? value, out string? failureReason) Parameters type Type The type of the value value object The value to test failureReason string Returns a failure reason when the value isn't serializable Returns bool Return true if the value is serializable; false, otherwise Remarks This will be called by IsSerializable(object?), IsSerializable(object?, Type?), and Serialize(object?, Type?). The failure reason is used when called from Serialize to format an error exception, but is otherwise ignored from the calls from IsSerializable. The type of value may not directly match type, as the type is derived from unwrapping nullability and array element types, so use care when looking at the value to determine serializability. Serialize(object) Serializes a value into a string to be later deserialized with Deserialize(Type, string). string Serialize(object value) Parameters value object The value to be serialized Returns string The serialized value Remarks This method will never be called with null values, because those are already special cased by the serialization system. You may assume that IsSerializable(Type, object?, out string?) is called before this, so any validation done there need not be repeated here."
  },
  "v3/2.0.0/Xunit.Sdk.InRangeException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.InRangeException.html",
    "title": "Class InRangeException | xunit",
    "summary": "Class InRangeException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.InRange fails. public class InRangeException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException InRangeException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForValueNotInRange(object, object, object) Creates a new instance of the InRangeException class to be thrown when the given value is not in the given range. public static InRangeException ForValueNotInRange(object actual, object low, object high) Parameters actual object The actual object value low object The low value of the range high object The high value of the range Returns InRangeException"
  },
  "v3/2.0.0/Xunit.Sdk.IsAssignableFromException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IsAssignableFromException.html",
    "title": "Class IsAssignableFromException | xunit",
    "summary": "Class IsAssignableFromException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.IsAssignableFrom fails. public class IsAssignableFromException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException IsAssignableFromException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForIncompatibleType(Type, object?) Creates a new instance of the IsTypeException class to be thrown when the value is not compatible with the given type. public static IsAssignableFromException ForIncompatibleType(Type expected, object? actual) Parameters expected Type The expected type actual object The actual object value Returns IsAssignableFromException"
  },
  "v3/2.0.0/Xunit.Sdk.IsNotAssignableFromException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IsNotAssignableFromException.html",
    "title": "Class IsNotAssignableFromException | xunit",
    "summary": "Class IsNotAssignableFromException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.IsNotAssignableFrom fails. public class IsNotAssignableFromException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException IsNotAssignableFromException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForCompatibleType(Type, object) Creates a new instance of the IsNotAssignableFromException class to be thrown when the value is compatible with the given type. public static IsNotAssignableFromException ForCompatibleType(Type expected, object actual) Parameters expected Type The expected type actual object The actual object value Returns IsNotAssignableFromException"
  },
  "v3/2.0.0/Xunit.Sdk.IsNotTypeException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IsNotTypeException.html",
    "title": "Class IsNotTypeException | xunit",
    "summary": "Class IsNotTypeException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.IsNotType fails. public class IsNotTypeException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException IsNotTypeException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForCompatibleType(Type, Type) Creates a new instance of the IsNotTypeException class to be thrown when the object is a compatible type. public static IsNotTypeException ForCompatibleType(Type expectedType, Type actualType) Parameters expectedType Type The expected type actualType Type The actual type Returns IsNotTypeException ForExactType(Type) Creates a new instance of the IsNotTypeException class to be thrown when the object is the exact type. public static IsNotTypeException ForExactType(Type type) Parameters type Type The expected type Returns IsNotTypeException"
  },
  "v3/2.0.0/Xunit.Sdk.IsTypeException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.IsTypeException.html",
    "title": "Class IsTypeException | xunit",
    "summary": "Class IsTypeException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.IsType fails. public class IsTypeException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException IsTypeException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForIncompatibleType(string, string?) Creates a new instance of the IsTypeException class to be thrown when an object was not compatible with the given type public static IsTypeException ForIncompatibleType(string expectedTypeName, string? actualTypeName) Parameters expectedTypeName string The expected type name actualTypeName string The actual type name Returns IsTypeException ForMismatchedType(string, string?) Creates a new instance of the IsTypeException class to be thrown when an object did not exactly match the given type public static IsTypeException ForMismatchedType(string expectedTypeName, string? actualTypeName) Parameters expectedTypeName string The expected type name actualTypeName string The actual type name Returns IsTypeException"
  },
  "v3/2.0.0/Xunit.Sdk.JsonArraySerializer.html": {
    "href": "v3/2.0.0/Xunit.Sdk.JsonArraySerializer.html",
    "title": "Class JsonArraySerializer | xunit",
    "summary": "Class JsonArraySerializer Namespace Xunit.Sdk Assembly xunit.v3.common.dll A special-purpose streaming serializer for arrays to JSON. Only supports a limited number of types (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries). public sealed class JsonArraySerializer : JsonSerializerBase, IDisposable Inheritance object JsonSerializerBase JsonArraySerializer Implements IDisposable Inherited Members JsonSerializerBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Constructors JsonArraySerializer(StringBuilder, Action?) A special-purpose streaming serializer for arrays to JSON. Only supports a limited number of types (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries). public JsonArraySerializer(StringBuilder buffer, Action? disposeNotifier = null) Parameters buffer StringBuilder The buffer to write JSON to disposeNotifier Action An optional callback to be notified when disposed Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Methods Serialize(IReadOnlyDictionary<string, IReadOnlyCollection<string>>) Serialize a trait dictionary value into the array. public void Serialize(IReadOnlyDictionary<string, IReadOnlyCollection<string>> dictionary) Parameters dictionary IReadOnlyDictionary<string, IReadOnlyCollection<string>> Serialize(Enum?) Serialize an Enum value into the array. public void Serialize(Enum? value) Parameters value Enum Serialize(bool?) Serialize a bool value into the array. public void Serialize(bool? value) Parameters value bool? Serialize(DateTimeOffset?) Serialize a DateTimeOffset value into the array. public void Serialize(DateTimeOffset? value) Parameters value DateTimeOffset? Serialize(decimal?) Serialize a decimal value into the array. public void Serialize(decimal? value) Parameters value decimal? Serialize(int?) Serialize an int value into the array. public void Serialize(int? value) Parameters value int? Serialize(long?) Serialize a long value into the array. public void Serialize(long? value) Parameters value long? Serialize(string?) Serialize a string value into the array. public void Serialize(string? value) Parameters value string SerializeArray() Start serializing an array into the array. public JsonArraySerializer SerializeArray() Returns JsonArraySerializer Remarks IMPORTANT: This serializer must be used completely and disposed before any other value is serialized into the array, or the serialization will be corrupted. SerializeObject() Start serializing an object into the array. public JsonObjectSerializer SerializeObject() Returns JsonObjectSerializer Remarks IMPORTANT: This serializer must be used completely and disposed before any other value is serialized into the array, or the serialization will be corrupted."
  },
  "v3/2.0.0/Xunit.Sdk.JsonDeserializer.html": {
    "href": "v3/2.0.0/Xunit.Sdk.JsonDeserializer.html",
    "title": "Class JsonDeserializer | xunit",
    "summary": "Class JsonDeserializer Namespace Xunit.Sdk Assembly xunit.v3.common.dll A special-purpose untyped deserializer for JSON. JSON strings are returned as string, JSON numbers are returned as decimal, JSON booleans are returns as bool, JSON objects are returned as IReadOnlyDictionary<string, object?>, JSON arrays are returned as object?[], and JSON null values are returned as null. Static methods exist here to help retrieve values from object dictionaries as well as convert to the commonly supported data types (bool, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries (which are decoded to IReadOnlyDictionary<string, IReadOnlyList<string>>), as well as arrays of all the supported types (except trait dictionaries). Developers who need support for other types are encouraged to encode and decode then as strings as needed (for examples, you can see how Enum and DateTimeOffset values are handled here). public static class JsonDeserializer Inheritance object JsonDeserializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Methods TryDeserialize(string, out object?) public static bool TryDeserialize(string json, out object? result) Parameters json string result object Returns bool TryGetArray(IReadOnlyDictionary<string, object?>, string) Tries to get an untyped array value from a deserialized JSON object. public static object?[]? TryGetArray(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns object[] TryGetArray(object?) Tries to get an untyped array value from a deserialized JSON value. public static object?[]? TryGetArray(object? value) Parameters value object The deserialized JSON value Returns object[] TryGetArrayOfBoolean(IReadOnlyDictionary<string, object?>, string) Tries to get an array of bool values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with bool, then returns null. Null values in the array are not permitted. public static bool[]? TryGetArrayOfBoolean(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns bool[] TryGetArrayOfBoolean(object?) Tries to get an array of bool values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with bool, then returns null. Null values in the array are not permitted. public static bool[]? TryGetArrayOfBoolean(object? value) Parameters value object The deserialized JSON value Returns bool[] TryGetArrayOfDateTimeOffset(IReadOnlyDictionary<string, object?>, string) Tries to get an array of DateTimeOffset values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with DateTimeOffset, then returns null. Null values in the array are not permitted. public static DateTimeOffset[]? TryGetArrayOfDateTimeOffset(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns DateTimeOffset[] TryGetArrayOfDateTimeOffset(object?) Tries to get an array of DateTimeOffset values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with DateTimeOffset, then returns null. Null values in the array are not permitted. public static DateTimeOffset[]? TryGetArrayOfDateTimeOffset(object? value) Parameters value object The deserialized JSON value Returns DateTimeOffset[] TryGetArrayOfDecimal(IReadOnlyDictionary<string, object?>, string) Tries to get an array of decimal values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with decimal, then returns null. Null values in the array are not permitted. public static decimal[]? TryGetArrayOfDecimal(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns decimal[] TryGetArrayOfDecimal(object?) Tries to get an array of decimal values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with decimal, then returns null. Null values in the array are not permitted. public static decimal[]? TryGetArrayOfDecimal(object? value) Parameters value object The deserialized JSON value Returns decimal[] TryGetArrayOfEnum<TEnum>(IReadOnlyDictionary<string, object?>, string) Tries to get an array of TEnum values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with TEnum, then returns null. Null values in the array are not permitted. public static TEnum[]? TryGetArrayOfEnum<TEnum>(IReadOnlyDictionary<string, object?> obj, string key) where TEnum : struct, Enum Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns TEnum[] Type Parameters TEnum TryGetArrayOfEnum<TEnum>(object?) Tries to get an array of TEnum values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with TEnum, then returns null. Null values in the array are not permitted. public static TEnum[]? TryGetArrayOfEnum<TEnum>(object? value) where TEnum : struct, Enum Parameters value object The deserialized JSON value Returns TEnum[] Type Parameters TEnum TryGetArrayOfInt(IReadOnlyDictionary<string, object?>, string) Tries to get an array of int values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with int, then returns null. Null values in the array are not permitted. public static int[]? TryGetArrayOfInt(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns int[] TryGetArrayOfInt(object?) Tries to get an array of int values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with int, then returns null. Null values in the array are not permitted. public static int[]? TryGetArrayOfInt(object? value) Parameters value object The deserialized JSON value Returns int[] TryGetArrayOfLong(IReadOnlyDictionary<string, object?>, string) Tries to get an array of long values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with long, then returns null. Null values in the array are not permitted. public static long[]? TryGetArrayOfLong(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns long[] TryGetArrayOfLong(object?) Tries to get an array of long values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with long, then returns null. Null values in the array are not permitted. public static long[]? TryGetArrayOfLong(object? value) Parameters value object The deserialized JSON value Returns long[] TryGetArrayOfNullableString(IReadOnlyDictionary<string, object?>, string) Tries to get an array of string values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with string, then returns null. Null values in the array are permitted. public static string?[]? TryGetArrayOfNullableString(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns string[] TryGetArrayOfNullableString(object?) Tries to get an array of string values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with string, then returns null. Null values in the array are permitted. public static string?[]? TryGetArrayOfNullableString(object? value) Parameters value object The deserialized JSON value Returns string[] TryGetArrayOfString(IReadOnlyDictionary<string, object?>, string) Tries to get an array of string values from a deserialized JSON object. If the value isn't an array, or if any of the values in the array aren't compatible with string, then returns null. Null values in the array are not permitted. public static string[]? TryGetArrayOfString(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns string[] TryGetArrayOfString(object?) Tries to get an array of string values from a deserialized JSON value. If the value isn't an array, or if any of the values in the array aren't compatible with string, then returns null. Null values in the array are not permitted. public static string[]? TryGetArrayOfString(object? value) Parameters value object The deserialized JSON value Returns string[] TryGetBoolean(IReadOnlyDictionary<string, object?>, string) Tries to get a bool value from a deserialized JSON object. public static bool? TryGetBoolean(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns bool? TryGetBoolean(object?) Tries to get a bool value from a deserialized JSON value. public static bool? TryGetBoolean(object? value) Parameters value object The deserialized JSON value Returns bool? TryGetDateTimeOffset(IReadOnlyDictionary<string, object?>, string) Tries to get a DateTimeOffset value from a deserialized JSON object. public static DateTimeOffset? TryGetDateTimeOffset(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns DateTimeOffset? TryGetDateTimeOffset(object?) Tries to get a DateTimeOffset value from a deserialized JSON value. public static DateTimeOffset? TryGetDateTimeOffset(object? value) Parameters value object The deserialized JSON value Returns DateTimeOffset? TryGetDecimal(IReadOnlyDictionary<string, object?>, string) Tries to get a decimal value from a deserialized JSON object. public static decimal? TryGetDecimal(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns decimal? TryGetDecimal(object?) Tries to get a decimal value from a deserialized JSON value. public static decimal? TryGetDecimal(object? value) Parameters value object The deserialized JSON value Returns decimal? TryGetEnum<TEnum>(IReadOnlyDictionary<string, object?>, string) Tries to get an Enum value from a deserialized JSON object. public static TEnum? TryGetEnum<TEnum>(IReadOnlyDictionary<string, object?> obj, string key) where TEnum : struct, Enum Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns TEnum? Type Parameters TEnum TryGetEnum<TEnum>(object?) Tries to get an Enum value from a deserialized JSON value. public static TEnum? TryGetEnum<TEnum>(object? value) where TEnum : struct, Enum Parameters value object The deserialized JSON value Returns TEnum? Type Parameters TEnum TryGetInt(IReadOnlyDictionary<string, object?>, string) Tries to get an int value from a deserialized JSON object. public static int? TryGetInt(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns int? TryGetInt(object?) Tries to get an int value from a deserialized JSON value. public static int? TryGetInt(object? value) Parameters value object The deserialized JSON value Returns int? TryGetLong(IReadOnlyDictionary<string, object?>, string) Tries to get a long value from a deserialized JSON object. public static long? TryGetLong(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns long? TryGetLong(object?) Tries to get an long value from a deserialized JSON value. public static long? TryGetLong(object? value) Parameters value object The deserialized JSON value Returns long? TryGetObject(IReadOnlyDictionary<string, object?>, string) Tries to get an untyped object value from a deserialized JSON object. public static IReadOnlyDictionary<string, object?>? TryGetObject(IReadOnlyDictionary<string, object?> obj, string key) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value Returns IReadOnlyDictionary<string, object> TryGetObject(object?) Tries to get an untyped object value from a deserialized JSON value. public static IReadOnlyDictionary<string, object?>? TryGetObject(object? value) Parameters value object The deserialized JSON value Returns IReadOnlyDictionary<string, object> TryGetString(IReadOnlyDictionary<string, object?>, string, bool) Tries to get a string value from a deserialized JSON object. public static string? TryGetString(IReadOnlyDictionary<string, object?> obj, string key, bool defaultEmptyString = false) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value defaultEmptyString bool Flag to indicate if a default empty string should be returned instead of null Returns string Returns the value if present; null, otherwise. TryGetString(object?, bool) Tries to get an long value from a deserialized JSON value. public static string? TryGetString(object? value, bool defaultEmptyString = false) Parameters value object The deserialized JSON value defaultEmptyString bool Flag to indicate if a default empty string should be returned instead of null Returns string Returns the value if present; null, otherwise. TryGetTraits(IReadOnlyDictionary<string, object?>, string, bool) Tries to get a trait dictionary value from a deserialized JSON object. public static IReadOnlyDictionary<string, IReadOnlyCollection<string>>? TryGetTraits(IReadOnlyDictionary<string, object?> obj, string key, bool defaultEmptyDictionary = true) Parameters obj IReadOnlyDictionary<string, object> The deserialized JSON object key string The key for the value defaultEmptyDictionary bool Flag to indicate if a default empty dictionary should be returned instead of null Returns IReadOnlyDictionary<string, IReadOnlyCollection<string>> TryGetTraits(object?) Tries to get a string value from a deserialized JSON value. public static IReadOnlyDictionary<string, IReadOnlyCollection<string>>? TryGetTraits(object? value) Parameters value object The deserialized JSON value Returns IReadOnlyDictionary<string, IReadOnlyCollection<string>> Returns the value if present; null, otherwise."
  },
  "v3/2.0.0/Xunit.Sdk.JsonObjectSerializer.html": {
    "href": "v3/2.0.0/Xunit.Sdk.JsonObjectSerializer.html",
    "title": "Class JsonObjectSerializer | xunit",
    "summary": "Class JsonObjectSerializer Namespace Xunit.Sdk Assembly xunit.v3.common.dll A special-purpose streaming serializer for objects to JSON. Only supports a limited number of type (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries). public sealed class JsonObjectSerializer : JsonSerializerBase, IDisposable Inheritance object JsonSerializerBase JsonObjectSerializer Implements IDisposable Inherited Members JsonSerializerBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) JsonSerializerExtensions.SerializeIntArray(JsonObjectSerializer, string, IEnumerable<int>?, bool) JsonSerializerExtensions.SerializeStringArray(JsonObjectSerializer, string, IEnumerable<string?>?, bool) JsonSerializerExtensions.SerializeTraits(JsonObjectSerializer, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>, bool) Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Constructors JsonObjectSerializer(StringBuilder, Action?) A special-purpose streaming serializer for objects to JSON. Only supports a limited number of type (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries). public JsonObjectSerializer(StringBuilder buffer, Action? disposeNotifier = null) Parameters buffer StringBuilder The buffer to write JSON to disposeNotifier Action An optional callback to be notified when disposed Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Methods Serialize(string, Enum?, bool) Serialize an Enum value into the object. public void Serialize(string key, Enum? value, bool includeNullValues = false) Parameters key string The name of the value value Enum The value includeNullValues bool Set to true to serialize a null value, or false to skip it Serialize(string, bool?, bool) Serialize a bool value into the object. public void Serialize(string key, bool? value, bool includeNullValues = false) Parameters key string The name of the value value bool? The value includeNullValues bool Set to true to serialize a null value, or false to skip it Serialize(string, DateTimeOffset?, bool) Serialize a DateTimeOffset value into the object. public void Serialize(string key, DateTimeOffset? value, bool includeNullValues = false) Parameters key string The name of the value value DateTimeOffset? The value includeNullValues bool Set to true to serialize a null value, or false to skip it Serialize(string, decimal?, bool) Serialize a decimal value into the object. public void Serialize(string key, decimal? value, bool includeNullValues = false) Parameters key string The name of the value value decimal? The value includeNullValues bool Set to true to serialize a null value, or false to skip it Serialize(string, int?, bool) Serialize an int value into the object. public void Serialize(string key, int? value, bool includeNullValues = false) Parameters key string The name of the value value int? The value includeNullValues bool Set to true to serialize a null value, or false to skip it Serialize(string, long?, bool) Serialize a long value into the object. public void Serialize(string key, long? value, bool includeNullValues = false) Parameters key string The name of the value value long? The value includeNullValues bool Set to true to serialize a null value, or false to skip it Serialize(string, string?, bool, bool) Serialize a string value into the object. public void Serialize(string key, string? value, bool includeNullValues = false, bool includeEmptyValues = true) Parameters key string The name of the value value string The value includeNullValues bool Set to true to serialize a null value, or false to skip it includeEmptyValues bool Set to true to serialize empty strings, or false to skip it SerializeArray(string) Start serializing an array into the object. public JsonArraySerializer SerializeArray(string key) Parameters key string The name of the array Returns JsonArraySerializer Remarks IMPORTANT: This serializer must be used completely and disposed before any other value is serialized into the object, or the serialization would be corrupted. SerializeNull(string) Serialize a null value into the object. public void SerializeNull(string key) Parameters key string The name of the null value SerializeObject(string) Start serializing an object into the object. public JsonObjectSerializer SerializeObject(string key) Parameters key string The name of the object Returns JsonObjectSerializer Remarks IMPORTANT: This serializer must be used completely and disposed before any other value is serialized into the object, or the serialization would be corrupted."
  },
  "v3/2.0.0/Xunit.Sdk.JsonSerializerBase.html": {
    "href": "v3/2.0.0/Xunit.Sdk.JsonSerializerBase.html",
    "title": "Class JsonSerializerBase | xunit",
    "summary": "Class JsonSerializerBase Namespace Xunit.Sdk Assembly xunit.v3.common.dll Base class used for streaming JSON serialization. public abstract class JsonSerializerBase : IDisposable Inheritance object JsonSerializerBase Implements IDisposable Derived JsonArraySerializer JsonObjectSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Constructors JsonSerializerBase(StringBuilder, Action?, char?, char?) Initializes a new instance of the JsonSerializerBase class. protected JsonSerializerBase(StringBuilder buffer, Action? disposeNotifier = null, char? open = null, char? close = null) Parameters buffer StringBuilder The buffer to write JSON to disposeNotifier Action A callback to be notified when disposed open char? The character to write when starting (i.e., '[' for arrays) close char? The character to write when finishing (i.e., ']' for arrays) Properties Buffer protected StringBuilder Buffer { get; } Property Value StringBuilder Methods Dispose() public void Dispose() WriteSeparator() protected void WriteSeparator() WriteValue(Enum?) protected void WriteValue(Enum? value) Parameters value Enum WriteValue(bool?) protected void WriteValue(bool? value) Parameters value bool? WriteValue(DateTimeOffset?) protected void WriteValue(DateTimeOffset? value) Parameters value DateTimeOffset? WriteValue(decimal?) protected void WriteValue(decimal? value) Parameters value decimal? WriteValue(int?) protected void WriteValue(int? value) Parameters value int? WriteValue(long?) protected void WriteValue(long? value) Parameters value long? WriteValue(string?) protected void WriteValue(string? value) Parameters value string"
  },
  "v3/2.0.0/Xunit.Sdk.JsonSerializerExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.JsonSerializerExtensions.html",
    "title": "Class JsonSerializerExtensions | xunit",
    "summary": "Class JsonSerializerExtensions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Extension methods for the JSON serialization types. public static class JsonSerializerExtensions Inheritance object JsonSerializerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SerializeIntArray(JsonObjectSerializer, string, IEnumerable<int>?, bool) Serializes an array of integers into the object. public static void SerializeIntArray(this JsonObjectSerializer serializer, string key, IEnumerable<int>? values, bool includeNullArray = false) Parameters serializer JsonObjectSerializer key string The key to serialize the array to values IEnumerable<int> The values in the array includeNullArray bool Whether to serialize the array if it's null SerializeStringArray(JsonObjectSerializer, string, IEnumerable<string?>?, bool) Serializes an array of strings into the object. public static void SerializeStringArray(this JsonObjectSerializer serializer, string key, IEnumerable<string?>? values, bool includeNullArray = false) Parameters serializer JsonObjectSerializer key string The key to serialize the array to values IEnumerable<string> The values in the array includeNullArray bool Whether to serialize the array if it's null SerializeTraits(JsonObjectSerializer, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>, bool) Serialize a trait dictionary value into the object. public static void SerializeTraits(this JsonObjectSerializer serializer, string key, IReadOnlyDictionary<string, IReadOnlyCollection<string>> dictionary, bool includeEmptyTraits = false) Parameters serializer JsonObjectSerializer key string The name of the value dictionary IReadOnlyDictionary<string, IReadOnlyCollection<string>> The trait dictionary includeEmptyTraits bool A flag to indicate whether to render empty traits"
  },
  "v3/2.0.0/Xunit.Sdk.JsonTypeIDAttribute.html": {
    "href": "v3/2.0.0/Xunit.Sdk.JsonTypeIDAttribute.html",
    "title": "Class JsonTypeIDAttribute | xunit",
    "summary": "Class JsonTypeIDAttribute Namespace Xunit.Sdk Assembly xunit.v3.common.dll Used to decorate concrete serializable classes that implement IMessageSinkMessage to indicate what the serialized type ID should be. The type IDs must be unique, and only assigned to concrete types that will be serialized and deserialized. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class JsonTypeIDAttribute : Attribute Inheritance object Attribute JsonTypeIDAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ReflectionExtensions.GetMatchingCustomAttributes(Attribute, string) ReflectionExtensions.GetMatchingCustomAttributes(Attribute, Type) ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Constructors JsonTypeIDAttribute(string) Used to decorate concrete serializable classes that implement IMessageSinkMessage to indicate what the serialized type ID should be. The type IDs must be unique, and only assigned to concrete types that will be serialized and deserialized. public JsonTypeIDAttribute(string id) Parameters id string The JSON type ID Remarks These types are made public for third parties only for the purpose of serializing and deserializing messages that are sent across the process boundary (that is, types which implement IMessageSinkMessage). Any other usage is not supported. Properties ID public string ID { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.LongLivedMarshalByRefObject.html": {
    "href": "v3/2.0.0/Xunit.Sdk.LongLivedMarshalByRefObject.html",
    "title": "Class LongLivedMarshalByRefObject | xunit",
    "summary": "Class LongLivedMarshalByRefObject Namespace Xunit.Sdk Assembly xunit.v3.runner.utility.netfx.dll Base class for all long-lived objects that may cross over an AppDomain. public abstract class LongLivedMarshalByRefObject : MarshalByRefObject Inheritance object MarshalByRefObject LongLivedMarshalByRefObject Derived Xunit2Options Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [SecurityCritical] public override sealed object InitializeLifetimeService() Returns object An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LeaseManagerPollTime property. Exceptions SecurityException The immediate caller does not have infrastructure permission."
  },
  "v3/2.0.0/Xunit.Sdk.MatchesException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.MatchesException.html",
    "title": "Class MatchesException | xunit",
    "summary": "Class MatchesException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Matches fails. public class MatchesException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException MatchesException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForMatchNotFound(string, string?) Creates a new instance of the MatchesException class to be thrown when the regular expression pattern isn't found within the value. public static MatchesException ForMatchNotFound(string expectedRegexPattern, string? actual) Parameters expectedRegexPattern string The expected regular expression pattern actual string The actual value Returns MatchesException"
  },
  "v3/2.0.0/Xunit.Sdk.MessageSinkMessageExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.MessageSinkMessageExtensions.html",
    "title": "Class MessageSinkMessageExtensions | xunit",
    "summary": "Class MessageSinkMessageExtensions Namespace Xunit.Sdk Assembly xunit.v3.runner.common.dll Extension methods for IMessageSinkMessage. public static class MessageSinkMessageExtensions Inheritance object MessageSinkMessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DispatchWhen<TMessage>(IMessageSinkMessage, MessageHandler<TMessage>?) Handles a message of a specific type by testing it for the type, as well as verifying that there is a registered callback. public static bool DispatchWhen<TMessage>(this IMessageSinkMessage message, MessageHandler<TMessage>? callback) where TMessage : IMessageSinkMessage Parameters message IMessageSinkMessage The message to dispatch. callback MessageHandler<TMessage> The callback to dispatch the message to. Returns bool Returns true if processing should continue; false otherwise. Type Parameters TMessage ToTestCaseDiscovered(ITestCase) Converts an instance of ITestCase into ITestCaseDiscovered for reporting back to a remote meta-runner. public static ITestCaseDiscovered ToTestCaseDiscovered(this ITestCase testCase) Parameters testCase ITestCase Returns ITestCaseDiscovered WithSourceInfo(ITestCaseDiscovered, string?, int?) Creates a new ITestCaseDiscovered, replacing the source file and line number information with the provided values. public static ITestCaseDiscovered WithSourceInfo(this ITestCaseDiscovered discovered, string? sourceFilePath, int? sourceLineNumber) Parameters discovered ITestCaseDiscovered sourceFilePath string The source file sourceLineNumber int? The line number Returns ITestCaseDiscovered"
  },
  "v3/2.0.0/Xunit.Sdk.MultipleException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.MultipleException.html",
    "title": "Class MultipleException | xunit",
    "summary": "Class MultipleException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Multiple fails w/ multiple errors (when a single error occurs, it is thrown directly). public class MultipleException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException MultipleException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties InnerExceptions Gets the list of inner exceptions that were thrown. public IReadOnlyCollection<Exception> InnerExceptions { get; } Property Value IReadOnlyCollection<Exception> StackTrace public override string? StackTrace { get; } Property Value string Methods ForFailures(IReadOnlyCollection<Exception>) Creates a new instance of the MultipleException class to be thrown when Multiple(params Action[]) caught 2 or more exceptions. public static MultipleException ForFailures(IReadOnlyCollection<Exception> innerExceptions) Parameters innerExceptions IReadOnlyCollection<Exception> The inner exceptions Returns MultipleException"
  },
  "v3/2.0.0/Xunit.Sdk.NotEmptyException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NotEmptyException.html",
    "title": "Class NotEmptyException | xunit",
    "summary": "Class NotEmptyException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.NotEmpty fails. public class NotEmptyException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NotEmptyException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNonEmptyCollection() Creates a new instance of the NotEmptyException class to be thrown when a collection was unexpectedly empty. public static NotEmptyException ForNonEmptyCollection() Returns NotEmptyException"
  },
  "v3/2.0.0/Xunit.Sdk.NotEqualException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NotEqualException.html",
    "title": "Class NotEqualException | xunit",
    "summary": "Class NotEqualException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.NotEqual fails. public class NotEqualException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NotEqualException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForEqualCollections(string, string, string?) Creates a new instance of NotEqualException to be thrown when two collections are equal. public static NotEqualException ForEqualCollections(string expected, string actual, string? collectionDisplay = null) Parameters expected string The expected collection actual string The actual collection collectionDisplay string The display name for the collection type (defaults to \"Collections\") Returns NotEqualException ForEqualCollectionsWithError(int?, string, int?, string, int?, Exception?, string?) Creates a new instance of NotEqualException to be thrown when two collections are equal, and an error has occurred during comparison. public static NotEqualException ForEqualCollectionsWithError(int? mismatchedIndex, string expected, int? expectedPointer, string actual, int? actualPointer, Exception? error = null, string? collectionDisplay = null) Parameters mismatchedIndex int? The index at which the collections error occurred (should be null when error is null) expected string The expected collection expectedPointer int? The spacing into the expected collection where the difference occurs (should be null when error is null) actual string The actual collection actualPointer int? The spacing into the actual collection where the difference occurs (should be null when error is null) error Exception The optional exception that was thrown during comparison collectionDisplay string The display name for the collection type (defaults to \"Collections\") Returns NotEqualException ForEqualValues(string, string, string?) Creates a new instance of NotEqualException to be thrown when two values are equal. This may be simple values (like intrinsics) or complex values (like classes or structs). public static NotEqualException ForEqualValues(string expected, string actual, string? banner = null) Parameters expected string The expected value actual string The actual value banner string The banner to show; if null, then the standard banner of \"Values are equal\" will be used Returns NotEqualException ForEqualValuesWithError(string, string, Exception?, string?) Creates a new instance of NotEqualException to be thrown when two values are equal. This may be simple values (like intrinsics) or complex values (like classes or structs). Used when an error has occurred during comparison. public static NotEqualException ForEqualValuesWithError(string expected, string actual, Exception? error = null, string? banner = null) Parameters expected string The expected value actual string The actual value error Exception The optional exception that was thrown during comparison banner string The banner to show; if null, then the standard banner of \"Values are equal\" will be used. If error is not null, then the banner used will always be \"Exception thrown during comparison\", regardless of the value passed here. Returns NotEqualException"
  },
  "v3/2.0.0/Xunit.Sdk.NotInRangeException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NotInRangeException.html",
    "title": "Class NotInRangeException | xunit",
    "summary": "Class NotInRangeException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.NotInRange fails. public class NotInRangeException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NotInRangeException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForValueInRange(object, object, object) Creates a new instance of the NotInRangeException class to be thrown when a value was unexpected with the range of two other values. public static NotInRangeException ForValueInRange(object actual, object low, object high) Parameters actual object The actual object value low object The low value of the range high object The high value of the range Returns NotInRangeException"
  },
  "v3/2.0.0/Xunit.Sdk.NotNullException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NotNullException.html",
    "title": "Class NotNullException | xunit",
    "summary": "Class NotNullException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.NotNull fails. public class NotNullException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NotNullException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNullStruct(Type) Creates a new instance of the NotNullException class to be throw when a nullable struct is null. public static Exception ForNullStruct(Type type) Parameters type Type The inner type of the value Returns Exception ForNullValue() Creates a new instance of the NotNullException class to be thrown when a reference value is null. public static NotNullException ForNullValue() Returns NotNullException"
  },
  "v3/2.0.0/Xunit.Sdk.NotSameException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NotSameException.html",
    "title": "Class NotSameException | xunit",
    "summary": "Class NotSameException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.NotSame fails. public class NotSameException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NotSameException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForSameValues() Creates a new instance of the NotSameException class to be thrown when two values are the same instance. public static NotSameException ForSameValues() Returns NotSameException"
  },
  "v3/2.0.0/Xunit.Sdk.NotStrictEqualException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NotStrictEqualException.html",
    "title": "Class NotStrictEqualException | xunit",
    "summary": "Class NotStrictEqualException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.NotStrictEqual fails. public class NotStrictEqualException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NotStrictEqualException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForEqualValues(string, string) Creates a new instance of NotStrictEqualException to be thrown when two values are strictly equal. public static NotStrictEqualException ForEqualValues(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns NotStrictEqualException"
  },
  "v3/2.0.0/Xunit.Sdk.NullException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NullException.html",
    "title": "Class NullException | xunit",
    "summary": "Class NullException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Null fails. public class NullException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException NullException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNonNullStruct<T>(Type, T?) Creates a new instance of the NullException class to be thrown when the given nullable struct was unexpectedly not null. public static Exception ForNonNullStruct<T>(Type type, T? actual) where T : struct Parameters type Type The inner type of the value actual T? The actual non-null value Returns Exception Type Parameters T ForNonNullValue(object) Creates a new instance of the NullException class to be thrown when the given value was unexpectedly not null. public static NullException ForNonNullValue(object actual) Parameters actual object The actual non-null value Returns NullException"
  },
  "v3/2.0.0/Xunit.Sdk.NullMessageSink.html": {
    "href": "v3/2.0.0/Xunit.Sdk.NullMessageSink.html",
    "title": "Class NullMessageSink | xunit",
    "summary": "Class NullMessageSink Namespace Xunit.Sdk Assembly xunit.v3.common.dll An implementation of IMessageSink that ignores all messages. public class NullMessageSink : IMessageSink Inheritance object NullMessageSink Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Instance Gets the singleton null message sink instance. public static NullMessageSink Instance Field Value NullMessageSink Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.Sdk.ParallelAlgorithm.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ParallelAlgorithm.html",
    "title": "Enum ParallelAlgorithm | xunit",
    "summary": "Enum ParallelAlgorithm Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates the parallelization algorithm to use. public enum ParallelAlgorithm Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Aggressive = 1 The aggressive parallelization algorithm uses a synchronization context to limit the number of running tests to be equal to the desired parallel thread count. This has the effect of being able to use the CPU more effectively since there are typically most tests capable of running than there are CPU cores, at the expense of tests that have already started being put into the back of a long queue before they can run again. Conservative = 0 The conservative parallelization algorithm uses a semaphore to limit the number of started tests to be equal to the desired parallel thread count. This has the effect of allowing tests that have started to finish faster, since there are no extra tests competing for a chance to run, at the expense that CPU utilization will be lowered if the test project spaws a lot of async tests that have significant wait times."
  },
  "v3/2.0.0/Xunit.Sdk.ProperSubsetException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ProperSubsetException.html",
    "title": "Class ProperSubsetException | xunit",
    "summary": "Class ProperSubsetException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.ProperSubset fails. public class ProperSubsetException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException ProperSubsetException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailure(string, string) Creates a new instance of the ProperSubsetException class to be thrown when a set is not a proper subset of another set public static ProperSubsetException ForFailure(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns ProperSubsetException"
  },
  "v3/2.0.0/Xunit.Sdk.ProperSupersetException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ProperSupersetException.html",
    "title": "Class ProperSupersetException | xunit",
    "summary": "Class ProperSupersetException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.ProperSuperset fails. public class ProperSupersetException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException ProperSupersetException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailure(string, string) Creates a new instance of the ProperSupersetException class to be thrown when a set is not a proper superset of another set public static ProperSupersetException ForFailure(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns ProperSupersetException"
  },
  "v3/2.0.0/Xunit.Sdk.PropertyChangedException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.PropertyChangedException.html",
    "title": "Class PropertyChangedException | xunit",
    "summary": "Class PropertyChangedException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.PropertyChanged fails. public class PropertyChangedException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException PropertyChangedException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForUnsetProperty(string) Creates a new instance of the PropertyChangedException class to be thrown when a property was unexpectedly not set. public static PropertyChangedException ForUnsetProperty(string propertyName) Parameters propertyName string The name of the property that was expected to be changed. Returns PropertyChangedException"
  },
  "v3/2.0.0/Xunit.Sdk.RaisesAnyException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.RaisesAnyException.html",
    "title": "Class RaisesAnyException | xunit",
    "summary": "Class RaisesAnyException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.RaisesAny fails. public class RaisesAnyException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException RaisesAnyException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNoEvent(Type) Creates a new instance of the RaisesAnyException class to be thrown when no event was raised. public static RaisesAnyException ForNoEvent(Type expected) Parameters expected Type The type of the event args that was expected Returns RaisesAnyException"
  },
  "v3/2.0.0/Xunit.Sdk.RaisesException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.RaisesException.html",
    "title": "Class RaisesException | xunit",
    "summary": "Class RaisesException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Raises fails. public class RaisesException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException RaisesException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForIncorrectType(Type, Type) Creates a new instance of the RaisesException class to be thrown when the raised event wasn't the expected type. public static RaisesException ForIncorrectType(Type expected, Type actual) Parameters expected Type The type of the event args that was expected actual Type The type of the event args that was actually raised Returns RaisesException ForNoEvent() Creates a new instance of the RaisesException class to be thrown when no event (without data) was raised. public static RaisesException ForNoEvent() Returns RaisesException ForNoEvent(Type) Creates a new instance of the RaisesException class to be thrown when no event (with data) was raised. public static RaisesException ForNoEvent(Type expected) Parameters expected Type The type of the event args that was expected Returns RaisesException"
  },
  "v3/2.0.0/Xunit.Sdk.Randomizer.html": {
    "href": "v3/2.0.0/Xunit.Sdk.Randomizer.html",
    "title": "Class Randomizer | xunit",
    "summary": "Class Randomizer Namespace Xunit.Sdk Assembly xunit.v3.common.dll Wraps Random to provide access to the seed value, as well as the ability to reset the current randomizer with a new seed value. public static class Randomizer Inheritance object Randomizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current Gets the current instance that returns random values based on the current Seed value. public static Random Current { get; } Property Value Random Seed Gets the seed used to create the randomizer. public static int Seed { get; set; } Property Value int"
  },
  "v3/2.0.0/Xunit.Sdk.ReflectionExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | xunit",
    "summary": "Class ReflectionExtensions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Extension methods for reflection types in .NET. public static class ReflectionExtensions Inheritance object ReflectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDefaultValue(Type) Returns the default value for the given type. For value types, this means a 0-initialized instance of the type; for reference types, this means null. public static object? GetDefaultValue(this Type type) Parameters type Type The type to get the default value of. Returns object The default value for the given type. GetDisplayNameWithArguments(MethodInfo, string, object?[]?, Type[]?) Formulates the extended portion of the display name for a test method. For tests with no arguments, this will return just the base name; for tests with arguments, attempts to format the arguments and appends the argument list to the test name. public static string GetDisplayNameWithArguments(this MethodInfo method, string baseDisplayName, object?[]? arguments, Type[]? genericTypes) Parameters method MethodInfo The test method baseDisplayName string The base part of the display name arguments object[] The test method arguments genericTypes Type[] The test method's generic types Returns string The full display name for the test method GetMatchingCustomAttributes(Attribute, string) Gets all the custom attributes for the attribute that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this Attribute attribute, string assemblyQualifiedTypeName) Parameters attribute Attribute The attribute to get custom attributes for. assemblyQualifiedTypeName string The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the attribute GetMatchingCustomAttributes(Attribute, Type) Gets all the custom attributes for the attribute that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this Attribute attribute, Type attributeType) Parameters attribute Attribute The attribute to get custom attributes for. attributeType Type The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the attribute GetMatchingCustomAttributes(Assembly, string) Gets all the custom attributes for the assembly that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this Assembly assembly, string assemblyQualifiedTypeName) Parameters assembly Assembly The assembly to get custom attributes for. assemblyQualifiedTypeName string The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the assembly GetMatchingCustomAttributes(Assembly, Type) Gets all the custom attributes for the assembly that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this Assembly assembly, Type attributeType) Parameters assembly Assembly The assembly to get custom attributes for. attributeType Type The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the assembly GetMatchingCustomAttributes(MethodInfo, string) Gets all the custom attributes for the method that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this MethodInfo method, string assemblyQualifiedTypeName) Parameters method MethodInfo The method to get custom attributes for. assemblyQualifiedTypeName string The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the method GetMatchingCustomAttributes(MethodInfo, Type) Gets all the custom attributes for the method that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this MethodInfo method, Type attributeType) Parameters method MethodInfo The method to get custom attributes for. attributeType Type The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the method GetMatchingCustomAttributes(ParameterInfo, string) Gets all the custom attributes for the parameter that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this ParameterInfo parameter, string assemblyQualifiedTypeName) Parameters parameter ParameterInfo The parameter to get custom attributes for. assemblyQualifiedTypeName string The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the parameter GetMatchingCustomAttributes(ParameterInfo, Type) Gets all the custom attributes for the parameter that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this ParameterInfo parameter, Type attributeType) Parameters parameter ParameterInfo The parameter to get custom attributes for. attributeType Type The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the parameter GetMatchingCustomAttributes(Type, string) Gets all the custom attributes for the type that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this Type type, string assemblyQualifiedTypeName) Parameters type Type The type to get custom attributes for. assemblyQualifiedTypeName string The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the type GetMatchingCustomAttributes(Type, Type) Gets all the custom attributes for the type that are of the given attribute type. public static IReadOnlyCollection<Attribute> GetMatchingCustomAttributes(this Type type, Type attributeType) Parameters type Type The type to get custom attributes for. attributeType Type The type of the attribute to find. Will accept attribute types that are concrete, closed generic, and open generic. When provided an open generic type (e.g., MyAttribute<>) it will return matching closed generic attributes (e.g., MyAttribute>int<) Returns IReadOnlyCollection<Attribute> The matching attributes that decorate the type Implements(Type, Type) Determines if the given type implements the given interface. public static bool Implements(this Type type, Type interfaceType) Parameters type Type The type to check interfaceType Type The interface type to look for Returns bool Returns true if the type implements the interface; false, otherwise IsFromLocalAssembly(Type) Determines if the given type is from a local assembly. public static bool IsFromLocalAssembly(this Type type) Parameters type Type The type to verify Returns bool Returns true if the type originates in a local assembly; false if the type originates in the GAC. IsNullable(Type) Determines whether type is a nullable type; that is, whether it is a reference type or it represents Nullable<T> for a value type. public static bool IsNullable(this Type type) Parameters type Type Returns bool IsNullableEnum(Type) Determines whether type represents a nullable enum value. public static bool IsNullableEnum(this Type type) Parameters type Type Returns bool ResolveGenericTypes(MethodInfo, object?[]) Resolves all the generic types for a test method. The arguments are used to determine the best matching generic types for the method that can be satisfied by all the generic parameters and their argument values. public static Type[] ResolveGenericTypes(this MethodInfo method, object?[] arguments) Parameters method MethodInfo The method arguments object[] The argument values being passed to the method Returns Type[] The best matching generic types ResolveMethodArguments(MethodBase, object?[]) Resolves argument values for the test method, ensuring they are the correct type, including support for optional method arguments. public static object?[] ResolveMethodArguments(this MethodBase testMethod, object?[] arguments) Parameters testMethod MethodBase The test method to resolve. arguments object[] The user-supplied method arguments. Returns object[] The argument values SafeName(Type) Gets a fully qualified type name (i.e., FullName), falling back to a simple type name (i.e., Name) when a fully qualified name is not available. Typically used when presenting type names to the user, or to guarantee the type name is never null. public static string SafeName(this Type type) Parameters type Type Returns string ToCommaSeparatedList(IEnumerable<Type?>, string) Convert a collection of Type objects into a comma-separated list for display purposes. public static string ToCommaSeparatedList(this IEnumerable<Type?> types, string nullDisplay = \"(null)\") Parameters types IEnumerable<Type> nullDisplay string Returns string ToDisplayName(Type) Converts a type into a name string for display purposes. It attempts to make a more user friendly name than FullName would give, especially when the type is generic. public static string ToDisplayName(this Type type) Parameters type Type Returns string ToSimpleName(Type) Gets the simple name for a type, suitable for use with TestClassSimpleName. public static string ToSimpleName(this Type type) Parameters type Type Returns string ToVSTestTypeName(Type, MethodInfo?, Type?) Converts a Type name into the correct form for VSTest managed type name for using in managed TestCase properties and by xunit.runner.visualstudio. public static string ToVSTestTypeName(this Type type, MethodInfo? testMethod = null, Type? testClass = null) Parameters type Type testMethod MethodInfo testClass Type Returns string Remarks See https://github.com/microsoft/vstest/blob/main/docs/RFCs/0017-Managed-TestCase-Properties.md UnwrapNullable(Type) Attempts to strip Nullable<T> from a type value and just return T. For non-nullable types, will return the type that was passed in. public static Type UnwrapNullable(this Type type) Parameters type Type Returns Type"
  },
  "v3/2.0.0/Xunit.Sdk.RegisterXunitSerializerAttribute.html": {
    "href": "v3/2.0.0/Xunit.Sdk.RegisterXunitSerializerAttribute.html",
    "title": "Class RegisterXunitSerializerAttribute | xunit",
    "summary": "Class RegisterXunitSerializerAttribute Namespace Xunit.Sdk Assembly xunit.v3.common.dll Used to decorate xUnit.net test assemblies to register an external serializer for one or more supports types to serialize. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)] public sealed class RegisterXunitSerializerAttribute : Attribute, IRegisterXunitSerializerAttribute Inheritance object Attribute RegisterXunitSerializerAttribute Implements IRegisterXunitSerializerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ReflectionExtensions.GetMatchingCustomAttributes(Attribute, string) ReflectionExtensions.GetMatchingCustomAttributes(Attribute, Type) ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors RegisterXunitSerializerAttribute(Type, params Type[]) Used to decorate xUnit.net test assemblies to register an external serializer for one or more supports types to serialize. public RegisterXunitSerializerAttribute(Type serializerType, params Type[] supportedTypesForSerialization) Parameters serializerType Type The type of the serializer. Must implement IXunitSerializer. supportedTypesForSerialization Type[] The types that are supported by the serializer. Properties SerializerType Gets the type of the serializer. public Type SerializerType { get; } Property Value Type Remarks The serializer type must implement IXunitSerializer. SupportedTypesForSerialization Gets the types that are supported by the serializer. public Type[] SupportedTypesForSerialization { get; } Property Value Type[] Remarks When searching for a serializer to deserialize a value, exact type matches are given higher priority than compatible type matches, and if more than one serializer can support a given type based on compatible type match, then one will be chosen arbitrarily to support the deserialization."
  },
  "v3/2.0.0/Xunit.Sdk.SameException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.SameException.html",
    "title": "Class SameException | xunit",
    "summary": "Class SameException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Same fails. public class SameException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException SameException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailure(string, string) Creates a new instance of the SameException class to be thrown when two values are not the same instance. public static SameException ForFailure(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns SameException"
  },
  "v3/2.0.0/Xunit.Sdk.SerializationHelper.html": {
    "href": "v3/2.0.0/Xunit.Sdk.SerializationHelper.html",
    "title": "Class SerializationHelper | xunit",
    "summary": "Class SerializationHelper Namespace Xunit.Sdk Assembly xunit.v3.common.dll Serializes and de-serializes objects. It supports a limited set of built-in types, as well as anything which implements IXunitSerializable. Custom serializers can implement IXunitSerializer and register by decorating the test assembly with RegisterXunitSerializerAttribute. public class SerializationHelper Inheritance object SerializationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors SerializationHelper() Initializes a new instance of the SerializationHelper class. protected SerializationHelper() Properties Instance Gets the singleton instance of SerializationHelper. public static SerializationHelper Instance { get; } Property Value SerializationHelper Methods AddRegisteredSerializers(Assembly, List<string>?) Add serializers that have been registered in the given assembly. public void AddRegisteredSerializers(Assembly assembly, List<string>? warnings = null) Parameters assembly Assembly The assembly to get registrations from warnings List<string> An optional collection to receive warnings generated during the registration Remarks The warnings collection will include warnings in the following circumstances: When the serializer type that does not implement IXunitSerializer When the registration contains no support types to serialize When a supported type to serialize is duplicated with another serializer When a supported type is covered by a built-in serializer An exception is thrown while creating the serializer AddSerializers(IRegisterXunitSerializerAttribute[], List<string>?) Add serializers to the supported serializer list. protected void AddSerializers(IRegisterXunitSerializerAttribute[] registrations, List<string>? warnings = null) Parameters registrations IRegisterXunitSerializerAttribute[] The serialization registrations warnings List<string> An optional collection to receive warnings generated during the registration Remarks The warnings collection will include warnings in the following circumstances: When the serializer type that does not implement IXunitSerializer When the registration contains no support types to serialize When a supported type to serialize is duplicated with another serializer When a supported type is covered by a built-in serializer An exception is thrown while creating the serializer Deserialize(string) De-serializes an object. public object? Deserialize(string serializedValue) Parameters serializedValue string The serialized value Returns object The de-serialized object Deserialize<T>(string) De-serializes an object. public T? Deserialize<T>(string serializedValue) Parameters serializedValue string The object's serialized value Returns T The de-serialized object Type Parameters T The type of the object IsSerializable(object?) Determines if an object instance is serializable. public bool IsSerializable(object? value) Parameters value object The object to test for serializability. Returns bool Returns true if the object can be serialized; false, otherwise. Remarks As null values always return true, even if the underlying type (which is unknown) might not be serializable, it's better to test via IsSerializable(object?, Type?) whenever possible. IsSerializable(object?, Type?) Determines if a given type supports serialization. public bool IsSerializable(object? value, Type? type) Parameters value object The object to test for serializability. type Type The type to test for serializability. Returns bool Returns true if objects of the given type can be serialized; false, otherwise. Serialize(object?, Type?) Serializes an object. public string Serialize(object? value, Type? type = null) Parameters value object The value to be serialized type Type The type of the value to be serialized (cannot be null if value is null) Returns string The serialized object SerializedTypeNameToType(string) Converts a type name (in \"TypeName\" format for mscorlib types, or \"TypeName,AssemblyName\" format for all others) into a Type object. public static Type? SerializedTypeNameToType(string assemblyQualifiedTypeName) Parameters assemblyQualifiedTypeName string The assembly qualified type name (\"TypeName,AssemblyName\") Returns Type The instance of the Type, if available; null, otherwise. TypeToSerializedTypeName(Type) Gets an assembly qualified type name for serialization. public static string TypeToSerializedTypeName(Type value) Parameters value Type The type to get the name for Returns string A string in \"TypeName\" format (for mscorlib types) or \"TypeName,AssemblyName\" format (for all others)"
  },
  "v3/2.0.0/Xunit.Sdk.SingleException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.SingleException.html",
    "title": "Class SingleException | xunit",
    "summary": "Class SingleException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Single fails. public class SingleException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException SingleException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Empty(string?, string) Creates an new instance of the SingleException class to be thrown when the collection didn't contain any values (or didn't contain the expected value). public static SingleException Empty(string? expected, string collection) Parameters expected string The expected value (set to null for no expected value) collection string The collection Returns SingleException MoreThanOne(int, string?, string, ICollection<int>) Creates an new instance of the SingleException class to be thrown when the collection more than one value (or contained more than one of the expected value). public static SingleException MoreThanOne(int count, string? expected, string collection, ICollection<int> matchIndices) Parameters count int The number of items, or the number of matching items expected string The expected value (set to null for no expected value) collection string The collection matchIndices ICollection<int> The list of indices where matches occurred Returns SingleException"
  },
  "v3/2.0.0/Xunit.Sdk.SkipException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.SkipException.html",
    "title": "Class SkipException | xunit",
    "summary": "Class SkipException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Skip is called. public class SkipException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException SkipException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForSkip(string) Creates a new instance of the SkipException class to be thrown when a user wants to dynamically skip a test. Note that this only works in v3 and later of xUnit.net, as it requires runtime infrastructure changes. public static SkipException ForSkip(string message) Parameters message string Returns SkipException"
  },
  "v3/2.0.0/Xunit.Sdk.StartsWithException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.StartsWithException.html",
    "title": "Class StartsWithException | xunit",
    "summary": "Class StartsWithException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.StartsWith fails. public class StartsWithException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException StartsWithException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForStringNotFound(string?, string?) Creates an instance of the StartsWithException class to be thrown when a string does not start with the given value. public static StartsWithException ForStringNotFound(string? expected, string? actual) Parameters expected string The expected start actual string The actual value Returns StartsWithException"
  },
  "v3/2.0.0/Xunit.Sdk.StrictEqualException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.StrictEqualException.html",
    "title": "Class StrictEqualException | xunit",
    "summary": "Class StrictEqualException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.StrictEqual fails. public class StrictEqualException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException StrictEqualException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForEqualValues(string, string) Creates a new instance of StrictEqualException to be thrown when two values are not strictly equal. public static StrictEqualException ForEqualValues(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns StrictEqualException"
  },
  "v3/2.0.0/Xunit.Sdk.StringAssertEqualityComparer.html": {
    "href": "v3/2.0.0/Xunit.Sdk.StringAssertEqualityComparer.html",
    "title": "Class StringAssertEqualityComparer | xunit",
    "summary": "Class StringAssertEqualityComparer Namespace Xunit.Sdk Assembly xunit.v3.assert.dll This static class offers equivalence comparisons for string values public static class StringAssertEqualityComparer Inheritance object StringAssertEqualityComparer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Equivalent(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool) Compare two string values for equalivalence. public static AssertEqualityResult Equivalent(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected ReadOnlySpan<char> The expected string value. actual ReadOnlySpan<char> The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Returns AssertEqualityResult Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences. Equivalent(string?, string?, bool, bool, bool, bool) Compare two string values for equalivalence. public static AssertEqualityResult Equivalent(string? expected, string? actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false) Parameters expected string The expected string value. actual string The actual string value. ignoreCase bool If set to true, ignores cases differences. The invariant culture is used. ignoreLineEndingDifferences bool If set to true, treats \\r\\n, \\r, and \\n as equivalent. ignoreWhiteSpaceDifferences bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent. ignoreAllWhiteSpace bool If set to true, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent. Returns AssertEqualityResult Remarks The ignoreWhiteSpaceDifferences and ignoreAllWhiteSpace flags consider the following characters to be white-space: Tab (\\t), Space (\\u0020), No-Break Space (\\u00A0), Ogham Space Mark (\\u1680), Mongolian Vowel Separator (\\u180E), En Quad (\\u2000), Em Quad (\\u2001), En Space (\\u2002), Em Space (\\u2003), Three-Per-Em Space (\\u2004), Four-Per-Em Space (\\u2004), Six-Per-Em Space (\\u2006), Figure Space (\\u2007), Punctuation Space (\\u2008), Thin Space (\\u2009), Hair Space (\\u200A), Zero Width Space (\\u200B), Narrow No-Break Space (\\u202F), Medium Mathematical Space (\\u205F), Ideographic Space (\\u3000), and Zero Width No-Break Space (\\uFEFF). In particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by ignoreLineEndingDifferences."
  },
  "v3/2.0.0/Xunit.Sdk.SubsetException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.SubsetException.html",
    "title": "Class SubsetException | xunit",
    "summary": "Class SubsetException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Subset fails. public class SubsetException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException SubsetException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailure(string, string) Creates a new instance of the SubsetException class to be thrown when a set is not a subset of another set public static SubsetException ForFailure(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns SubsetException"
  },
  "v3/2.0.0/Xunit.Sdk.SupersetException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.SupersetException.html",
    "title": "Class SupersetException | xunit",
    "summary": "Class SupersetException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Superset fails. public class SupersetException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException SupersetException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForFailure(string, string) Creates a new instance of the SupersetException class to be thrown when a set is not a superset of another set public static SupersetException ForFailure(string expected, string actual) Parameters expected string The expected value actual string The actual value Returns SupersetException"
  },
  "v3/2.0.0/Xunit.Sdk.TestAttachment.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestAttachment.html",
    "title": "Class TestAttachment | xunit",
    "summary": "Class TestAttachment Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents an attachment to a test result. public class TestAttachment Inheritance object TestAttachment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestAttachment() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public TestAttachment() Properties AttachmentType Gets the type of the test attachment. public TestAttachmentType AttachmentType { get; } Property Value TestAttachmentType Methods AsByteArray() Gets the attachment content as a byte array, along with the media type. Can only be called when AttachmentType returns ByteArray. public (byte[] ByteArray, string MediaType) AsByteArray() Returns (byte[] ByteArray, string MediaType) AsString() Gets the attachment content as a string. Can only be called when AttachmentType returns String. public string AsString() Returns string Create(byte[], string) Creates an instance of TestAttachment that wraps a byte array value. public static TestAttachment Create(byte[] value, string mediaType) Parameters value byte[] The byte array value mediaType string The media type Returns TestAttachment Remarks The mediaType value must be in the MIME \"type/subtype\" form, and does not support parameter values. The subtype is allowed to have a single \"+\" to denote specialization of the subtype (i.e., \"application/xhtml+xml\"). For more information on media types, see https://datatracker.ietf.org/doc/html/rfc2045#section-5.1. Create(string) Creates an instance of TestAttachment that wraps a string value. public static TestAttachment Create(string value) Parameters value string Returns TestAttachment Parse(string) Parses a value that was obtained by calling ToString() back into a TestAttachment. public static TestAttachment Parse(string value) Parameters value string Returns TestAttachment ToString() Gets a string value for the test attachment. For string value attachments, will return the string value; for byte array values, it will return the base-64 encoded value of the bytes. public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Sdk.TestAttachmentType.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestAttachmentType.html",
    "title": "Enum TestAttachmentType | xunit",
    "summary": "Enum TestAttachmentType Namespace Xunit.Sdk Assembly xunit.v3.common.dll Gets the type of the test attachment public enum TestAttachmentType Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields ByteArray = 2 Indicates a test attachment that is an array of bytes. String = 1 Indicates a test attachment that is a string."
  },
  "v3/2.0.0/Xunit.Sdk.TestFrameworkOptionsReadExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestFrameworkOptionsReadExtensions.html",
    "title": "Class TestFrameworkOptionsReadExtensions | xunit",
    "summary": "Class TestFrameworkOptionsReadExtensions Namespace Xunit.Sdk Assembly xunit.v3.core.dll Extension methods for reading ITestFrameworkDiscoveryOptions and ITestFrameworkExecutionOptions. public static class TestFrameworkOptionsReadExtensions Inheritance object TestFrameworkOptionsReadExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AssertEquivalentMaxDepth(ITestFrameworkExecutionOptions) Gets a max recursive object depth for comparisons done with Assert.Equivalent. public static int? AssertEquivalentMaxDepth(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? Culture(ITestFrameworkDiscoveryOptions) Gets the culture to use for discovering tests. null uses the default OS culture; Empty uses the invariant culture; any other value passes the provided value to CultureInfo(string) and uses the resulting object with DefaultThreadCurrentCulture and DefaultThreadCurrentUICulture. public static string? Culture(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns string Culture(ITestFrameworkExecutionOptions) Gets the culture to use for running tests. null uses the default OS culture; Empty uses the invariant culture; any other value passes the provided value to CultureInfo(string) and uses the resulting object with DefaultThreadCurrentCulture and DefaultThreadCurrentUICulture. public static string? Culture(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns string DiagnosticMessages(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether diagnostic messages will be emitted. public static bool? DiagnosticMessages(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? DiagnosticMessages(ITestFrameworkExecutionOptions) Gets a flag that determines whether diagnostic messages will be emitted. public static bool? DiagnosticMessages(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? DiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not present, returns the default value (false). public static bool DiagnosticMessagesOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool DiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions) Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not present, returns the default value (false). public static bool DiagnosticMessagesOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool DisableParallelization(ITestFrameworkExecutionOptions) Gets a flag to disable parallelization. public static bool? DisableParallelization(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? DisableParallelizationOrDefault(ITestFrameworkExecutionOptions) Gets a flag to disable parallelization. If the flag is not present, returns the default value (false). public static bool DisableParallelizationOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool ExplicitOption(ITestFrameworkExecutionOptions) Gets a flag that indicates how to handle explicit tests. public static ExplicitOption? ExplicitOption(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ExplicitOption? ExplicitOptionOrDefault(ITestFrameworkExecutionOptions) Gets a flag that indicates how to handle explicit tests. If the flag is not present, returns the default value (Off). public static ExplicitOption ExplicitOptionOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ExplicitOption FailSkips(ITestFrameworkExecutionOptions) Gets a flag to fail skipped tests. public static bool? FailSkips(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? FailSkipsOrDefault(ITestFrameworkExecutionOptions) Gets a flag to fail skipped tests. If the flag is not present, returns the default value (false). public static bool FailSkipsOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool FailTestsWithWarnings(ITestFrameworkExecutionOptions) Gets a flag to fail passing tests with warnings. public static bool? FailTestsWithWarnings(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? FailTestsWithWarningsOrDefault(ITestFrameworkExecutionOptions) Gets a flag to fail passing tests with warnings. If the flag is not present, returns the default value (false). public static bool FailTestsWithWarningsOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool IncludeSourceInformation(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether discovered test cases should include source information. Note that not all runners have access to source information, so this flag does not guarantee that source information will be provided. public static bool? IncludeSourceInformation(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? IncludeSourceInformationOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether discovered test cases should include source information. Note that not all runners have access to source information, so this flag does not guarantee that source information will be provided. If the flag is not present, returns the default value (false). public static bool IncludeSourceInformationOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool MaxParallelThreads(ITestFrameworkExecutionOptions) Gets the maximum number of threads to use when running tests in parallel. public static int? MaxParallelThreads(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? MaxParallelThreadsOrDefault(ITestFrameworkExecutionOptions) Gets the maximum number of threads to use when running tests in parallel. If set to 0 (or not set), the value of ProcessorCount is used; if set to a value less than 0, does not limit the number of threads. public static int MaxParallelThreadsOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int MethodDisplay(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display name format for test methods. public static TestMethodDisplay? MethodDisplay(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplay? MethodDisplayOptions(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display options to format test methods. public static TestMethodDisplayOptions? MethodDisplayOptions(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplayOptions? MethodDisplayOptionsOrDefault(ITestFrameworkDiscoveryOptions) Gets the options that determine the default display formatting options for test methods. If no options are not present, returns the default value (None). public static TestMethodDisplayOptions MethodDisplayOptionsOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplayOptions MethodDisplayOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display name format for test methods. If the flag is not present, returns the default value (ClassAndMethod). public static TestMethodDisplay MethodDisplayOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplay ParallelAlgorithm(ITestFrameworkExecutionOptions) Gets the parallel algorithm to be used. public static ParallelAlgorithm? ParallelAlgorithm(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ParallelAlgorithm? ParallelAlgorithmOrDefault(ITestFrameworkExecutionOptions) Gets the parallel algorithm to be used. If the flag is not present, return the default value (Conservative). public static ParallelAlgorithm ParallelAlgorithmOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ParallelAlgorithm PreEnumerateTheories(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the discovery system will return a test case for each row of test data; they are disabled, then the discovery system will return a single test case for the theory. public static bool? PreEnumerateTheories(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? PreEnumerateTheoriesOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether theories are pre-enumerated. If enabled, then the discovery system will return a test case for each row of test data; if disabled, then the discovery system will return a single test case for the theory. If the flag is not present, returns the default value (false). public static bool PreEnumerateTheoriesOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool PrintMaxEnumerableLength(ITestFrameworkDiscoveryOptions) Gets the maximum length for printing collections. public static int? PrintMaxEnumerableLength(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? PrintMaxEnumerableLength(ITestFrameworkExecutionOptions) Gets the maximum length for printing collections. public static int? PrintMaxEnumerableLength(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? PrintMaxObjectDepth(ITestFrameworkDiscoveryOptions) Gets the maximum recursive depth for printing objects. public static int? PrintMaxObjectDepth(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? PrintMaxObjectDepth(ITestFrameworkExecutionOptions) Gets the maximum recursive depth for printing objects. public static int? PrintMaxObjectDepth(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? PrintMaxObjectMemberCount(ITestFrameworkDiscoveryOptions) Gets the maximum numbers of members to show for printing objects. public static int? PrintMaxObjectMemberCount(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? PrintMaxObjectMemberCount(ITestFrameworkExecutionOptions) Gets the maximum numbers of members to show for printing objects. public static int? PrintMaxObjectMemberCount(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? PrintMaxStringLength(ITestFrameworkDiscoveryOptions) Gets the maximum length for printing strings. public static int? PrintMaxStringLength(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? PrintMaxStringLength(ITestFrameworkExecutionOptions) Gets the maximum length for printing strings. public static int? PrintMaxStringLength(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? Seed(ITestFrameworkExecutionOptions) Gets the value that should be used to seed randomness. public static int? Seed(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? ShowLiveOutput(ITestFrameworkExecutionOptions) Gets a flag which indicates if the developer wishes to see output from ITestOutputHelper live while it's being reported (in addition to seeing it collected together when the test is finished). public static bool? ShowLiveOutput(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? ShowLiveOutputOrDefault(ITestFrameworkExecutionOptions) Gets a flag which indicates if the developer wishes to see output from ITestOutputHelper live while it's being reported (in addition to seeing it collected together when the test is finished). If the flag is not present, returns the default value (false). public static bool ShowLiveOutputOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool StopOnTestFail(ITestFrameworkExecutionOptions) Gets a flag to stop testing on test failure. public static bool? StopOnTestFail(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? StopOnTestFailOrDefault(ITestFrameworkExecutionOptions) Gets a flag to stop testing on test failure. If the flag is not present, returns the default value (false). public static bool StopOnTestFailOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool SynchronousMessageReporting(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. public static bool? SynchronousMessageReporting(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? SynchronousMessageReporting(ITestFrameworkExecutionOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. public static bool? SynchronousMessageReporting(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? SynchronousMessageReportingOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. If the flag is not set, returns the default value (false). public static bool SynchronousMessageReportingOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool SynchronousMessageReportingOrDefault(ITestFrameworkExecutionOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. If the flag is not set, returns the default value (false). public static bool SynchronousMessageReportingOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool"
  },
  "v3/2.0.0/Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.html",
    "title": "Class TestFrameworkOptionsReadWriteExtensions | xunit",
    "summary": "Class TestFrameworkOptionsReadWriteExtensions Namespace Xunit.Sdk Assembly xunit.v3.runner.common.dll Extension methods for reading and writing ITestFrameworkDiscoveryOptions and ITestFrameworkExecutionOptions. public static class TestFrameworkOptionsReadWriteExtensions Inheritance object TestFrameworkOptionsReadWriteExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAssertEquivalentMaxDepth(ITestFrameworkExecutionOptions) Gets a max recursive object depth for comparisons done with Assert.Equivalent. public static int? GetAssertEquivalentMaxDepth(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetCulture(ITestFrameworkDiscoveryOptions) Gets the culture to use for discovering tests. null uses the default OS culture; Empty uses the invariant culture; any other value passes the provided value to CultureInfo(string) and uses the resulting object with DefaultThreadCurrentCulture and DefaultThreadCurrentUICulture. public static string? GetCulture(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns string GetCulture(ITestFrameworkExecutionOptions) Gets the culture to use for running tests. null uses the default OS culture; Empty uses the invariant culture; any other value passes the provided value to CultureInfo(string) and uses the resulting object with DefaultThreadCurrentCulture and DefaultThreadCurrentUICulture. public static string? GetCulture(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns string GetDiagnosticMessages(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether diagnostic messages will be emitted. public static bool? GetDiagnosticMessages(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? GetDiagnosticMessages(ITestFrameworkExecutionOptions) Gets a flag that determines whether diagnostic messages will be emitted. public static bool? GetDiagnosticMessages(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetDiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not set, returns the default value (false). public static bool GetDiagnosticMessagesOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool GetDiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions) Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not present, returns the default value (false). public static bool GetDiagnosticMessagesOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetDisableParallelization(ITestFrameworkExecutionOptions) Gets a flag to disable parallelization. public static bool? GetDisableParallelization(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetDisableParallelizationOrDefault(ITestFrameworkExecutionOptions) Gets a flag to disable parallelization. If the flag is not present, returns the default value (false). public static bool GetDisableParallelizationOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetExplicitOption(ITestFrameworkExecutionOptions) Gets a flag that indicates how explicit tests should be handled. public static ExplicitOption? GetExplicitOption(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ExplicitOption? GetExplicitOptionOrDefault(ITestFrameworkExecutionOptions) Gets a flag that indicates how explicit tests should be handled. If the flag is not present, returns the default value (Off). public static ExplicitOption GetExplicitOptionOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ExplicitOption GetFailSkips(ITestFrameworkExecutionOptions) Gets a flag to fail skipped tests. public static bool? GetFailSkips(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetFailSkipsOrDefault(ITestFrameworkExecutionOptions) Gets a flag to fail skipped tests. If the flag is not present, returns the default value (false). public static bool GetFailSkipsOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetFailTestsWithWarnings(ITestFrameworkExecutionOptions) Gets a flag to fail passing tests with warnings. public static bool? GetFailTestsWithWarnings(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetFailTestsWithWarningsOrDefault(ITestFrameworkExecutionOptions) Gets a flag to fail passing tests with warning. If the flag is not present, returns the default value (false). public static bool GetFailTestsWithWarningsOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetIncludeSourceInformation(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether discovered test cases should include source information. Note that not all runners have access to source information, so this flag does not guarantee that source information will be provided. public static bool? GetIncludeSourceInformation(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? GetIncludeSourceInformationOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether discovered test cases should include source information. Note that not all runners have access to source information, so this flag does not guarantee that source information will be provided. If the flag is not present, returns the default value (false). public static bool GetIncludeSourceInformationOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool GetInternalDiagnosticMessages(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether internal diagnostic messages will be emitted. public static bool? GetInternalDiagnosticMessages(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? GetInternalDiagnosticMessages(ITestFrameworkExecutionOptions) Gets a flag that determines whether internal diagnostic messages will be emitted. public static bool? GetInternalDiagnosticMessages(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetInternalDiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether internal diagnostic messages will be emitted. If the flag is not set, returns the default value (false). public static bool GetInternalDiagnosticMessagesOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool GetInternalDiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions) Gets a flag that determines whether internal diagnostic messages will be emitted. If the flag is not present, returns the default value (false). public static bool GetInternalDiagnosticMessagesOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetMaxParallelThreads(ITestFrameworkExecutionOptions) Gets the maximum number of threads to use when running tests in parallel. public static int? GetMaxParallelThreads(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetMaxParallelThreadsOrDefault(ITestFrameworkExecutionOptions) Gets the maximum number of threads to use when running tests in parallel. If set to 0 (or not set), the value of ProcessorCount is used; if set to a value less than 0, does not limit the number of threads. public static int GetMaxParallelThreadsOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int GetMethodDisplay(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display name format for test methods. public static TestMethodDisplay? GetMethodDisplay(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplay? GetMethodDisplayOptions(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display name format options for test methods. public static TestMethodDisplayOptions? GetMethodDisplayOptions(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplayOptions? GetMethodDisplayOptionsOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display name format options for test methods. If the flag is not present, returns the default value (None). public static TestMethodDisplayOptions GetMethodDisplayOptionsOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplayOptions GetMethodDisplayOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines the default display name format for test methods. If the flag is not present, returns the default value (ClassAndMethod). public static TestMethodDisplay GetMethodDisplayOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns TestMethodDisplay GetParallelAlgorithm(ITestFrameworkExecutionOptions) Gets the parallel algorithm to be used. public static ParallelAlgorithm? GetParallelAlgorithm(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ParallelAlgorithm? GetParallelAlgorithmOrDefault(ITestFrameworkExecutionOptions) Gets the parallel algorithm to be used. If the flag is not present, return the default value (Conservative). public static ParallelAlgorithm GetParallelAlgorithmOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns ParallelAlgorithm GetPreEnumerateTheories(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the discovery system will return a test case for each row of test data; they are disabled, then the discovery system will return a single test case for the theory. public static bool? GetPreEnumerateTheories(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? GetPreEnumerateTheoriesOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the discovery system will return a test case for each row of test data; they are disabled, then the discovery system will return a single test case for the theory. If the flag is not present, returns the default value (false). public static bool GetPreEnumerateTheoriesOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool GetPrintMaxEnumerableLength(ITestFrameworkDiscoveryOptions) Gets the maximum length for printing collections. public static int? GetPrintMaxEnumerableLength(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? GetPrintMaxEnumerableLength(ITestFrameworkExecutionOptions) Gets the maximum length for printing collections. public static int? GetPrintMaxEnumerableLength(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetPrintMaxObjectDepth(ITestFrameworkDiscoveryOptions) Gets the maximum recursive depth for printing objects. public static int? GetPrintMaxObjectDepth(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? GetPrintMaxObjectDepth(ITestFrameworkExecutionOptions) Gets the maximum recursive depth for printing objects. public static int? GetPrintMaxObjectDepth(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetPrintMaxObjectMemberCount(ITestFrameworkDiscoveryOptions) Gets the maximum numbers of members to show for printing objects. public static int? GetPrintMaxObjectMemberCount(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? GetPrintMaxObjectMemberCount(ITestFrameworkExecutionOptions) Gets the maximum numbers of members to show for printing objects. public static int? GetPrintMaxObjectMemberCount(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetPrintMaxStringLength(ITestFrameworkDiscoveryOptions) Gets the maximum length for printing strings. public static int? GetPrintMaxStringLength(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns int? GetPrintMaxStringLength(ITestFrameworkExecutionOptions) Gets the maximum length for printing strings. public static int? GetPrintMaxStringLength(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetSeed(ITestFrameworkExecutionOptions) Gets the value that should be used to seed randomness. public static int? GetSeed(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns int? GetShowLiveOutput(ITestFrameworkExecutionOptions) Gets a flag which indicates if the developer wishes to see output from ITestOutputHelper live while it's being reported (in addition to seeing it collected together when the test is finished). public static bool? GetShowLiveOutput(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetShowLiveOutputOrDefault(ITestFrameworkExecutionOptions) Gets a flag which indicates if the developer wishes to see output from ITestOutputHelper live while it's being reported (in addition to seeing it collected together when the test is finished). If the flag is not present, returns the default value (false). public static bool GetShowLiveOutputOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetStopOnTestFail(ITestFrameworkExecutionOptions) Gets a flag that determines whether xUnit.net stop testing when a test fails. public static bool? GetStopOnTestFail(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetStopOnTestFailOrDefault(ITestFrameworkExecutionOptions) Gets a flag that determines whether xUnit.net stop testing when a test fails. If the flag is not set, returns the default value (false). public static bool GetStopOnTestFailOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool GetSynchronousMessageReporting(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. public static bool? GetSynchronousMessageReporting(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool? GetSynchronousMessageReporting(ITestFrameworkExecutionOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. public static bool? GetSynchronousMessageReporting(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool? GetSynchronousMessageReportingOrDefault(ITestFrameworkDiscoveryOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. If the flag is not set, returns the default value (false). public static bool GetSynchronousMessageReportingOrDefault(this ITestFrameworkDiscoveryOptions discoveryOptions) Parameters discoveryOptions ITestFrameworkDiscoveryOptions Returns bool GetSynchronousMessageReportingOrDefault(ITestFrameworkExecutionOptions) Gets a flag that determines whether xUnit.net should report test results synchronously. If the flag is not set, returns the default value (false). public static bool GetSynchronousMessageReportingOrDefault(this ITestFrameworkExecutionOptions executionOptions) Parameters executionOptions ITestFrameworkExecutionOptions Returns bool SetAssertEquivalentMaxDepth(ITestFrameworkExecutionOptions, int?) Gets a max recursive object depth for comparisons done with Assert.Equivalent. public static void SetAssertEquivalentMaxDepth(this ITestFrameworkExecutionOptions executionOptions, int? maxDepth) Parameters executionOptions ITestFrameworkExecutionOptions maxDepth int? SetCulture(ITestFrameworkDiscoveryOptions, string?) Sets the culture to use for discovering tests. null uses the default OS culture; Empty uses the invariant culture; any other value passes the provided value to CultureInfo(string) and uses the resulting object with DefaultThreadCurrentCulture and DefaultThreadCurrentUICulture. public static void SetCulture(this ITestFrameworkDiscoveryOptions discoveryOptions, string? culture) Parameters discoveryOptions ITestFrameworkDiscoveryOptions culture string SetCulture(ITestFrameworkExecutionOptions, string?) Sets the culture to use for running tests. null uses the default OS culture; Empty uses the invariant culture; any other value passes the provided value to CultureInfo(string) and uses the resulting object with DefaultThreadCurrentCulture and DefaultThreadCurrentUICulture. public static void SetCulture(this ITestFrameworkExecutionOptions executionOptions, string? culture) Parameters executionOptions ITestFrameworkExecutionOptions culture string SetDiagnosticMessages(ITestFrameworkDiscoveryOptions, bool?) Sets a flag that determines whether diagnostic messages will be emitted. public static void SetDiagnosticMessages(this ITestFrameworkDiscoveryOptions discoveryOptions, bool? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value bool? SetDiagnosticMessages(ITestFrameworkExecutionOptions, bool?) Sets a flag that determines whether diagnostic messages will be emitted. public static void SetDiagnosticMessages(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetDisableParallelization(ITestFrameworkExecutionOptions, bool?) Sets a flag to disable parallelization. public static void SetDisableParallelization(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetExplicitOption(ITestFrameworkExecutionOptions, ExplicitOption?) Sets a flag to describe how explicit tests should be handled. public static void SetExplicitOption(this ITestFrameworkExecutionOptions executionOptions, ExplicitOption? value) Parameters executionOptions ITestFrameworkExecutionOptions value ExplicitOption? SetFailSkips(ITestFrameworkExecutionOptions, bool?) Sets a flag to fail skipped tests. public static void SetFailSkips(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetFailTestsWithWarnings(ITestFrameworkExecutionOptions, bool?) Sets a flag to fail passing tests with warnings. public static void SetFailTestsWithWarnings(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetIncludeSourceInformation(ITestFrameworkDiscoveryOptions, bool?) Sets a flag that determines whether discovered test cases should include source information. Note that not all runners have access to source information, so this flag does not guarantee that source information will be provided. public static void SetIncludeSourceInformation(this ITestFrameworkDiscoveryOptions discoveryOptions, bool? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value bool? SetInternalDiagnosticMessages(ITestFrameworkDiscoveryOptions, bool?) Sets a flag that determines whether internal diagnostic messages will be emitted. public static void SetInternalDiagnosticMessages(this ITestFrameworkDiscoveryOptions discoveryOptions, bool? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value bool? SetInternalDiagnosticMessages(ITestFrameworkExecutionOptions, bool?) Sets a flag that determines whether internal diagnostic messages will be emitted. public static void SetInternalDiagnosticMessages(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetMaxParallelThreads(ITestFrameworkExecutionOptions, int?) Sets the maximum number of threads to use when running tests in parallel. If set to 0 (the default value), does not limit the number of threads. public static void SetMaxParallelThreads(this ITestFrameworkExecutionOptions executionOptions, int? value) Parameters executionOptions ITestFrameworkExecutionOptions value int? SetMethodDisplay(ITestFrameworkDiscoveryOptions, TestMethodDisplay?) Sets a flag that determines the default display name format for test methods. public static void SetMethodDisplay(this ITestFrameworkDiscoveryOptions discoveryOptions, TestMethodDisplay? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value TestMethodDisplay? SetMethodDisplayOptions(ITestFrameworkDiscoveryOptions, TestMethodDisplayOptions?) Sets the flags that determine the default display options for test methods. public static void SetMethodDisplayOptions(this ITestFrameworkDiscoveryOptions discoveryOptions, TestMethodDisplayOptions? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value TestMethodDisplayOptions? SetParallelAlgorithm(ITestFrameworkExecutionOptions, ParallelAlgorithm?) Sets the parallel algorithm to be used. public static void SetParallelAlgorithm(this ITestFrameworkExecutionOptions executionOptions, ParallelAlgorithm? value) Parameters executionOptions ITestFrameworkExecutionOptions value ParallelAlgorithm? SetPreEnumerateTheories(ITestFrameworkDiscoveryOptions, bool?) Sets a flag that determines whether theories are pre-enumerated. If they enabled, then the discovery system will return a test case for each row of test data; they are disabled, then the discovery system will return a single test case for the theory. public static void SetPreEnumerateTheories(this ITestFrameworkDiscoveryOptions discoveryOptions, bool? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value bool? SetPrintMaxEnumerableLength(ITestFrameworkDiscoveryOptions, int?) Sets the maximum length for printing collections. public static void SetPrintMaxEnumerableLength(this ITestFrameworkDiscoveryOptions discoveryOptions, int? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value int? SetPrintMaxEnumerableLength(ITestFrameworkExecutionOptions, int?) Sets the maximum length for printing collections. public static void SetPrintMaxEnumerableLength(this ITestFrameworkExecutionOptions executionOptions, int? value) Parameters executionOptions ITestFrameworkExecutionOptions value int? SetPrintMaxObjectDepth(ITestFrameworkDiscoveryOptions, int?) Sets the maximum recursive depth for printing objects. public static void SetPrintMaxObjectDepth(this ITestFrameworkDiscoveryOptions discoveryOptions, int? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value int? SetPrintMaxObjectDepth(ITestFrameworkExecutionOptions, int?) Sets the maximum recursive depth for printing objects. public static void SetPrintMaxObjectDepth(this ITestFrameworkExecutionOptions executionOptions, int? value) Parameters executionOptions ITestFrameworkExecutionOptions value int? SetPrintMaxObjectMemberCount(ITestFrameworkDiscoveryOptions, int?) Sets the maximum numbers of members to show for printing objects. public static void SetPrintMaxObjectMemberCount(this ITestFrameworkDiscoveryOptions discoveryOptions, int? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value int? SetPrintMaxObjectMemberCount(ITestFrameworkExecutionOptions, int?) Sets the maximum numbers of members to show for printing objects. public static void SetPrintMaxObjectMemberCount(this ITestFrameworkExecutionOptions executionOptions, int? value) Parameters executionOptions ITestFrameworkExecutionOptions value int? SetPrintMaxStringLength(ITestFrameworkDiscoveryOptions, int?) Sets the maximum length for printing strings. public static void SetPrintMaxStringLength(this ITestFrameworkDiscoveryOptions discoveryOptions, int? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value int? SetPrintMaxStringLength(ITestFrameworkExecutionOptions, int?) Sets the maximum length for printing strings. public static void SetPrintMaxStringLength(this ITestFrameworkExecutionOptions executionOptions, int? value) Parameters executionOptions ITestFrameworkExecutionOptions value int? SetSeed(ITestFrameworkExecutionOptions, int?) Sets the value that should be used to seed randomness. public static void SetSeed(this ITestFrameworkExecutionOptions executionOptions, int? value) Parameters executionOptions ITestFrameworkExecutionOptions value int? SetShowLiveOutput(ITestFrameworkExecutionOptions, bool?) Sets a flag which indicates if the developer wishes to see output from ITestOutputHelper live while it's being reported (in addition to seeing it collected together when the test is finished). public static void SetShowLiveOutput(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetStopOnTestFail(ITestFrameworkExecutionOptions, bool?) Sets a flag that determines whether xUnit.net stop testing when a test fails. public static void SetStopOnTestFail(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool? SetSynchronousMessageReporting(ITestFrameworkDiscoveryOptions, bool?) Sets a flag that determines whether xUnit.net should report test results synchronously. public static void SetSynchronousMessageReporting(this ITestFrameworkDiscoveryOptions discoveryOptions, bool? value) Parameters discoveryOptions ITestFrameworkDiscoveryOptions value bool? SetSynchronousMessageReporting(ITestFrameworkExecutionOptions, bool?) Sets a flag that determines whether xUnit.net should report test results synchronously. public static void SetSynchronousMessageReporting(this ITestFrameworkExecutionOptions executionOptions, bool? value) Parameters executionOptions ITestFrameworkExecutionOptions value bool?"
  },
  "v3/2.0.0/Xunit.Sdk.TestMethodDisplay.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestMethodDisplay.html",
    "title": "Enum TestMethodDisplay | xunit",
    "summary": "Enum TestMethodDisplay Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates the default display name format for test methods. public enum TestMethodDisplay Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields ClassAndMethod = 1 Use a fully qualified name (namespace + class + method) Method = 2 Use just the method name (without class)"
  },
  "v3/2.0.0/Xunit.Sdk.TestMethodDisplayOptions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestMethodDisplayOptions.html",
    "title": "Enum TestMethodDisplayOptions | xunit",
    "summary": "Enum TestMethodDisplayOptions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Indicates the method display options for test methods. [Flags] public enum TestMethodDisplayOptions Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields All = ReplaceUnderscoreWithSpace | UseOperatorMonikers | UseEscapeSequences | ReplacePeriodWithComma Enables all method display options. None = 0 Indicates no additional method display options. This is the default configuration option. ReplacePeriodWithComma = 8 Replaces the period delimiter used in namespace and type references with a comma. This option is only honored if the ClassAndMethod setting is also enabled. ReplaceUnderscoreWithSpace = 1 Replace underscores in display names with a space. UseEscapeSequences = 4 Replace supported escape sequences with their equivalent character. Encoding Format ASCII X hex-digit hex-digit (ex: X2C) Unicode U hex-digit hex-digit hex-digit hex-digit (ex: U00A9) UseOperatorMonikers = 2 Replace well-known monikers with their equivalent operator."
  },
  "v3/2.0.0/Xunit.Sdk.TestOptionsNames.Discovery.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestOptionsNames.Discovery.html",
    "title": "Class TestOptionsNames.Discovery | xunit",
    "summary": "Class TestOptionsNames.Discovery Namespace Xunit.Sdk Assembly xunit.v3.common.dll Test options names used with ITestFrameworkDiscoveryOptions. public static class TestOptionsNames.Discovery Inheritance object TestOptionsNames.Discovery Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Culture The culture to be used for discovery. null means the default system culture, Empty means the invariant culture, and any other value is assumed to be a culture name that the system understands. public static readonly string Culture Field Value string Remarks Value type: string Consumed by: v3 DiagnosticMessages Set to true to enable display of diagnostic messages. public static readonly string DiagnosticMessages Field Value string Remarks Value type: bool Consumed by: v2, v3 IncludeSourceInformation Set to true to include source information during discovery, when possible. (Note that most source information is applied by the runner, not the discoverer, because it utilizes the DiaSession support provided by Visual Studio, which means it's applied after the fact by xunit.runner.visualstudio. This flag, then, is a signal for custom test frameworks that may be able to provide source information via some other mechanism.) public static readonly string IncludeSourceInformation Field Value string Remarks Value type: bool Consumed by: v3 InternalDiagnosticMessages Set to true to enable display of internal diagnostic messages. public static readonly string InternalDiagnosticMessages Field Value string Remarks Value type: bool Consumed by: v2, v3 MethodDisplay A flag which indicates how the default test method display name is calculated. public static readonly string MethodDisplay Field Value string Remarks Value type: TestMethodDisplay Consumed by: v2, v3 MethodDisplayOptions A flag which indicates how the test method display name calculation can be modified by special naming patterns. public static readonly string MethodDisplayOptions Field Value string Remarks Value type: TestMethodDisplayOptions Consumed by: v2, v3 PreEnumerateTheories Set to true to enable pre-enumeration of theories during discovery. public static readonly string PreEnumerateTheories Field Value string Remarks Value type: bool Consumed by: v2, v3 PrintMaxEnumerableLength Sets the maximum number of items to print in a collection. public static readonly string PrintMaxEnumerableLength Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ PrintMaxObjectDepth Sets the maximum recursive depth when printing object values. public static readonly string PrintMaxObjectDepth Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ PrintMaxObjectMemberCount Sets the maximum number of members to show when printing object values. public static readonly string PrintMaxObjectMemberCount Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ PrintMaxStringLength Sets the maximum length when printing a string value. public static readonly string PrintMaxStringLength Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ SynchronousMessageReporting Set to true to enable synchronous message reporting; set to false to enable asynchronous message reporting. Synchronous in this case means the system will wait for the runner to process a message before delivering the next one. public static readonly string SynchronousMessageReporting Field Value string Remarks Value type: bool Consumed by: v2, v3"
  },
  "v3/2.0.0/Xunit.Sdk.TestOptionsNames.Execution.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestOptionsNames.Execution.html",
    "title": "Class TestOptionsNames.Execution | xunit",
    "summary": "Class TestOptionsNames.Execution Namespace Xunit.Sdk Assembly xunit.v3.common.dll Test options names used with ITestFrameworkExecutionOptions. public static class TestOptionsNames.Execution Inheritance object TestOptionsNames.Execution Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AssertEquivalentMaxDepth The maximum recursive depth for object comparisons with Assert.Equivalent. public static readonly string AssertEquivalentMaxDepth Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ Culture The culture to be used for execution. null means the default system culture, Empty means the invariant culture, and any other value is assumed to be a culture name that the system understands. public static readonly string Culture Field Value string Remarks Value type: string Consumed by: v3 DiagnosticMessages Set to true to enable display of diagnostic messages. public static readonly string DiagnosticMessages Field Value string Remarks Value type: bool Consumed by: v2, v3 DisableParallelization Set to true to disable running tests in parallel. public static readonly string DisableParallelization Field Value string Remarks Value type: bool Consumed by: v2, v3 ExplicitOption Gets a flag which indicates the user's desire to run explicit tests. public static readonly string ExplicitOption Field Value string Remarks Value type: ExplicitOption Consumed by: v3 FailSkips Set to true to convert skipped tests into failed tests. public static readonly string FailSkips Field Value string Remarks Value type: bool Consumed by: v3 FailTestsWithWarnings Set to true to convert passing tests with warnings into failed tests. public static readonly string FailTestsWithWarnings Field Value string Remarks Value type: bool Consumed by: v3 InternalDiagnosticMessages Set to true to enable display of internal diagnostic messages. public static readonly string InternalDiagnosticMessages Field Value string Remarks Value type: bool Consumed by: v2, v3 MaxParallelThreads Sets the maximum number of parallel threads to use during execution. Set to -1 to run with unlimited threads; set to 0 to use the system default (equal to ProcessorCount; set to any other positive integer to use that number of threads. public static readonly string MaxParallelThreads Field Value string Remarks Value type: int Consumed by: v2, v3 ParallelAlgorithm Set the algorithm to use for parallelization. public static readonly string ParallelAlgorithm Field Value string Remarks Value type: ParallelAlgorithm Consumed by: v2, v3 PrintMaxEnumerableLength Sets the maximum number of items to print in a collection. public static readonly string PrintMaxEnumerableLength Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ PrintMaxObjectDepth Sets the maximum recursive depth when printing object values. public static readonly string PrintMaxObjectDepth Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ PrintMaxObjectMemberCount Sets the maximum number of members to show when printing object values. public static readonly string PrintMaxObjectMemberCount Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ PrintMaxStringLength Sets the maximum length when printing a string value. public static readonly string PrintMaxStringLength Field Value string Remarks Value type: int Consumed by: v3 1.1.0+ Seed Set the seed to use for randomization. When unset (or set to null), will use the default system-computed seed. public static readonly string Seed Field Value string Remarks Value type: int Consumed by: v3 ShowLiveOutput Set to true to show output live while tests are running, in addition to showing collected output when the test has finished. public static readonly string ShowLiveOutput Field Value string Remarks Value type: bool Consumed by: v2, v3 StopOnFail Set to true to attempt to stop execution as soon the first test fails. public static readonly string StopOnFail Field Value string Remarks Value type: bool Consumed by: v2, v3 SynchronousMessageReporting Set to true to enable synchronous message reporting; set to false to enable asynchronous message reporting. Synchronous in this case means the system will wait for the runner to process a message before delivering the next one. public static readonly string SynchronousMessageReporting Field Value string Remarks Value type: bool Consumed by: v2, v3"
  },
  "v3/2.0.0/Xunit.Sdk.TestOptionsNames.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestOptionsNames.html",
    "title": "Class TestOptionsNames | xunit",
    "summary": "Class TestOptionsNames Namespace Xunit.Sdk Assembly xunit.v3.common.dll Test options names public static class TestOptionsNames Inheritance object TestOptionsNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "v3/2.0.0/Xunit.Sdk.TestPipelineException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestPipelineException.html",
    "title": "Class TestPipelineException | xunit",
    "summary": "Class TestPipelineException Namespace Xunit.Sdk Assembly xunit.v3.core.dll Represents an exception that happened during the processing of the test pipeline. This typically means there were problems identifying the correct test class constructor, problems creating the fixture data, etc. [Serializable] public class TestPipelineException : Exception, ISerializable Inheritance object Exception TestPipelineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestPipelineException(SerializationInfo, StreamingContext) protected TestPipelineException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext TestPipelineException(string) Initializes a new instance of the TestPipelineException class. public TestPipelineException(string message) Parameters message string The exception message. TestPipelineException(string, Exception) Initializes a new instance of the TestPipelineException class. public TestPipelineException(string message, Exception innerException) Parameters message string The exception message. innerException Exception The inner exception that is being reported."
  },
  "v3/2.0.0/Xunit.Sdk.TestTimeoutException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TestTimeoutException.html",
    "title": "Class TestTimeoutException | xunit",
    "summary": "Class TestTimeoutException Namespace Xunit.Sdk Assembly xunit.v3.core.dll Thrown if a test exceeds the specified timeout. [Serializable] public class TestTimeoutException : Exception, ISerializable, ITestTimeoutException Inheritance object Exception TestTimeoutException Implements ISerializable ITestTimeoutException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForTimedOutTest(int) Creates a new instance of TestTimeoutException for a test that has timed out. public static TestTimeoutException ForTimedOutTest(int timeout) Parameters timeout int The timeout that was exceeded, in milliseconds Returns TestTimeoutException"
  },
  "v3/2.0.0/Xunit.Sdk.ThrowsAnyException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ThrowsAnyException.html",
    "title": "Class ThrowsAnyException | xunit",
    "summary": "Class ThrowsAnyException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.ThrowsAny fails. public class ThrowsAnyException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException ThrowsAnyException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForIncorrectExceptionType(Type, Exception) Creates a new instance of the ThrowsAnyException class to be thrown when an exception of the wrong type was thrown by Assert.ThrowsAny. public static ThrowsAnyException ForIncorrectExceptionType(Type expected, Exception actual) Parameters expected Type The expected exception type actual Exception The actual exception Returns ThrowsAnyException ForNoException(Type) Creates a new instance of the ThrowsAnyException class to be thrown when an exception wasn't thrown by Assert.ThrowsAny. public static ThrowsAnyException ForNoException(Type expected) Parameters expected Type The expected exception type Returns ThrowsAnyException"
  },
  "v3/2.0.0/Xunit.Sdk.ThrowsException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.ThrowsException.html",
    "title": "Class ThrowsException | xunit",
    "summary": "Class ThrowsException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.Throws fails. public class ThrowsException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException ThrowsException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForIncorrectExceptionType(Type, Exception) Creates a new instance of the ThrowsException class to be thrown when an exception of the wrong type was thrown by Assert.Throws. public static ThrowsException ForIncorrectExceptionType(Type expected, Exception actual) Parameters expected Type The expected exception type actual Exception The actual exception Returns ThrowsException ForIncorrectParameterName(Type, string?, string?) Creates a new instance of the ThrowsException class to be thrown when an ArgumentException is thrown with the wrong parameter name. public static ThrowsException ForIncorrectParameterName(Type expected, string? expectedParamName, string? actualParamName) Parameters expected Type The exception type expectedParamName string The expected parameter name actualParamName string The actual parameter name Returns ThrowsException ForNoException(Type) Creates a new instance of the ThrowsException class to be thrown when an exception wasn't thrown by Assert.Throws. public static ThrowsException ForNoException(Type expected) Parameters expected Type The expected exception type Returns ThrowsException"
  },
  "v3/2.0.0/Xunit.Sdk.TrueException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TrueException.html",
    "title": "Class TrueException | xunit",
    "summary": "Class TrueException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll Exception thrown when Assert.True fails. public class TrueException : XunitException, ISerializable, IAssertionException Inheritance object Exception XunitException TrueException Implements ISerializable IAssertionException Inherited Members XunitException.ToString() Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods ForNonTrueValue(string?, bool?) Creates a new instance of the TrueException class to be thrown when a non-true value was provided. public static TrueException ForNonTrueValue(string? message, bool? value) Parameters message string The message to be displayed, or null for the default message value bool? The actual value Returns TrueException"
  },
  "v3/2.0.0/Xunit.Sdk.TypeHelper.html": {
    "href": "v3/2.0.0/Xunit.Sdk.TypeHelper.html",
    "title": "Class TypeHelper | xunit",
    "summary": "Class TypeHelper Namespace Xunit.Sdk Assembly xunit.v3.common.dll Utility methods related to Type. public static class TypeHelper Inheritance object TypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertArgument(object?, Type) Converts an argument into its target type. Can be particularly useful when pulling attribute constructor arguments, whose types may not strictly match the parameter type. public static object? ConvertArgument(object? arg, Type type) Parameters arg object The argument to be converted. type Type The target type for the conversion. Returns object The converted argument. ConvertArguments(object?[], Type[]) Converts arguments into their target types. Can be particularly useful when pulling attribute constructor arguments, whose types may not strictly match the parameter types. public static object?[] ConvertArguments(object?[] args, Type[] types) Parameters args object[] The arguments to be converted. types Type[] The target types for the conversion. Returns object[] The converted arguments. ConvertAttributeArgumentCollection(IReadOnlyCollection<CustomAttributeTypedArgument>, Type) Converts an argument collection from an attribute initializer into an array of the raw values. public static Array ConvertAttributeArgumentCollection(IReadOnlyCollection<CustomAttributeTypedArgument> collection, Type elementType) Parameters collection IReadOnlyCollection<CustomAttributeTypedArgument> The attribute argument collection. elementType Type The element type of the array. Returns Array The collection of the raw attribute values. GetType(string) Converts an assembly qualified type name from GetTypeName(Type) back into a Type object. public static Type? GetType(string assemblyQualifiedTypeName) Parameters assemblyQualifiedTypeName string The assembly qualified type name. Returns Type The instance of the Type, if available; null, otherwise. GetType(string, string) Converts an assembly name + type name into a Type object. public static Type? GetType(string assemblyName, string typeName) Parameters assemblyName string The assembly name. typeName string The type name. Returns Type The instance of the Type, if available; null, otherwise. GetTypeName(Type) Gets an assembly-qualified type name suitable for serialization. public static string GetTypeName(Type value) Parameters value Type The type value Returns string A string in \"TypeName\" format (for mscorlib types) or \"TypeName,AssemblyName\" format (for all others) Remarks Dynamic types, or types which live in the GAC, are not supported. GetTypeStrict(string) Converts an assembly qualified type name into a Type object. If the type does not exist, throws an ArgumentException. public static Type GetTypeStrict(string assemblyQualifiedTypeName) Parameters assemblyQualifiedTypeName string The assembly qualified type name. Returns Type The instance of the Type."
  },
  "v3/2.0.0/Xunit.Sdk.UniqueIDGenerator.html": {
    "href": "v3/2.0.0/Xunit.Sdk.UniqueIDGenerator.html",
    "title": "Class UniqueIDGenerator | xunit",
    "summary": "Class UniqueIDGenerator Namespace Xunit.Sdk Assembly xunit.v3.common.dll Generates unique IDs from multiple string inputs. Used to compute the unique IDs that are used inside the test framework. public sealed class UniqueIDGenerator : IDisposable Inheritance object UniqueIDGenerator Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors UniqueIDGenerator() Initializes a new instance of the UniqueIDGenerator class. public UniqueIDGenerator() Methods Add(string) Add a string value into the unique ID computation. public void Add(string value) Parameters value string The value to be added to the unique ID computation Compute() Compute the unique ID for the given input values. Note that once the unique ID has been computed, no further Add(string) operations will be allowed. public string Compute() Returns string The computed unique ID Dispose() public void Dispose() ForAssembly(string, string?) Computes a unique ID for a test assembly. public static string ForAssembly(string assemblyPath, string? configFilePath) Parameters assemblyPath string The assembly path configFilePath string The optional configuration file path Returns string The computed unique ID for the assembly ForTest(string, int) Computes a unique ID for a test. public static string ForTest(string testCaseUniqueID, int testIndex) Parameters testCaseUniqueID string The unique ID of the test case that this test belongs to. testIndex int The index of this test in the test case, typically starting with 0 (though a negative number may be used to prevent collisions with legitimate test indices). Returns string ForTestCase(string, Type[]?, object?[]?) Computes a unique ID for a test case. public static string ForTestCase(string parentUniqueID, Type[]? testMethodGenericTypes, object?[]? testMethodArguments) Parameters parentUniqueID string The unique ID of the parent in the hierarchy; typically the test method unique ID, but may also be the test class or test collection unique ID, when test method (and possibly test class) don't exist. testMethodGenericTypes Type[] The test method's generic types testMethodArguments object[] The test method's arguments Returns string The computed unique ID for the test case ForTestClass(string, string?) Computes a unique ID for a test class. public static string? ForTestClass(string testCollectionUniqueID, string? className) Parameters testCollectionUniqueID string The unique ID of the parent test collection for the test class className string The optional fully qualified type name of the test class Returns string The computed unique ID for the test class (may return null if className is null) ForTestCollection(string, string, string?) Computes a unique ID for a test collection. public static string ForTestCollection(string assemblyUniqueID, string collectionDisplayName, string? collectionDefinitionClassName) Parameters assemblyUniqueID string The unique ID of the assembly the test collection lives in collectionDisplayName string The display name of the test collection collectionDefinitionClassName string The optional class name that contains the test collection definition Returns string The computed unique ID for the test collection ForTestMethod(string?, string?) Computes a unique ID for a test method. public static string? ForTestMethod(string? testClassUniqueID, string? methodName) Parameters testClassUniqueID string The unique ID of the parent test class for the test method methodName string The optional test method name Returns string The computed unique ID for the test method (may return null if either the class unique ID or the method name is null) ForType(Type) Computes a unique ID for a Type. public static string ForType(Type type) Parameters type Type The type to generate an ID for Returns string"
  },
  "v3/2.0.0/Xunit.Sdk.UnsetPropertiesException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.UnsetPropertiesException.html",
    "title": "Class UnsetPropertiesException | xunit",
    "summary": "Class UnsetPropertiesException Namespace Xunit.Sdk Assembly xunit.v3.common.dll An exception which indicates an object had several properties that were not properly initialized. public class UnsetPropertiesException : InvalidOperationException, ISerializable Inheritance object Exception SystemException InvalidOperationException UnsetPropertiesException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ExceptionExtensions.Unwrap(Exception) ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors UnsetPropertiesException(IEnumerable<string>, Type) An exception which indicates an object had several properties that were not properly initialized. public UnsetPropertiesException(IEnumerable<string> propertyNames, Type type) Parameters propertyNames IEnumerable<string> The properties that were not set type Type The type that the property belongs to Properties Message public override string Message { get; } Property Value string PropertyNames Gets the property names of the uninitialized properties. public string[] PropertyNames { get; } Property Value string[] TypeName Gets the type name of the uninitialized property. public string TypeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.UnsetPropertyException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.UnsetPropertyException.html",
    "title": "Class UnsetPropertyException | xunit",
    "summary": "Class UnsetPropertyException Namespace Xunit.Sdk Assembly xunit.v3.common.dll An exception which indicates an object was not properly initialized, thrown by a property getter that was accessed by the uninitialized object. public class UnsetPropertyException : InvalidOperationException, ISerializable Inheritance object Exception SystemException InvalidOperationException UnsetPropertyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ExceptionExtensions.Unwrap(Exception) ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors UnsetPropertyException(string, Type) An exception which indicates an object was not properly initialized, thrown by a property getter that was accessed by the uninitialized object. public UnsetPropertyException(string propertyName, Type type) Parameters propertyName string The property that was not set type Type The type that the property belongs to Properties Message public override string Message { get; } Property Value string PropertyName Gets the property name of the uninitialized property. public string PropertyName { get; } Property Value string TypeName Gets the type name of the uninitialized property. public string TypeName { get; } Property Value string"
  },
  "v3/2.0.0/Xunit.Sdk.XunitException.html": {
    "href": "v3/2.0.0/Xunit.Sdk.XunitException.html",
    "title": "Class XunitException | xunit",
    "summary": "Class XunitException Namespace Xunit.Sdk Assembly xunit.v3.assert.dll The base assert exception class. It marks itself with IAssertionException which is how the framework differentiates between assertion fails and general exceptions. public class XunitException : Exception, ISerializable, IAssertionException Inheritance object Exception XunitException Implements ISerializable IAssertionException Derived AllException CollectionException ContainsException DistinctException DoesNotContainException DoesNotMatchException EmptyException EndsWithException EqualException EquivalentException FailException FalseException InRangeException IsAssignableFromException IsNotAssignableFromException IsNotTypeException IsTypeException MatchesException MultipleException NotEmptyException NotEqualException NotInRangeException NotNullException NotSameException NotStrictEqualException NullException ProperSubsetException ProperSupersetException PropertyChangedException RaisesAnyException RaisesException SameException SingleException SkipException StartsWithException StrictEqualException SubsetException SupersetException ThrowsAnyException ThrowsException TrueException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitException(string?) Initializes a new instance of the XunitException class. public XunitException(string? userMessage) Parameters userMessage string The user message to be displayed XunitException(string?, Exception?) Initializes a new instance of the XunitException class. public XunitException(string? userMessage, Exception? innerException) Parameters userMessage string The user message to be displayed innerException Exception The inner exception Methods ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.Sdk.XunitSerializationInfo.html": {
    "href": "v3/2.0.0/Xunit.Sdk.XunitSerializationInfo.html",
    "title": "Class XunitSerializationInfo | xunit",
    "summary": "Class XunitSerializationInfo Namespace Xunit.Sdk Assembly xunit.v3.common.dll Represents serialization information for serializing a complex object. This is typically used by objects which implement IXunitSerializable. public class XunitSerializationInfo : IXunitSerializationInfo Inheritance object XunitSerializationInfo Implements IXunitSerializationInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) XunitSerializationInfoExtensions.AddValue<T>(IXunitSerializationInfo, string, T) XunitSerializationInfoExtensions.GetValue<T>(IXunitSerializationInfo, string) Constructors XunitSerializationInfo(SerializationHelper) Initializes a new instance of the XunitSerializationInfo class for the purposes of serialization (starting empty). public XunitSerializationInfo(SerializationHelper serializationHelper) Parameters serializationHelper SerializationHelper The serialization helper XunitSerializationInfo(SerializationHelper, string) Initializes a new instance of the XunitSerializationInfo class for the purposes of deserialization. public XunitSerializationInfo(SerializationHelper serializationHelper, string serializedValue) Parameters serializationHelper SerializationHelper The serialization helper serializedValue string The serialized value to copy into the serialization info XunitSerializationInfo(SerializationHelper, IXunitSerializable) Initializes a new instance of the XunitSerializationInfo class for the purposes of serialization (starting populated by the given object). public XunitSerializationInfo(SerializationHelper serializationHelper, IXunitSerializable @object) Parameters serializationHelper SerializationHelper The serialization helper object IXunitSerializable The data to copy into the serialization info Methods AddValue(string, object?, Type?) Adds a value to the serialization. Supported value types include the built-in intrinsics (string, int, long, float, double, and decimal, including nullable versions of those), any class which implements IXunitSerializable), or arrays of any supported types. public void AddValue(string key, object? value, Type? valueType = null) Parameters key string The key to store the value with value object The value to be stored valueType Type The type of the value to be stored; optional, unless the value of value is null. Exceptions ArgumentException Thrown if the value is not a supported type. GetValue(string) Gets a value from the serialization. public object? GetValue(string key) Parameters key string The key of the value to retrieve Returns object The value, if present; null, otherwise ToSerializedString() Returns a string that represents the entirety of the data. public string ToSerializedString() Returns string"
  },
  "v3/2.0.0/Xunit.Sdk.XunitSerializationInfoExtensions.html": {
    "href": "v3/2.0.0/Xunit.Sdk.XunitSerializationInfoExtensions.html",
    "title": "Class XunitSerializationInfoExtensions | xunit",
    "summary": "Class XunitSerializationInfoExtensions Namespace Xunit.Sdk Assembly xunit.v3.common.dll Extension methods for IXunitSerializationInfo. public static class XunitSerializationInfoExtensions Inheritance object XunitSerializationInfoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddValue<T>(IXunitSerializationInfo, string, T) Adds a value to the serialization. Supported value types include the built-in intrinsics (string, int, long, float, double, and decimal, including nullable versions of those), any class which implements IXunitSerializable), or arrays of any supported types. public static void AddValue<T>(this IXunitSerializationInfo info, string key, T value) Parameters info IXunitSerializationInfo key string The key to store the value with value T The value to be stored Type Parameters T GetValue<T>(IXunitSerializationInfo, string) Gets a strongly-typed value from the serialization. public static T? GetValue<T>(this IXunitSerializationInfo info, string key) Parameters info IXunitSerializationInfo key string The key of the value to retrieve Returns T The value, if present; default(T), otherwise Type Parameters T The type of the value"
  },
  "v3/2.0.0/Xunit.Sdk.html": {
    "href": "v3/2.0.0/Xunit.Sdk.html",
    "title": "Namespace Xunit.Sdk | xunit",
    "summary": "Namespace Xunit.Sdk Classes AllException Exception thrown when Assert.All fails. AnsiUtility A utility class for ANSI color escape codes. ArgumentFormatter Formats value for display in assertion messages and data-driven test display names. AssertEqualityResult Indicates the result of comparing two values for equality. Includes success/failure information, as well as indices where the values differ, if the values are indexed (e.g., collections or strings). AsyncUtility Utility class for dealing with asynchronous operations. CollectionException Exception thrown when Assert.Collection fails. CollectionTracker Base class for generic CollectionTracker<T>, which also includes some public static functionality. CollectionTrackerExtensions Extension methods related to CollectionTracker<T>. CollectionTracker<T> A utility class that can be used to wrap enumerables to prevent double enumeration. It offers the ability to safely print parts of the collection when failures are encountered, as well as some static versions of the printing functionality. ContainsException Exception thrown when Assert.Contains fails. DisposalTracker Tracks disposable objects, and disposes them in the reverse order they were added to the tracker. Supports both IDisposable and IAsyncDisposable. You can either directly dispose this object (via DisposeAsync()), or you can enumerate the items contained inside of it (via TrackedObjects). Also supports hand-registering disposal actions via AddAction(Action) and AddAsyncAction(Func<ValueTask>). Note that an object implements both interfaces, this will only call DisposeAsync() and will not call Dispose(). DistinctException Exception thrown when Assert.Distinct fails. DoesNotContainException Exception thrown when Assert.DoesNotContain fails. DoesNotMatchException Exception thrown when Assert.DoesNotMatch fails. EmptyException Exception thrown when Assert.Empty fails. EndsWithException Exception thrown when Assert.EndsWith fails. EqualException Exception thrown when Assert.Equal fails. EquivalentException Exception thrown when Assert.Equivalent fails. ExceptionUtility Utility class for dealing with Exception and IErrorMetadata objects. FailException Exception thrown when Assert.Fail is called. FalseException Exception thrown when Assert.False fails. IAssemblyMetadataExtensions Extension methods for IAssemblyMetadata. IAssertEqualityComparerExtensions Extension methods for IAssertEqualityComparer<T> InRangeException Exception thrown when Assert.InRange fails. IsAssignableFromException Exception thrown when Assert.IsAssignableFrom fails. IsNotAssignableFromException Exception thrown when Assert.IsNotAssignableFrom fails. IsNotTypeException Exception thrown when Assert.IsNotType fails. IsTypeException Exception thrown when Assert.IsType fails. JsonArraySerializer A special-purpose streaming serializer for arrays to JSON. Only supports a limited number of types (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries). JsonDeserializer A special-purpose untyped deserializer for JSON. JSON strings are returned as string, JSON numbers are returned as decimal, JSON booleans are returns as bool, JSON objects are returned as IReadOnlyDictionary<string, object?>, JSON arrays are returned as object?[], and JSON null values are returned as null. Static methods exist here to help retrieve values from object dictionaries as well as convert to the commonly supported data types (bool, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries (which are decoded to IReadOnlyDictionary<string, IReadOnlyList<string>>), as well as arrays of all the supported types (except trait dictionaries). Developers who need support for other types are encouraged to encode and decode then as strings as needed (for examples, you can see how Enum and DateTimeOffset values are handled here). JsonObjectSerializer A special-purpose streaming serializer for objects to JSON. Only supports a limited number of type (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries). JsonSerializerBase Base class used for streaming JSON serialization. JsonSerializerExtensions Extension methods for the JSON serialization types. JsonTypeIDAttribute Used to decorate concrete serializable classes that implement IMessageSinkMessage to indicate what the serialized type ID should be. The type IDs must be unique, and only assigned to concrete types that will be serialized and deserialized. LongLivedMarshalByRefObject Base class for all long-lived objects that may cross over an AppDomain. MatchesException Exception thrown when Assert.Matches fails. MessageSinkMessageExtensions Extension methods for IMessageSinkMessage. MultipleException Exception thrown when Assert.Multiple fails w/ multiple errors (when a single error occurs, it is thrown directly). NotEmptyException Exception thrown when Assert.NotEmpty fails. NotEqualException Exception thrown when Assert.NotEqual fails. NotInRangeException Exception thrown when Assert.NotInRange fails. NotNullException Exception thrown when Assert.NotNull fails. NotSameException Exception thrown when Assert.NotSame fails. NotStrictEqualException Exception thrown when Assert.NotStrictEqual fails. NullException Exception thrown when Assert.Null fails. NullMessageSink An implementation of IMessageSink that ignores all messages. ProperSubsetException Exception thrown when Assert.ProperSubset fails. ProperSupersetException Exception thrown when Assert.ProperSuperset fails. PropertyChangedException Exception thrown when Assert.PropertyChanged fails. RaisesAnyException Exception thrown when Assert.RaisesAny fails. RaisesException Exception thrown when Assert.Raises fails. Randomizer Wraps Random to provide access to the seed value, as well as the ability to reset the current randomizer with a new seed value. ReflectionExtensions Extension methods for reflection types in .NET. RegisterXunitSerializerAttribute Used to decorate xUnit.net test assemblies to register an external serializer for one or more supports types to serialize. SameException Exception thrown when Assert.Same fails. SerializationHelper Serializes and de-serializes objects. It supports a limited set of built-in types, as well as anything which implements IXunitSerializable. Custom serializers can implement IXunitSerializer and register by decorating the test assembly with RegisterXunitSerializerAttribute. SingleException Exception thrown when Assert.Single fails. SkipException Exception thrown when Assert.Skip is called. StartsWithException Exception thrown when Assert.StartsWith fails. StrictEqualException Exception thrown when Assert.StrictEqual fails. StringAssertEqualityComparer This static class offers equivalence comparisons for string values SubsetException Exception thrown when Assert.Subset fails. SupersetException Exception thrown when Assert.Superset fails. TestAttachment Represents an attachment to a test result. TestFrameworkOptionsReadExtensions Extension methods for reading ITestFrameworkDiscoveryOptions and ITestFrameworkExecutionOptions. TestFrameworkOptionsReadWriteExtensions Extension methods for reading and writing ITestFrameworkDiscoveryOptions and ITestFrameworkExecutionOptions. TestOptionsNames Test options names TestOptionsNames.Discovery Test options names used with ITestFrameworkDiscoveryOptions. TestOptionsNames.Execution Test options names used with ITestFrameworkExecutionOptions. TestPipelineException Represents an exception that happened during the processing of the test pipeline. This typically means there were problems identifying the correct test class constructor, problems creating the fixture data, etc. TestTimeoutException Thrown if a test exceeds the specified timeout. ThrowsAnyException Exception thrown when Assert.ThrowsAny fails. ThrowsException Exception thrown when Assert.Throws fails. TrueException Exception thrown when Assert.True fails. TypeHelper Utility methods related to Type. UniqueIDGenerator Generates unique IDs from multiple string inputs. Used to compute the unique IDs that are used inside the test framework. UnsetPropertiesException An exception which indicates an object had several properties that were not properly initialized. UnsetPropertyException An exception which indicates an object was not properly initialized, thrown by a property getter that was accessed by the uninitialized object. XunitException The base assert exception class. It marks itself with IAssertionException which is how the framework differentiates between assertion fails and general exceptions. XunitSerializationInfo Represents serialization information for serializing a complex object. This is typically used by objects which implement IXunitSerializable. XunitSerializationInfoExtensions Extension methods for IXunitSerializationInfo. Interfaces IAfterTestFinished This message is sent during execution to indicate that the After method of a IBeforeAfterTestAttribute just finished executing. IAfterTestStarting This message is sent during execution to indicate that the After method of a IBeforeAfterTestAttribute is about to execute. IAssemblyMetadata Represents metadata about a test assembly. IAssertEqualityComparer<T> Represents a specialized version of IEqualityComparer<T> that returns information useful when formatting results for assertion failures. IAssertionException This is a marker interface implemented by all built-in assertion exceptions so that test failures can be marked with Assertion. IBeforeTestFinished This message is sent during execution to indicate that the Before method of a IBeforeAfterTestAttribute has completed executing. IBeforeTestStarting This message is sent during execution to indicate that the Before method of a IBeforeAfterTestAttribute is about to execute. IDiagnosticMessage This message is sent when code (1st or 3rd party) wants to alert the user to a situation that may require diagnostic investigation. This is typically not displayed unless the user has explicitly asked for diagnostic messages to be displayed (see https://xunit.net/docs/configuration-files#diagnosticMessages on how to enable display of diagnostic messages). IDiscoveryComplete This message indicates that the discovery process has been completed for the requested assembly. IDiscoveryStarting This message indicates that the discovery process is starting for the requested assembly. IErrorMessage This message indicates that a catastrophic error has occurred. IErrorMetadata Represents metadata about an error during test discovery or execution. IExecutionMetadata This is metadata describing the execution of a single test. IExecutionSummaryMetadata This is metadata describing the summary during various phases of execution process (e.g., test case, test class, test collection, and assembly). It describes the aggregation of zero or more tests being executed. IInternalDiagnosticMessage This message is sent when xUnit.net itself wants to log internal messages and state that are typically only used by the xUnit.net team to gain a deeper understanding of potential end user issues. These messages are rarely useful to end users directly, and may result in very noisy logs. This is typically not displayed unless the user has explicit asked for internal diagnostic messages to be displayed (see on how to enable display of internal diagnostic messages). IJsonDeserializable Indicates that an object can be deserialized from string-serialized JSON. IJsonSerializable Interface that indicates an object can be serialized to JSON. IMessageSink Represents an endpoint for the reception of test messages. IMessageSinkMessage Base interface for all test messages. A test message is a message that is used to communicate the status of discovery and/or execution of tests. IRegisterXunitSerializerAttribute Used to decorate xUnit.net test assemblies to register an external serializer for one or more supports types to serialize. ITest Represents a single test in the system. A test case typically contains only a single test, but may contain many if circumstances warrant it (for example, test data for a theory cannot be pre-enumerated, so the theory yields a single test case with multiple tests). ITestAssembly Represents a test assembly. ITestAssemblyCleanupFailure This message indicates that an error has occurred during test assembly cleanup. ITestAssemblyFinished This message indicates that the execution process has been completed for the requested assembly. ITestAssemblyMessage Base interface for all messages related to test assemblies. ITestAssemblyStarting This message indicates that the execution process is about to start for the requested assembly. ITestCase Represents a single test case in the system. This test case usually represents a single test, but in the case of dynamically generated data for data driven tests, the test case may actually return multiple results when run. ITestCaseCleanupFailure This message indicates that an error has occurred during test case cleanup. ITestCaseDiscovered This message indicates that a test case had been found during the discovery process. ITestCaseFinished This message indicates that a test case has finished executing. ITestCaseMessage Base interface for all messages related to test cases. ITestCaseMetadata Represents metadata about a test case. ITestCaseStarting This message indicates that a test case is about to start executing. ITestClass Represents a test class, which contributes one or more test cases (usually by way of test methods). ITestClassCleanupFailure This message indicates that an error has occurred during test class cleanup. ITestClassConstructionFinished This message indicates that an instance of a test class has just been constructed. Instance (non-static) methods of tests get a new instance of the test class for each individual test execution; static methods do not get an instance of the test class. ITestClassConstructionStarting This message indicates that an instance of a test class is about to be constructed. Instance (non-static) methods of tests get a new instance of the test class for each individual test execution; static methods do not get an instance of the test class. ITestClassDisposeFinished This message indicates that the Dispose() or DisposeAsync() method was just called on the test class for the test that just finished executing. ITestClassDisposeStarting This message indicates that the Dispose() or DisposeAsync() method is about to be called on the test class for the test that just finished executing. ITestClassFinished This message indicates that a test class has finished executing (meaning, all of the test cases in this test class have finished running). ITestClassMessage Base interface for all messages related to test classes. ITestClassMetadata Represents metadata about a test class. ITestClassStarting This message indicates that a test class is about to begin executing. ITestCleanupFailure This message indicates that an error has occurred during test cleanup. ITestCollection Represents a group of test cases. ITestCollectionCleanupFailure This message indicates that an error has occurred during test collection cleanup. ITestCollectionFinished This message indicates that a test collection has just finished executing (meaning, all the test classes in the collection has finished). ITestCollectionMessage Base interface for all messages related to test collections. ITestCollectionMetadata Represents metadata about a test collection. ITestCollectionStarting This message indicates that a test collection is about to start executing. ITestFailed This message indicates that a test has failed. ITestFinished This message indicates that a test has finished executing. ITestFrameworkDiscoveryOptions Represents an instance of ITestFrameworkOptions that is to be used for test discovery purposes. ITestFrameworkExecutionOptions Represents an instance of ITestFrameworkOptions that is to be used for test execution purposes. ITestFrameworkOptions This interface should not be consumed directly; instead, you should consume ITestFrameworkDiscoveryOptions or ITestFrameworkExecutionOptions. ITestMessage Base interface for all messages related to tests. ITestMetadata Represents metadata about a test. ITestMethod Represents a test method, which contributes one or more test cases. ITestMethodCleanupFailure This message indicates that an error has occurred during test method cleanup. ITestMethodFinished This message indicates that a test method has finished executing (meaning, all the test cases that derived from the test method have finished). ITestMethodMessage Base interface for all messages related to test methods. ITestMethodMetadata Represents metadata about a test method. ITestMethodStarting This message indicates that a test method is about to begin executing. ITestNotRun This message indicates that a test was not run because it was excluded (either because it was marked as explicit and explicit tests weren't run, or because it was marked as not explicit as only explicit tests were run). ITestOutput This message indicates that a line of output was provided for a test. ITestPassed Indicates that a test has passed. ITestResultMessage Base interface for all individual test results (e.g., tests which pass, fail, skipped, or aren't run). ITestSkipped This message indicates that a test was skipped. ITestStarting This message indicates that a test is about to start executing. IXunitSerializable This interface should be implemented by any custom object which requires serialization. In addition to implementing this interface, objects must also offer a parameterless public constructor so that an empty object can be created to be deserialized into. IXunitSerializationInfo An interface that is implemented by the serialization infrastructure in xUnit.net. This is passed to objects which implement IXunitSerializable so they can serialize and deserialize themselves from the serialization store. IXunitSerializer Implemented by types which can support serialization and deserialization. This allows external serializers for types which would be inconvenient or impossible to implement IXunitSerializable directly. Enums ExplicitOption Indicates how explicit tests should be handled during execution. FailureCause Indicates the cause of the test failure. ParallelAlgorithm Indicates the parallelization algorithm to use. TestAttachmentType Gets the type of the test attachment TestMethodDisplay Indicates the default display name format for test methods. TestMethodDisplayOptions Indicates the method display options for test methods."
  },
  "v3/2.0.0/Xunit.TestCaseOrdererAttribute.html": {
    "href": "v3/2.0.0/Xunit.TestCaseOrdererAttribute.html",
    "title": "Class TestCaseOrdererAttribute | xunit",
    "summary": "Class TestCaseOrdererAttribute Namespace Xunit Assembly xunit.v3.core.dll Used to decorate an assembly, test collection, or test class to allow the use of a custom test case orderer. [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public sealed class TestCaseOrdererAttribute : Attribute, ITestCaseOrdererAttribute Inheritance object Attribute TestCaseOrdererAttribute Implements ITestCaseOrdererAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCaseOrdererAttribute(Type) Used to decorate an assembly, test collection, or test class to allow the use of a custom test case orderer. public TestCaseOrdererAttribute(Type ordererType) Parameters ordererType Type The orderer type; must implement ITestCaseOrderer Properties OrdererType Gets the orderer type. Must implement ITestCaseOrderer. public Type OrdererType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.TestCollectionOrdererAttribute.html": {
    "href": "v3/2.0.0/Xunit.TestCollectionOrdererAttribute.html",
    "title": "Class TestCollectionOrdererAttribute | xunit",
    "summary": "Class TestCollectionOrdererAttribute Namespace Xunit Assembly xunit.v3.core.dll Used to decorate an assembly to allow the use of a custom test collection orderer. [AttributeUsage(AttributeTargets.Assembly, Inherited = true, AllowMultiple = false)] public sealed class TestCollectionOrdererAttribute : Attribute, ITestCollectionOrdererAttribute Inheritance object Attribute TestCollectionOrdererAttribute Implements ITestCollectionOrdererAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCollectionOrdererAttribute(Type) Used to decorate an assembly to allow the use of a custom test collection orderer. public TestCollectionOrdererAttribute(Type ordererType) Parameters ordererType Type The orderer type; must implement ITestCollectionOrderer Properties OrdererType Gets the orderer type. Must implement ITestCollectionOrderer. public Type OrdererType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.TestContext.html": {
    "href": "v3/2.0.0/Xunit.TestContext.html",
    "title": "Class TestContext | xunit",
    "summary": "Class TestContext Namespace Xunit Assembly xunit.v3.core.dll Represents information about the current state of the test engine. It may be available at various points during the execution pipeline, so consumers must always take care to ensure that they check for null values from the various properties. public sealed class TestContext : ITestContext, IDisposable Inheritance object TestContext Implements ITestContext IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TestContextExtensions.GetFixture<TFixture>(ITestContext) Properties Attachments Gets the attachments for the current test, if the engine is currently in the process of running a test; will return null outside of the context of a test. public IReadOnlyDictionary<string, TestAttachment>? Attachments { get; } Property Value IReadOnlyDictionary<string, TestAttachment> CancellationToken Gets the cancellation token that is used to indicate that the test run should be aborted. Async tests should pass this along to any async functions that support cancellation tokens, to help speed up the cancellation process. public CancellationToken CancellationToken { get; } Property Value CancellationToken Current Gets the current test context. If called outside of the text discovery or execution path, will return a test context that is in the Unknown stage. The current test context is a \"snapshot in time\" for when this/ property is called, so do not cache the instance across a single method boundary (or else/ you run the risk of having an out-of-date context). public static ITestContext Current { get; } Property Value ITestContext KeyValueStorage Stores key/value pairs that are available across all stages of the pipeline. Can be used to communicate between extensions at different execution stages, in both directions, as a single storage container is used for the entire pipeline. public Dictionary<string, object?> KeyValueStorage { get; } Property Value Dictionary<string, object> Remarks This storage system is purely for communication between extension points. The values in here are thrown away after the pipeline execution is complete. It is strongly recommend that extensions either prefix their key names or use guaranteed unique IDs like GUIDs, to prevent collisions with other extension authors. PipelineStage Gets the current test pipeline stage. public TestPipelineStage PipelineStage { get; } Property Value TestPipelineStage Test Gets the current test, if the engine is currently in the process of running a test; will return null outside of the context of a test. public ITest? Test { get; } Property Value ITest Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTest. TestAssembly Gets the current test assembly, if the engine is currently in the process of running or discovering tests in assembly; will return null out of this context (this typically means the test framework itself is being created and initialized). public ITestAssembly? TestAssembly { get; } Property Value ITestAssembly Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestAssembly. TestAssemblyStatus Gets the current test engine status for the test assembly. public TestEngineStatus? TestAssemblyStatus { get; } Property Value TestEngineStatus? TestCase Gets the current test case, if the engine is currently in the process of running a test case; will return null outside of the context of a test case. public ITestCase? TestCase { get; } Property Value ITestCase Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestCase. TestCaseStatus Gets the current test engine status for the test case. Will only be available when TestCase is not null. public TestEngineStatus? TestCaseStatus { get; } Property Value TestEngineStatus? TestClass Gets the current test method, if the engine is currently in the process of running a test class; will return null outside of the context of a test class. Note that not all test framework implementations require that tests be based on classes, so this value may be null even if TestCase is not null. public ITestClass? TestClass { get; } Property Value ITestClass Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestClass. TestClassInstance Gets the instance of the test class; will return null outside of the context of a test. Static test methods do not create test class instances, so this will always be null for static test methods. public object? TestClassInstance { get; } Property Value object Remarks This value will only be available when PipelineStage is TestExecution and TestStatus is Running, and only after the test class has been created. It will become null again immediately after the test class has been disposed. TestClassStatus Gets the current test engine status for the test class. Will only be available when TestClass is not null. public TestEngineStatus? TestClassStatus { get; } Property Value TestEngineStatus? TestCollection Gets the current test collection, if the engine is currently in the process of running a test collection; will return null outside of the context of a test collection. public ITestCollection? TestCollection { get; } Property Value ITestCollection Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestCollection. TestCollectionStatus Gets the current test engine status for the test collection. Will only be available when TestCollection is not null. public TestEngineStatus? TestCollectionStatus { get; } Property Value TestEngineStatus? TestMethod Gets the current test method, if the engine is currently in the process of running a test method; will return null outside of the context of a test method. Note that not all test framework implementations require that tests be based on methods, so this value may be null even if TestCase is not null. public ITestMethod? TestMethod { get; } Property Value ITestMethod Remarks When running with the default test framework implementation, the value here is likely to implement IXunitTestMethod. TestMethodStatus Gets the current test engine status for the test method. Will only be available when TestMethod is not null. public TestEngineStatus? TestMethodStatus { get; } Property Value TestEngineStatus? TestOutputHelper Gets the output helper, which can be used to add output to the test. Will only be available when Test is not null. Note that the value may still be null when Test is not null, if the test framework implementation does not provide output helper support. public ITestOutputHelper? TestOutputHelper { get; } Property Value ITestOutputHelper TestState Gets the current state of the test. Will only be available after the test has finished running. public TestResultState? TestState { get; } Property Value TestResultState TestStatus Gets the current test engine status for the test. Will only be available when Test is not null. public TestEngineStatus? TestStatus { get; } Property Value TestEngineStatus? Warnings Gets the set of warnings associated with the current test. Will only be available when Test is not null; will also return null if there have been no warnings issued. public IReadOnlyList<string>? Warnings { get; } Property Value IReadOnlyList<string> Methods AddAttachment(string, byte[], string) Adds an attachment that is a binary value (represented by a byte array and media type). public void AddAttachment(string name, byte[] value, string mediaType = \"application/octet-stream\") Parameters name string The name of the attachment value byte[] The value of the attachment mediaType string The media type of the attachment; defaults to \"application/octet-stream\" Remarks The mediaType value must be in the MIME \"type/subtype\" form, and does not support parameter values. The subtype is allowed to have a single \"+\" to denote specialization of the subtype (i.e., \"application/xhtml+xml\"). For more information on media types, see https://datatracker.ietf.org/doc/html/rfc2045#section-5.1. AddAttachment(string, string) Adds an attachment that is a string value. public void AddAttachment(string name, string value) Parameters name string The name of the attachment value string The value of the attachment AddWarning(string) Adds a warning to the test result. public void AddWarning(string message) Parameters message string The warning message to be reported CancelCurrentTest() Attempt to cancel the currently executing test, if one is executing. This will signal the CancellationToken for cancellation. public void CancelCurrentTest() Dispose() public void Dispose() GetFixture(Type) Gets a fixture that was attached to the test class. Will return null if there is no exact match for the requested fixture type, or if there is no test class (that is, if TestClass returns null). public ValueTask<object?> GetFixture(Type fixtureType) Parameters fixtureType Type The exact type of the fixture Returns ValueTask<object> The fixture, if available; null, otherwise Remarks This may be a fixture attached via IClassFixture<TFixture>, ICollectionFixture<TFixture>, or AssemblyFixtureAttribute. SendDiagnosticMessage(string) Sends a diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. public void SendDiagnosticMessage(string message) Parameters message string The message to send SendDiagnosticMessage(string, object?) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. public void SendDiagnosticMessage(string format, object? arg0) Parameters format string A composite format string. arg0 object The value to replace {0} in the format string. SendDiagnosticMessage(string, object?, object?) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. public void SendDiagnosticMessage(string format, object? arg0, object? arg1) Parameters format string A composite format string. arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. SendDiagnosticMessage(string, object?, object?, object?) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. public void SendDiagnosticMessage(string format, object? arg0, object? arg1, object? arg2) Parameters format string A composite format string. arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. arg2 object The value to replace {2} in the format string. SendDiagnosticMessage(string, params object?[]) Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages. See https://xunit.net/docs/configuration-files for configuration information. public void SendDiagnosticMessage(string format, params object?[] args) Parameters format string A composite format string. args object[] An object array that contains zero or more objects to format. SetForInitialization(IMessageSink?, bool, bool) Sets the test context for test framework initialization. This is the moment before any specific assembly is being discovered or run. This is typically used by custom runners just before they create the test framework via a call to GetTestFramework(Assembly). public static void SetForInitialization(IMessageSink? diagnosticMessageSink, bool diagnosticMessages, bool internalDiagnosticMessages) Parameters diagnosticMessageSink IMessageSink The optional message sink used to receive IDiagnosticMessage and IInternalDiagnosticMessage instances. diagnosticMessages bool A flag to indicate whether the user wants to receive diagnostic messages internalDiagnosticMessages bool A flag to indicate whether the user wants to receive internal diagnostic messages SetForTest(ITest, TestEngineStatus, CancellationToken, TestResultState?, ITestOutputHelper?, object?) Sets the test context for execution of a test. This assumes an existing test context already exists from which it can pull the diagnostic and internal diagnostic message sinks. public static void SetForTest(ITest test, TestEngineStatus testStatus, CancellationToken cancellationToken, TestResultState? testState = null, ITestOutputHelper? testOutputHelper = null, object? testClassInstance = null) Parameters test ITest The test that is being executed testStatus TestEngineStatus The test status (valid values: Initializing, Running, and CleaningUp) cancellationToken CancellationToken The cancellation token used to cancel execution testState TestResultState The state of the test (only required when testStatus is CleaningUp). testOutputHelper ITestOutputHelper The test output helper that the test can use to write output. Must be passed when testStatus is Initializing; can be null for other statuses (as it will be pulled from the existing test context). testClassInstance object The instance of the test class (may be null for static class and before the test class has been created) SetForTestAssembly(ITestAssembly, TestEngineStatus, CancellationToken) Sets the test context for discovery or execution of a test assembly. This assumes an existing test context already exists from which it can pull the diagnostic and internal diagnostic message sinks. public static void SetForTestAssembly(ITestAssembly testAssembly, TestEngineStatus testAssemblyStatus, CancellationToken cancellationToken) Parameters testAssembly ITestAssembly The test assembly that is being executed testAssemblyStatus TestEngineStatus The test assembly status cancellationToken CancellationToken The cancellation token used to cancel execution SetForTestCase(ITestCase, TestEngineStatus, CancellationToken) Sets the test context for execution of a test case. This assumes an existing test context already exists from which it can pull the diagnostic and internal diagnostic message sinks. public static void SetForTestCase(ITestCase testCase, TestEngineStatus testCaseStatus, CancellationToken cancellationToken) Parameters testCase ITestCase The test case that is being executed testCaseStatus TestEngineStatus The test case status (valid values: Initializing, Running, and CleaningUp) cancellationToken CancellationToken The cancellation token used to cancel execution SetForTestClass(ITestClass, TestEngineStatus, CancellationToken, FixtureMappingManager?) Sets the test context for execution of a test class. This assumes an existing test context already exists from which it can pull the diagnostic and internal diagnostic message sinks. public static void SetForTestClass(ITestClass testClass, TestEngineStatus testClassStatus, CancellationToken cancellationToken, FixtureMappingManager? fixtures = null) Parameters testClass ITestClass The test class that is being executed testClassStatus TestEngineStatus The test class status (valid values: Initializing, Running, and CleaningUp) cancellationToken CancellationToken The cancellation token used to cancel execution fixtures FixtureMappingManager The fixtures that are available to the test class SetForTestCollection(ITestCollection, TestEngineStatus, CancellationToken) Sets the test context for execution of a test collection. This assumes an existing test context already exists from which it can pull the diagnostic and internal diagnostic message sinks. public static void SetForTestCollection(ITestCollection testCollection, TestEngineStatus testCollectionStatus, CancellationToken cancellationToken) Parameters testCollection ITestCollection The test collection that is being executed testCollectionStatus TestEngineStatus The test collection status (valid values: Initializing, Running, and CleaningUp) cancellationToken CancellationToken The cancellation token used to cancel execution SetForTestMethod(ITestMethod, TestEngineStatus, CancellationToken) Sets the test context for execution of a test method. This assumes an existing test context already exists from which it can pull the diagnostic and internal diagnostic message sinks. public static void SetForTestMethod(ITestMethod testMethod, TestEngineStatus testMethodStatus, CancellationToken cancellationToken) Parameters testMethod ITestMethod The test method that is being executed testMethodStatus TestEngineStatus The test method status (valid values: Initializing, Running, and CleaningUp) cancellationToken CancellationToken The cancellation token used to cancel execution"
  },
  "v3/2.0.0/Xunit.TestContextExtensions.html": {
    "href": "v3/2.0.0/Xunit.TestContextExtensions.html",
    "title": "Class TestContextExtensions | xunit",
    "summary": "Class TestContextExtensions Namespace Xunit Assembly xunit.v3.core.dll Extension methods for ITestContext. public static class TestContextExtensions Inheritance object TestContextExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFixture<TFixture>(ITestContext) Gets a fixture that was attached to the test class. Will return null if there is no exact match for the requested fixture type, or if there is no test class (that is, if TestClass returns null). public static ValueTask<TFixture?> GetFixture<TFixture>(this ITestContext ctxt) Parameters ctxt ITestContext Returns ValueTask<TFixture> The fixture, if available; null, otherwise Type Parameters TFixture The exact type of the fixture Remarks This may be a fixture attached via IClassFixture<TFixture>, ICollectionFixture<TFixture>, or AssemblyFixtureAttribute."
  },
  "v3/2.0.0/Xunit.TestEngineStatus.html": {
    "href": "v3/2.0.0/Xunit.TestEngineStatus.html",
    "title": "Enum TestEngineStatus | xunit",
    "summary": "Enum TestEngineStatus Namespace Xunit Assembly xunit.v3.core.dll Represents the current status of the execution of the test engine, with respect to a phase in the execution pipeline (for example, engine status for a test collection vs. test case vs. test). public enum TestEngineStatus Fields CleaningUp = 3 The test engine has run the given stage of the pipeline, and is currently doing clean up (f.e., Dispose). Discovering = 4 The test engine is in the process of discovering tests. Initializing = 1 The test engine is in the initialization phase of the given stage in the pipeline. Running = 2 The test engine is running the given state of the pipeline."
  },
  "v3/2.0.0/Xunit.TestFrameworkAttribute.html": {
    "href": "v3/2.0.0/Xunit.TestFrameworkAttribute.html",
    "title": "Class TestFrameworkAttribute | xunit",
    "summary": "Class TestFrameworkAttribute Namespace Xunit Assembly xunit.v3.core.dll Used to decorate an assembly to allow the use of a custom test framework. [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)] public sealed class TestFrameworkAttribute : Attribute, ITestFrameworkAttribute Inheritance object Attribute TestFrameworkAttribute Implements ITestFrameworkAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestFrameworkAttribute(Type) Used to decorate an assembly to allow the use of a custom test framework. public TestFrameworkAttribute(Type frameworkType) Parameters frameworkType Type The framework type; must implement ITestFramework Properties FrameworkType Gets the framework type; must implement ITestFramework. public Type FrameworkType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.TestPipelineStage.html": {
    "href": "v3/2.0.0/Xunit.TestPipelineStage.html",
    "title": "Enum TestPipelineStage | xunit",
    "summary": "Enum TestPipelineStage Namespace Xunit Assembly xunit.v3.core.dll A flag to indicate which part of the test pipeline you're in. Retrieved from an instance of TestContext. public enum TestPipelineStage Fields Discovery = 2 Indicates that tests are currently being discovered. Initialization = 1 Indicates that the test pipeline is still in the initialization phase and hasn't begun work. TestAssemblyExecution = 3 Inidicates that the test pipeline is executing a test assembly. TestCaseExecution = 7 Inidicates that the test pipeline is executing a test case. TestClassExecution = 5 Inidicates that the test pipeline is executing a test class. TestCollectionExecution = 4 Inidicates that the test pipeline is executing a test collection. TestExecution = 8 Inidicates that the test pipeline is executing a test. TestMethodExecution = 6 Inidicates that the test pipeline is executing a test method. Unknown = 0 Indicates an unknown state of the test pipeline, or being outside of the test pipeline."
  },
  "v3/2.0.0/Xunit.TestResult.html": {
    "href": "v3/2.0.0/Xunit.TestResult.html",
    "title": "Enum TestResult | xunit",
    "summary": "Enum TestResult Namespace Xunit Assembly xunit.v3.core.dll Indicates the result of running the test. public enum TestResult Fields Failed = 1 The test failed. NotRun = 3 The test was not run because it was excluded (either because it was marked as explicit and explicit tests weren't run, or because it was marked as not explicit as only explicit tests were run). Passed = 0 The test passed. Skipped = 2 The test was skipped."
  },
  "v3/2.0.0/Xunit.TestResultState.html": {
    "href": "v3/2.0.0/Xunit.TestResultState.html",
    "title": "Class TestResultState | xunit",
    "summary": "Class TestResultState Namespace Xunit Assembly xunit.v3.core.dll Represents information about the current state of a test after it has run. public class TestResultState Inheritance object TestResultState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionMessages Gets the message(s) of the exception(s). This value is only available when Result is Failed. public string[]? ExceptionMessages { get; } Property Value string[] ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. This value is only available when Result is Failed. public int[]? ExceptionParentIndices { get; } Property Value int[] ExceptionStackTraces Gets the stack trace(s) of the exception(s). This value is only available when Result is Failed. public string?[]? ExceptionStackTraces { get; } Property Value string[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). This value is only available when Result is Failed. public string?[]? ExceptionTypes { get; } Property Value string[] ExecutionTime Gets the amount of time the test ran, in seconds. The value may be 0 if no test code was run (for example, a statically skipped test). Note that the value may be a partial value because of further timing being done while cleaning up. public decimal? ExecutionTime { get; } Property Value decimal? FailureCause Gets a value which indicates what the cause of the test failure was. This value is only available when Result is Failed. public FailureCause? FailureCause { get; } Property Value FailureCause? Result Returns the result from the test run. public TestResult Result { get; } Property Value TestResult Methods ForNotRun(decimal?) Create a not run test result. public static TestResultState ForNotRun(decimal? executionTime = null) Parameters executionTime decimal? The optional execution time Returns TestResultState ForPassed(decimal?) Create a passing test result. public static TestResultState ForPassed(decimal? executionTime = null) Parameters executionTime decimal? The optional execution time Returns TestResultState ForSkipped(decimal?) Create a skipped test result. public static TestResultState ForSkipped(decimal? executionTime = null) Parameters executionTime decimal? The optional execution time Returns TestResultState FromException(decimal, Exception?) Creates an instance based on the presence or absence of an exception. If the exception is null, then it will be for Passed; otherwise, it will be for Failed; public static TestResultState FromException(decimal executionTime, Exception? exception) Parameters executionTime decimal The time spent executing the test exception Exception The exception, if the test failed Returns TestResultState FromTestResult(ITestResultMessage) Creates an instance based on inspecting the type identity of the testResult instance. public static TestResultState FromTestResult(ITestResultMessage testResult) Parameters testResult ITestResultMessage The test result Returns TestResultState"
  },
  "v3/2.0.0/Xunit.TheoryAttribute.html": {
    "href": "v3/2.0.0/Xunit.TheoryAttribute.html",
    "title": "Class TheoryAttribute | xunit",
    "summary": "Class TheoryAttribute Namespace Xunit Assembly xunit.v3.core.dll Marks a test method as being a data theory. Data theories are tests which are fed various bits of data from a data source, mapping to parameters on the test method. If the data source contains multiple rows, then the test method is executed multiple times (once with each data row). Data is provided by attributes which implement IDataAttribute (most commonly, InlineDataAttribute and MemberDataAttribute). [XunitTestCaseDiscoverer(typeof(TheoryDiscoverer))] [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class TheoryAttribute : FactAttribute, ITheoryAttribute, IFactAttribute Inheritance object Attribute FactAttribute TheoryAttribute Implements ITheoryAttribute IFactAttribute Inherited Members FactAttribute.DisplayName FactAttribute.Explicit FactAttribute.Skip FactAttribute.SkipExceptions FactAttribute.SkipType FactAttribute.SkipUnless FactAttribute.SkipWhen FactAttribute.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties DisableDiscoveryEnumeration Gets a flag which indicates whether the test method wants to skip enumerating data during discovery. This will cause the theory to yield a single test case for all data, and the data discovery will be performed during test execution instead of discovery. public bool DisableDiscoveryEnumeration { get; set; } Property Value bool SkipTestWithoutData Gets a flag which indicates whether the test should be skipped (rather than failed) for a lack of data. public bool SkipTestWithoutData { get; set; } Property Value bool"
  },
  "v3/2.0.0/Xunit.TheoryData-1.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-1.html",
    "title": "Class TheoryData<T> | xunit",
    "summary": "Class TheoryData<T> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with one parameter. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T> : TheoryDataBase<TheoryDataRow<T>, T>, IReadOnlyCollection<TheoryDataRow<T>>, IEnumerable<TheoryDataRow<T>>, IEnumerable Type Parameters T The parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T>, T> TheoryData<T> Implements IReadOnlyCollection<TheoryDataRow<T>> IEnumerable<TheoryDataRow<T>> IEnumerable Inherited Members TheoryDataBase<TheoryDataRow<T>, T>.Count TheoryDataBase<TheoryDataRow<T>, T>.Add(T) TheoryDataBase<TheoryDataRow<T>, T>.Add(TheoryDataRow<T>) TheoryDataBase<TheoryDataRow<T>, T>.AddRange(IEnumerable<T>) TheoryDataBase<TheoryDataRow<T>, T>.AddRange(params T[]) TheoryDataBase<TheoryDataRow<T>, T>.AddRange(IEnumerable<TheoryDataRow<T>>) TheoryDataBase<TheoryDataRow<T>, T>.AddRange(params TheoryDataRow<T>[]) TheoryDataBase<TheoryDataRow<T>, T>.Convert(T) TheoryDataBase<TheoryDataRow<T>, T>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T> class. public TheoryData() TheoryData(IEnumerable<TheoryDataRow<T>>) Initializes a new instance of the TheoryData<T> class. public TheoryData(IEnumerable<TheoryDataRow<T>> values) Parameters values IEnumerable<TheoryDataRow<T>> The initial set of values TheoryData(IEnumerable<T>) Initializes a new instance of the TheoryData<T> class. public TheoryData(IEnumerable<T> values) Parameters values IEnumerable<T> The initial set of values TheoryData(params TheoryDataRow<T>[]) Initializes a new instance of the TheoryData<T> class. public TheoryData(params TheoryDataRow<T>[] values) Parameters values TheoryDataRow<T>[] The initial set of values TheoryData(params T[]) Initializes a new instance of the TheoryData<T> class. public TheoryData(params T[] values) Parameters values T[] The initial set of values Methods Convert(T) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T> Convert(T row) Parameters row T The raw data row Returns TheoryDataRow<T>"
  },
  "v3/2.0.0/Xunit.TheoryData-10.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-10.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with ten parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"
  },
  "v3/2.0.0/Xunit.TheoryData-11.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-11.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with eleven parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>"
  },
  "v3/2.0.0/Xunit.TheoryData-12.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-12.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with twelve parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>"
  },
  "v3/2.0.0/Xunit.TheoryData-13.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-13.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with thirteen parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. T13 The thirteenth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12, T13 p13) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. p13 T13 The thirteenth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>"
  },
  "v3/2.0.0/Xunit.TheoryData-14.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-14.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with fourteen parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. T13 The thirteenth parameter type. T14 The fourteenth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12, T13 p13, T14 p14) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. p13 T13 The thirteenth data value. p14 T14 The fourteenth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>"
  },
  "v3/2.0.0/Xunit.TheoryData-15.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-15.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with fifteen parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. T13 The thirteenth parameter type. T14 The fourteenth parameter type. T15 The fifteenth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12, T13 p13, T14 p14, T15 p15) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. p13 T13 The thirteenth data value. p14 T14 The fourteenth data value. p15 T15 The fifteenth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>"
  },
  "v3/2.0.0/Xunit.TheoryData-2.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-2.html",
    "title": "Class TheoryData<T1, T2> | xunit",
    "summary": "Class TheoryData<T1, T2> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with two parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2> : TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>, IReadOnlyCollection<TheoryDataRow<T1, T2>>, IEnumerable<TheoryDataRow<T1, T2>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)> TheoryData<T1, T2> Implements IReadOnlyCollection<TheoryDataRow<T1, T2>> IEnumerable<TheoryDataRow<T1, T2>> IEnumerable Derived MatrixTheoryData<T1, T2> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Count TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Add((T1, T2)) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Add(TheoryDataRow<T1, T2>) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(IEnumerable<(T1, T2)>) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(params (T1, T2)[]) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(IEnumerable<TheoryDataRow<T1, T2>>) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.AddRange(params TheoryDataRow<T1, T2>[]) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.Convert((T1, T2)) TheoryDataBase<TheoryDataRow<T1, T2>, (T1, T2)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2> class. public TheoryData() TheoryData(IEnumerable<(T1, T2)>) Initializes a new instance of the TheoryData<T1, T2> class. public TheoryData(IEnumerable<(T1, T2)> values) Parameters values IEnumerable<(T1, T2)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2>>) Initializes a new instance of the TheoryData<T1, T2> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2>> The initial set of values TheoryData(params (T1, T2)[]) Initializes a new instance of the TheoryData<T1, T2> class. public TheoryData(params (T1, T2)[] values) Parameters values (T1, T2)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2>[]) Initializes a new instance of the TheoryData<T1, T2> class. public TheoryData(params TheoryDataRow<T1, T2>[] values) Parameters values TheoryDataRow<T1, T2>[] The initial set of values Methods Add(T1, T2) Adds data to the theory data set. public void Add(T1 p1, T2 p2) Parameters p1 T1 The first data value. p2 T2 The second data value. Convert((T1, T2)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2> Convert((T1, T2) row) Parameters row (T1, T2) The raw data row Returns TheoryDataRow<T1, T2>"
  },
  "v3/2.0.0/Xunit.TheoryData-3.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-3.html",
    "title": "Class TheoryData<T1, T2, T3> | xunit",
    "summary": "Class TheoryData<T1, T2, T3> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with three parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3> : TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3>>, IEnumerable<TheoryDataRow<T1, T2, T3>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)> TheoryData<T1, T2, T3> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3>> IEnumerable<TheoryDataRow<T1, T2, T3>> IEnumerable Derived MatrixTheoryData<T1, T2, T3> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Add((T1, T2, T3)) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Add(TheoryDataRow<T1, T2, T3>) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(IEnumerable<(T1, T2, T3)>) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(params (T1, T2, T3)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3>>) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.AddRange(params TheoryDataRow<T1, T2, T3>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.Convert((T1, T2, T3)) TheoryDataBase<TheoryDataRow<T1, T2, T3>, (T1, T2, T3)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3)>) Initializes a new instance of the TheoryData<T1, T2, T3> class. public TheoryData(IEnumerable<(T1, T2, T3)> values) Parameters values IEnumerable<(T1, T2, T3)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3>>) Initializes a new instance of the TheoryData<T1, T2, T3> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3>> The initial set of values TheoryData(params (T1, T2, T3)[]) Initializes a new instance of the TheoryData<T1, T2, T3> class. public TheoryData(params (T1, T2, T3)[] values) Parameters values (T1, T2, T3)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3>[]) Initializes a new instance of the TheoryData<T1, T2, T3> class. public TheoryData(params TheoryDataRow<T1, T2, T3>[] values) Parameters values TheoryDataRow<T1, T2, T3>[] The initial set of values Methods Add(T1, T2, T3) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. Convert((T1, T2, T3)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3> Convert((T1, T2, T3) row) Parameters row (T1, T2, T3) The raw data row Returns TheoryDataRow<T1, T2, T3>"
  },
  "v3/2.0.0/Xunit.TheoryData-4.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-4.html",
    "title": "Class TheoryData<T1, T2, T3, T4> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with four parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)> TheoryData<T1, T2, T3, T4> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4>> IEnumerable<TheoryDataRow<T1, T2, T3, T4>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Add((T1, T2, T3, T4)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Add(TheoryDataRow<T1, T2, T3, T4>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(IEnumerable<(T1, T2, T3, T4)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(params (T1, T2, T3, T4)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.AddRange(params TheoryDataRow<T1, T2, T3, T4>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.Convert((T1, T2, T3, T4)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4>, (T1, T2, T3, T4)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4> class. public TheoryData(IEnumerable<(T1, T2, T3, T4)> values) Parameters values IEnumerable<(T1, T2, T3, T4)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4>> The initial set of values TheoryData(params (T1, T2, T3, T4)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4> class. public TheoryData(params (T1, T2, T3, T4)[] values) Parameters values (T1, T2, T3, T4)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4>[] The initial set of values Methods Add(T1, T2, T3, T4) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. Convert((T1, T2, T3, T4)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4> Convert((T1, T2, T3, T4) row) Parameters row (T1, T2, T3, T4) The raw data row Returns TheoryDataRow<T1, T2, T3, T4>"
  },
  "v3/2.0.0/Xunit.TheoryData-5.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-5.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with five parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)> TheoryData<T1, T2, T3, T4, T5> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Add((T1, T2, T3, T4, T5)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Add(TheoryDataRow<T1, T2, T3, T4, T5>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(params (T1, T2, T3, T4, T5)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.Convert((T1, T2, T3, T4, T5)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5>, (T1, T2, T3, T4, T5)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5> class. public TheoryData(params (T1, T2, T3, T4, T5)[] values) Parameters values (T1, T2, T3, T4, T5)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5>[] The initial set of values Methods Add(T1, T2, T3, T4, T5) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. Convert((T1, T2, T3, T4, T5)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5> Convert((T1, T2, T3, T4, T5) row) Parameters row (T1, T2, T3, T4, T5) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5>"
  },
  "v3/2.0.0/Xunit.TheoryData-6.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-6.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with six parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)> TheoryData<T1, T2, T3, T4, T5, T6> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Add((T1, T2, T3, T4, T5, T6)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(params (T1, T2, T3, T4, T5, T6)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.Convert((T1, T2, T3, T4, T5, T6)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6>, (T1, T2, T3, T4, T5, T6)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6> class. public TheoryData(params (T1, T2, T3, T4, T5, T6)[] values) Parameters values (T1, T2, T3, T4, T5, T6)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. Convert((T1, T2, T3, T4, T5, T6)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6> Convert((T1, T2, T3, T4, T5, T6) row) Parameters row (T1, T2, T3, T4, T5, T6) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6>"
  },
  "v3/2.0.0/Xunit.TheoryData-7.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-7.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with seven parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)> TheoryData<T1, T2, T3, T4, T5, T6, T7> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Add((T1, T2, T3, T4, T5, T6, T7)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.Convert((T1, T2, T3, T4, T5, T6, T7)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>, (T1, T2, T3, T4, T5, T6, T7)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. Convert((T1, T2, T3, T4, T5, T6, T7)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> Convert((T1, T2, T3, T4, T5, T6, T7) row) Parameters row (T1, T2, T3, T4, T5, T6, T7) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>"
  },
  "v3/2.0.0/Xunit.TheoryData-8.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-8.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with eight parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Add((T1, T2, T3, T4, T5, T6, T7, T8)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>, (T1, T2, T3, T4, T5, T6, T7, T8)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> Convert((T1, T2, T3, T4, T5, T6, T7, T8) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>"
  },
  "v3/2.0.0/Xunit.TheoryData-9.html": {
    "href": "v3/2.0.0/Xunit.TheoryData-9.html",
    "title": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> | xunit",
    "summary": "Class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Namespace Xunit Assembly xunit.v3.core.dll Represents a set of data for a theory with nine parameters. Data can be added to the data set using the collection initializer syntax. public class TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> : TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>, IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, IEnumerable Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. Inheritance object TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Implements IReadOnlyCollection<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>> IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>> IEnumerable Derived MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Inherited Members TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Count TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Add((T1, T2, T3, T4, T5, T6, T7, T8, T9)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Add(TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9)>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(params (T1, T2, T3, T4, T5, T6, T7, T8, T9)[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.AddRange(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>[]) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9)) TheoryDataBase<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>, (T1, T2, T3, T4, T5, T6, T7, T8, T9)>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TheoryData() Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public TheoryData() TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9)>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public TheoryData(IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> values) Parameters values IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> The initial set of values TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public TheoryData(IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>> values) Parameters values IEnumerable<TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>> The initial set of values TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9)[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public TheoryData(params (T1, T2, T3, T4, T5, T6, T7, T8, T9)[] values) Parameters values (T1, T2, T3, T4, T5, T6, T7, T8, T9)[] The initial set of values TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>[]) Initializes a new instance of the TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public TheoryData(params TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>[] values) Parameters values TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>[] The initial set of values Methods Add(T1, T2, T3, T4, T5, T6, T7, T8, T9) Adds data to the theory data set. public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9)) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> Convert((T1, T2, T3, T4, T5, T6, T7, T8, T9) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9) The raw data row Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>"
  },
  "v3/2.0.0/Xunit.TheoryData.html": {
    "href": "v3/2.0.0/Xunit.TheoryData.html",
    "title": "Class TheoryData | xunit",
    "summary": "Class TheoryData Namespace Xunit Assembly xunit.v3.core.dll Represents an untyped set of data for a theory with an unknown number of parameters. public abstract class TheoryData : TheoryDataBase<TheoryDataRow, object?[]>, IReadOnlyCollection<TheoryDataRow>, IEnumerable<TheoryDataRow>, IEnumerable Inheritance object TheoryDataBase<TheoryDataRow, object[]> TheoryData Implements IReadOnlyCollection<TheoryDataRow> IEnumerable<TheoryDataRow> IEnumerable Inherited Members TheoryDataBase<TheoryDataRow, object[]>.Count TheoryDataBase<TheoryDataRow, object[]>.Add(object[]) TheoryDataBase<TheoryDataRow, object[]>.Add(TheoryDataRow) TheoryDataBase<TheoryDataRow, object[]>.AddRange(IEnumerable<object[]>) TheoryDataBase<TheoryDataRow, object[]>.AddRange(params object[][]) TheoryDataBase<TheoryDataRow, object[]>.AddRange(IEnumerable<TheoryDataRow>) TheoryDataBase<TheoryDataRow, object[]>.AddRange(params TheoryDataRow[]) TheoryDataBase<TheoryDataRow, object[]>.Convert(object[]) TheoryDataBase<TheoryDataRow, object[]>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks It is strongly recommended that you use TheoryDataBase<TTheoryDataRow, TRawDataRow> as the base type for any strongly typed collections, because it will provide both strong compiler support and wider collection initialization syntax support. Methods Convert(object?[]) Convert untyped values into the appropriate theory data row. protected override TheoryDataRow Convert(object?[] row) Parameters row object[] The raw data row Returns TheoryDataRow"
  },
  "v3/2.0.0/Xunit.TheoryDataBase-2.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataBase-2.html",
    "title": "Class TheoryDataBase<TTheoryDataRow, TRawDataRow> | xunit",
    "summary": "Class TheoryDataBase<TTheoryDataRow, TRawDataRow> Namespace Xunit Assembly xunit.v3.core.dll Provides a base type for theories based on collection initialization syntax. public abstract class TheoryDataBase<TTheoryDataRow, TRawDataRow> : IReadOnlyCollection<TTheoryDataRow>, IEnumerable<TTheoryDataRow>, IEnumerable where TTheoryDataRow : class, ITheoryDataRow Type Parameters TTheoryDataRow The type of the theory data row (must implement ITheoryDataRow). TRawDataRow The raw data row that requires conversion to TTheoryDataRow. Inheritance object TheoryDataBase<TTheoryDataRow, TRawDataRow> Implements IReadOnlyCollection<TTheoryDataRow> IEnumerable<TTheoryDataRow> IEnumerable Derived TheoryData TheoryData<T> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> TheoryData<T1, T2> TheoryData<T1, T2, T3> TheoryData<T1, T2, T3, T4> TheoryData<T1, T2, T3, T4, T5> TheoryData<T1, T2, T3, T4, T5, T6> TheoryData<T1, T2, T3, T4, T5, T6, T7> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Count public int Count { get; } Property Value int Methods Add(TTheoryDataRow) Adds a row to the theory. public void Add(TTheoryDataRow row) Parameters row TTheoryDataRow The row of data to be added. Add(TRawDataRow) Adds a row to the theory. public void Add(TRawDataRow row) Parameters row TRawDataRow The row of data to be added. AddRange(IEnumerable<TTheoryDataRow>) Adds multiple rows to the theory. public void AddRange(IEnumerable<TTheoryDataRow> rows) Parameters rows IEnumerable<TTheoryDataRow> The rows of data to be added. AddRange(IEnumerable<TRawDataRow>) Adds multiple rows to the theory. public void AddRange(IEnumerable<TRawDataRow> rows) Parameters rows IEnumerable<TRawDataRow> The rows of data to be added. AddRange(params TTheoryDataRow[]) Adds multiple rows to the theory. public void AddRange(params TTheoryDataRow[] rows) Parameters rows TTheoryDataRow[] The rows of data to be added. AddRange(params TRawDataRow[]) Adds multiple rows to the theory. public void AddRange(params TRawDataRow[] rows) Parameters rows TRawDataRow[] The rows of data to be added. Convert(TRawDataRow) Convert untyped values into the appropriate theory data row. protected abstract TTheoryDataRow Convert(TRawDataRow row) Parameters row TRawDataRow The raw data row Returns TTheoryDataRow GetEnumerator() public IEnumerator<TTheoryDataRow> GetEnumerator() Returns IEnumerator<TTheoryDataRow>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-1.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-1.html",
    "title": "Class TheoryDataRow<T1> | xunit",
    "summary": "Class TheoryDataRow<T1> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts one typed value. public sealed class TheoryDataRow<T1> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1> class, encapsulating the one item of typed data. Constructors TheoryDataRow(T1) Implementation of ITheoryDataRow which accepts one typed value. public TheoryDataRow(T1 p1) Parameters p1 T1 The first data value. Remarks Initializes a new instance of the TheoryDataRow<T1> class, encapsulating the one item of typed data. Properties Data Gets the row of data. public T1 Data { get; } Property Value T1 Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator T1(TheoryDataRow<T1>) public static implicit operator T1(TheoryDataRow<T1> p1) Parameters p1 TheoryDataRow<T1> Returns T1 implicit operator TheoryDataRow<T1>(T1) public static implicit operator TheoryDataRow<T1>(T1 p1) Parameters p1 T1 Returns TheoryDataRow<T1>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-10.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-10.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts ten typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class, encapsulating the ten items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Implementation of ITheoryDataRow which accepts ten typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class, encapsulating the ten items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-11.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-11.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts eleven typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class, encapsulating the eleven items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Implementation of ITheoryDataRow which accepts eleven typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class, encapsulating the eleven items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-12.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-12.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts twelve typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class, encapsulating the twelve items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Implementation of ITheoryDataRow which accepts twelve typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class, encapsulating the twelve items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-13.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-13.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts thirteen typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. T13 The thirteenth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class, encapsulating the thirteen items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Implementation of ITheoryDataRow which accepts thirteen typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12, T13 p13) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. p13 T13 The thirteenth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class, encapsulating the thirteen items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-14.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-14.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts fourteen typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. T13 The thirteenth parameter type. T14 The fourteenth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class, encapsulating the fourteen items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Implementation of ITheoryDataRow which accepts fourteen typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12, T13 p13, T14 p14) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. p13 T13 The thirteenth data value. p14 T14 The fourteenth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class, encapsulating the fourteen items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-15.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-15.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts fifteen typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. T10 The tenth parameter type. T11 The eleventh parameter type. T12 The twelfth parameter type. T13 The thirteenth parameter type. T14 The fourteenth parameter type. T15 The fifteenth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class, encapsulating the fifteen items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Implementation of ITheoryDataRow which accepts fifteen typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10, T11 p11, T12 p12, T13 p13, T14 p14, T15 p15) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. p10 T10 The tenth data value. p11 T11 The eleventh data value. p12 T12 The twelfth data value. p13 T13 The thirteenth data value. p14 T14 The fourteenth data value. p15 T15 The fifteenth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class, encapsulating the fifteen items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-2.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-2.html",
    "title": "Class TheoryDataRow<T1, T2> | xunit",
    "summary": "Class TheoryDataRow<T1, T2> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts two typed values. public sealed class TheoryDataRow<T1, T2> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2> class, encapsulating the two items of typed data. Constructors TheoryDataRow(T1, T2) Implementation of ITheoryDataRow which accepts two typed values. public TheoryDataRow(T1 p1, T2 p2) Parameters p1 T1 The first data value. p2 T2 The second data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2> class, encapsulating the two items of typed data. Properties Data Gets the row of data. public (T1, T2) Data { get; } Property Value (T1, T2) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2>((T1, T2)) public static implicit operator TheoryDataRow<T1, T2>((T1, T2) row) Parameters row (T1, T2) Returns TheoryDataRow<T1, T2>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-3.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-3.html",
    "title": "Class TheoryDataRow<T1, T2, T3> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts three typed values. public sealed class TheoryDataRow<T1, T2, T3> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3> class, encapsulating the three items of typed data. Constructors TheoryDataRow(T1, T2, T3) Implementation of ITheoryDataRow which accepts three typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3> class, encapsulating the three items of typed data. Properties Data Gets the row of data. public (T1, T2, T3) Data { get; } Property Value (T1, T2, T3) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3>((T1, T2, T3)) public static implicit operator TheoryDataRow<T1, T2, T3>((T1, T2, T3) row) Parameters row (T1, T2, T3) Returns TheoryDataRow<T1, T2, T3>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-4.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-4.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts four typed values. public sealed class TheoryDataRow<T1, T2, T3, T4> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4> class, encapsulating the four items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4) Implementation of ITheoryDataRow which accepts four typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4> class, encapsulating the four items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4) Data { get; } Property Value (T1, T2, T3, T4) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4>((T1, T2, T3, T4)) public static implicit operator TheoryDataRow<T1, T2, T3, T4>((T1, T2, T3, T4) row) Parameters row (T1, T2, T3, T4) Returns TheoryDataRow<T1, T2, T3, T4>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-5.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-5.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts five typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5> class, encapsulating the five items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5) Implementation of ITheoryDataRow which accepts five typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5> class, encapsulating the five items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5) Data { get; } Property Value (T1, T2, T3, T4, T5) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5>((T1, T2, T3, T4, T5)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5>((T1, T2, T3, T4, T5) row) Parameters row (T1, T2, T3, T4, T5) Returns TheoryDataRow<T1, T2, T3, T4, T5>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-6.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-6.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts six typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6> class, encapsulating the six items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6) Implementation of ITheoryDataRow which accepts six typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6> class, encapsulating the six items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6) Data { get; } Property Value (T1, T2, T3, T4, T5, T6) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6>((T1, T2, T3, T4, T5, T6)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6>((T1, T2, T3, T4, T5, T6) row) Parameters row (T1, T2, T3, T4, T5, T6) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-7.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-7.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts seven typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> class, encapsulating the seven items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7) Implementation of ITheoryDataRow which accepts seven typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> class, encapsulating the seven items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>((T1, T2, T3, T4, T5, T6, T7)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>((T1, T2, T3, T4, T5, T6, T7) row) Parameters row (T1, T2, T3, T4, T5, T6, T7) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-8.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-8.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts eight typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> class, encapsulating the eight items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8) Implementation of ITheoryDataRow which accepts eight typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> class, encapsulating the eight items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>((T1, T2, T3, T4, T5, T6, T7, T8)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>((T1, T2, T3, T4, T5, T6, T7, T8) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow-9.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow-9.html",
    "title": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> | xunit",
    "summary": "Class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts nine typed values. public sealed class TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> : TheoryDataRowBase, ITheoryDataRow Type Parameters T1 The first parameter type. T2 The second parameter type. T3 The third parameter type. T4 The fourth parameter type. T5 The fifth parameter type. T6 The sixth parameter type. T7 The seventh parameter type. T8 The eighth parameter type. T9 The ninth parameter type. Inheritance object TheoryDataRowBase TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> class, encapsulating the nine items of typed data. Constructors TheoryDataRow(T1, T2, T3, T4, T5, T6, T7, T8, T9) Implementation of ITheoryDataRow which accepts nine typed values. public TheoryDataRow(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9) Parameters p1 T1 The first data value. p2 T2 The second data value. p3 T3 The third data value. p4 T4 The fourth data value. p5 T5 The fifth data value. p6 T6 The sixth data value. p7 T7 The seventh data value. p8 T8 The eighth data value. p9 T9 The ninth data value. Remarks Initializes a new instance of the TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> class, encapsulating the nine items of typed data. Properties Data Gets the row of data. public (T1, T2, T3, T4, T5, T6, T7, T8, T9) Data { get; } Property Value (T1, T2, T3, T4, T5, T6, T7, T8, T9) Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[] Operators implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>((T1, T2, T3, T4, T5, T6, T7, T8, T9)) public static implicit operator TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>((T1, T2, T3, T4, T5, T6, T7, T8, T9) row) Parameters row (T1, T2, T3, T4, T5, T6, T7, T8, T9) Returns TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>"
  },
  "v3/2.0.0/Xunit.TheoryDataRow.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRow.html",
    "title": "Class TheoryDataRow | xunit",
    "summary": "Class TheoryDataRow Namespace Xunit Assembly xunit.v3.core.dll Implementation of ITheoryDataRow which accepts untyped pre-enumerated data. public class TheoryDataRow : TheoryDataRowBase, ITheoryDataRow Inheritance object TheoryDataRowBase TheoryDataRow Implements ITheoryDataRow Inherited Members TheoryDataRowBase.Explicit TheoryDataRowBase.Skip TheoryDataRowBase.TestDisplayName TheoryDataRowBase.Timeout TheoryDataRowBase.Traits object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Remarks It is strongly recommended that you use one of the generic typed variations when possible, as this provides type-safety from the compiler and allows the analyzers to flag instances where data types from theory data don't match the data types in theory parameters. Constructors TheoryDataRow(params object?[]) Implementation of ITheoryDataRow which accepts untyped pre-enumerated data. public TheoryDataRow(params object?[] data) Parameters data object[] The data for the theory row Remarks It is strongly recommended that you use one of the generic typed variations when possible, as this provides type-safety from the compiler and allows the analyzers to flag instances where data types from theory data don't match the data types in theory parameters. Properties Data Gets the row of data. public object?[] Data { get; } Property Value object[] Methods GetData() Override to implement GetData(). protected override object?[] GetData() Returns object[]"
  },
  "v3/2.0.0/Xunit.TheoryDataRowBase.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRowBase.html",
    "title": "Class TheoryDataRowBase | xunit",
    "summary": "Class TheoryDataRowBase Namespace Xunit Assembly xunit.v3.core.dll Provide a base implemention of ITheoryDataRow with settable properties and deferred data storage. public abstract class TheoryDataRowBase : ITheoryDataRow Inheritance object TheoryDataRowBase Implements ITheoryDataRow Derived TheoryDataRow TheoryDataRow<T1> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> TheoryDataRow<T1, T2> TheoryDataRow<T1, T2, T3> TheoryDataRow<T1, T2, T3, T4> TheoryDataRow<T1, T2, T3, T4, T5> TheoryDataRow<T1, T2, T3, T4, T5, T6> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) TheoryDataRowBaseExtensions.WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) TheoryDataRowBaseExtensions.WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) TheoryDataRowBaseExtensions.WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) TheoryDataRowBaseExtensions.WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Properties Explicit Gets a flag that indicates that the data row should only be run explicitly. If the value is null, then it inherits its explicitness from the value of Explicit. public bool? Explicit { get; set; } Property Value bool? Skip Gets the reason for skipping this row of data; if null is returned, then the data row isn't skipped. public string? Skip { get; set; } Property Value string TestDisplayName Gets the display name for the test (replacing the default behavior, which would be to use TestDisplayName or DisplayName, or falling back to the default test display name based on TestMethodDisplay and TestMethodDisplayOptions in the configuration file). public string? TestDisplayName { get; set; } Property Value string Timeout A value greater than zero marks the test as having a timeout, and gets or sets the timeout (in milliseconds). A non-null value here overrides any inherited value from the IDataAttribute or the ITheoryAttribute. public int? Timeout { get; set; } Property Value int? Remarks WARNING: Using this with parallelization turned on will result in undefined behavior. Timeout is only supported when parallelization is disabled, either globally or with a parallelization-disabled test collection. Traits Gets or sets the traits for the theory data row. public Dictionary<string, HashSet<string>> Traits { get; set; } Property Value Dictionary<string, HashSet<string>> Methods GetData() Override to implement GetData(). protected abstract object?[] GetData() Returns object[]"
  },
  "v3/2.0.0/Xunit.TheoryDataRowBaseExtensions.html": {
    "href": "v3/2.0.0/Xunit.TheoryDataRowBaseExtensions.html",
    "title": "Class TheoryDataRowBaseExtensions | xunit",
    "summary": "Class TheoryDataRowBaseExtensions Namespace Xunit Assembly xunit.v3.core.dll Extension methods for TheoryDataRowBase. public static class TheoryDataRowBaseExtensions Inheritance object TheoryDataRowBaseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithExplicit<TTheoryDataRow>(TTheoryDataRow, bool?) Sets the explicit flag on a theory data row. public static TTheoryDataRow WithExplicit<TTheoryDataRow>(this TTheoryDataRow theoryDataRow, bool? @explicit) where TTheoryDataRow : TheoryDataRowBase Parameters theoryDataRow TTheoryDataRow The theory data row explicit bool? The value to use for whether this row is explicit Returns TTheoryDataRow Type Parameters TTheoryDataRow WithSkip<TTheoryDataRow>(TTheoryDataRow, string?) Sets the skip reason on a theory data row. public static TTheoryDataRow WithSkip<TTheoryDataRow>(this TTheoryDataRow theoryDataRow, string? skip) where TTheoryDataRow : TheoryDataRowBase Parameters theoryDataRow TTheoryDataRow The theory data row skip string The value to use for the skip reason; pass null to not skip Returns TTheoryDataRow Type Parameters TTheoryDataRow WithTestDisplayName<TTheoryDataRow>(TTheoryDataRow, string?) Sets the test display name on a theory data row. public static TTheoryDataRow WithTestDisplayName<TTheoryDataRow>(this TTheoryDataRow theoryDataRow, string? testDisplayName) where TTheoryDataRow : TheoryDataRowBase Parameters theoryDataRow TTheoryDataRow The theory data row testDisplayName string The value to use for the test display name; pass null to use the default display name Returns TTheoryDataRow Type Parameters TTheoryDataRow WithTimeout<TTheoryDataRow>(TTheoryDataRow, int?) Sets the timeout on a theory data row. public static TTheoryDataRow WithTimeout<TTheoryDataRow>(this TTheoryDataRow theoryDataRow, int? timeout) where TTheoryDataRow : TheoryDataRowBase Parameters theoryDataRow TTheoryDataRow The theory data row timeout int? The value to use for timeout, in seconds; pass null to not have a timeout Returns TTheoryDataRow Type Parameters TTheoryDataRow WithTrait<TTheoryDataRow>(TTheoryDataRow, string, string) Adds a single trait name/value pair to the theory data row. public static TTheoryDataRow WithTrait<TTheoryDataRow>(this TTheoryDataRow theoryDataRow, string name, string value) where TTheoryDataRow : TheoryDataRowBase Parameters theoryDataRow TTheoryDataRow The theory data row name string The name of the trait value string The value of the trait Returns TTheoryDataRow Type Parameters TTheoryDataRow"
  },
  "v3/2.0.0/Xunit.TraitAttribute.html": {
    "href": "v3/2.0.0/Xunit.TraitAttribute.html",
    "title": "Class TraitAttribute | xunit",
    "summary": "Class TraitAttribute Namespace Xunit Assembly xunit.v3.core.dll Attribute used to decorate a test method, test class, or assembly with an arbitrary name/value pair (\"trait\"). [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public sealed class TraitAttribute : Attribute, ITraitAttribute Inheritance object Attribute TraitAttribute Implements ITraitAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TraitAttribute(string, string) Attribute used to decorate a test method, test class, or assembly with an arbitrary name/value pair (\"trait\"). public TraitAttribute(string name, string value) Parameters name string The trait name value string The trait value Properties Name Get the trait name. public string Name { get; } Property Value string Value Gets the trait value. public string Value { get; } Property Value string Methods GetTraits() Gets the trait values from the trait attribute. public IReadOnlyCollection<KeyValuePair<string, string>> GetTraits() Returns IReadOnlyCollection<KeyValuePair<string, string>> The trait values."
  },
  "v3/2.0.0/Xunit.XunitFrontController.html": {
    "href": "v3/2.0.0/Xunit.XunitFrontController.html",
    "title": "Class XunitFrontController | xunit",
    "summary": "Class XunitFrontController Namespace Xunit Assembly xunit.v3.runner.utility.netfx.dll Default implementation of IFrontController which supports running tests from xUnit.net v1, v2, and v3. public class XunitFrontController : IFrontController, IFrontControllerDiscoverer, IAsyncDisposable Inheritance object XunitFrontController Implements IFrontController IFrontControllerDiscoverer IAsyncDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CanUseAppDomains Gets a flag indicating whether this discovery/execution can use app domains. public bool CanUseAppDomains { get; } Property Value bool TargetFramework Gets the target framework that the test assembly is linked against. public string TargetFramework { get; } Property Value string TestAssemblyUniqueID Gets the unique ID for the test assembly provided to the discoverer. public string TestAssemblyUniqueID { get; } Property Value string TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public string TestFrameworkDisplayName { get; } Property Value string Methods Create(XunitProjectAssembly, ISourceInformationProvider?, IMessageSink?, ITestProcessLauncher?) Returns an implementation of IFrontController which can be used for both discovery and execution. If the assembly does not appear to be a test assembly, returns null. public static IFrontController? Create(XunitProjectAssembly projectAssembly, ISourceInformationProvider? sourceInformationProvider = null, IMessageSink? diagnosticMessageSink = null, ITestProcessLauncher? testProcessLauncher = null) Parameters projectAssembly XunitProjectAssembly The test project assembly. sourceInformationProvider ISourceInformationProvider The optional source information provider. diagnosticMessageSink IMessageSink The optional message sink which receives IDiagnosticMessage and IInternalDiagnosticMessage messages. testProcessLauncher ITestProcessLauncher The test process launcher, used to launch v3 test processes. If not provided, LocalOutOfProcessTestProcessLauncher will be used. (This value is not used when running v1 or v2 test proceses.) Returns IFrontController DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask Find(IMessageSink, FrontControllerFindSettings) Starts the process of finding tests in an assembly. Typically only used by runners which discover tests and present them into a UI for the user to interactively choose for selective run (via Run(IMessageSink, FrontControllerRunSettings)). For runners which simply wish to discover and immediately run tests, they should instead use FindAndRun(IMessageSink, FrontControllerFindAndRunSettings), which permits the same filtering logic as this method. public virtual void Find(IMessageSink messageSink, FrontControllerFindSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindSettings The settings used during discovery. FindAndRun(IMessageSink, FrontControllerFindAndRunSettings) Starts the process of finding and running tests in an assembly. Typically only used by runner which do not present test discovery UIs to users that allow them to run selected tests (those should instead use Find(IMessageSink, FrontControllerFindSettings) and Run(IMessageSink, FrontControllerRunSettings) as separate operations). public void FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerFindAndRunSettings The settings used during discovery and execution. Run(IMessageSink, FrontControllerRunSettings) Starts the process of running selected tests in the assembly. The serialized test cases to run come from calling Find(IMessageSink, FrontControllerFindSettings). public void Run(IMessageSink messageSink, FrontControllerRunSettings settings) Parameters messageSink IMessageSink The message sink to report results back to. settings FrontControllerRunSettings The settings used during execution."
  },
  "v3/2.0.0/Xunit.html": {
    "href": "v3/2.0.0/Xunit.html",
    "title": "Namespace Xunit | xunit",
    "summary": "Namespace Xunit Classes AssemblyFixtureAttribute Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of the fixture data is initialized before any test in the assembly are run (including InitializeAsync() if it's implemented). After all the tests in the assembly have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the fixture type. AssemblyHelper This class provides assistance with assembly resolution for missing assemblies. AssemblyUtility Utility functions for assemblies. Assert Contains various static methods that are used to verify that conditions are met during the process of running tests. Assert.RaisedEvent<T> Represents a raised event after the fact. AssertEquivalenceComparer An implementation of IEqualityComparer that uses the same logic from Equivalent(object?, object?, bool). AssertEquivalenceComparer<T> An implementation of IEqualityComparer<T> that uses the same logic from Equivalent(object?, object?, bool). CaptureConsoleAttribute Captures Console output (Out and/or Error) and reports it to the test output helper. CaptureTraceAttribute Captures Trace and Debug output and reports it to the test output helper. ClassDataAttribute Provides a data source for a data theory, with the data coming from a class which must implement IEnumerable<object?[]>. CollectionAttribute Used to declare a specific test collection for a test class. CollectionAttribute<TCollectionDefinition> Used to declare a specific test collection for a test class. Equivalent to using CollectionAttribute with the type-based constructor. CollectionBehaviorAttribute Default implementation of ICollectionBehaviorAttribute. CollectionDefinitionAttribute Used to declare a test collection container class. The container class gives developers a place to attach interfaces like IClassFixture<TFixture> and ICollectionFixture<TFixture> that will be applied to all tests classes that are members of the test collection. FactAttribute Attribute that is applied to a method to indicate that it is a fact that should be run by the default test runner. FrontControllerFindAndRunSettings Contains the information by FindAndRun(IMessageSink, FrontControllerFindAndRunSettings). FrontControllerFindSettings Contains the information by Find(IMessageSink, FrontControllerFindSettings). FrontControllerLaunchOptions Launch options when using IFrontController and/or IFrontControllerDiscoverer. Current only supported by v3 test projects (all options will be ignored for v1/v2 test projects). FrontControllerRunSettings Contains the information by Run(IMessageSink, FrontControllerRunSettings). FrontControllerSettingsBase Base class for all invocations of IFrontController and IFrontControllerDiscoverer. InlineDataAttribute Provides a data source for a data theory, with the data coming from inline values. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Represents theory data which is created from the merging of ten data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Represents theory data which is created from the merging of eleven data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Represents theory data which is created from the merging of twelve data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Represents theory data which is created from the merging of thirteen data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Represents theory data which is created from the merging of fourteen data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Represents theory data which is created from the merging of fifteen data streams by creating a matrix of the data. MatrixTheoryData<T1, T2> Represents theory data which is created from the merging of two data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3> Represents theory data which is created from the merging of three data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4> Represents theory data which is created from the merging of four data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5> Represents theory data which is created from the merging of five data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6> Represents theory data which is created from the merging of six data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7> Represents theory data which is created from the merging of seven data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Represents theory data which is created from the merging of eight data streams by creating a matrix of the data. MatrixTheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Represents theory data which is created from the merging of nine data streams by creating a matrix of the data. MediaTypeUtility This class provides mappings from media types (stored in attachments) to the intended file system extension when storing the attachment on disk. MemberDataAttribute Provides a data source for a data theory, with the data coming from one of the following sources: A public static property A public static field A public static method (with parameters) Record Allows the user to record actions for a test. RemotingUtility Internal helper class for remoting. TestCaseOrdererAttribute Used to decorate an assembly, test collection, or test class to allow the use of a custom test case orderer. TestCollectionOrdererAttribute Used to decorate an assembly to allow the use of a custom test collection orderer. TestContext Represents information about the current state of the test engine. It may be available at various points during the execution pipeline, so consumers must always take care to ensure that they check for null values from the various properties. TestContextExtensions Extension methods for ITestContext. TestFrameworkAttribute Used to decorate an assembly to allow the use of a custom test framework. TestResultState Represents information about the current state of a test after it has run. TheoryAttribute Marks a test method as being a data theory. Data theories are tests which are fed various bits of data from a data source, mapping to parameters on the test method. If the data source contains multiple rows, then the test method is executed multiple times (once with each data row). Data is provided by attributes which implement IDataAttribute (most commonly, InlineDataAttribute and MemberDataAttribute). TheoryData Represents an untyped set of data for a theory with an unknown number of parameters. TheoryDataBase<TTheoryDataRow, TRawDataRow> Provides a base type for theories based on collection initialization syntax. TheoryDataRow Implementation of ITheoryDataRow which accepts untyped pre-enumerated data. TheoryDataRowBase Provide a base implemention of ITheoryDataRow with settable properties and deferred data storage. TheoryDataRowBaseExtensions Extension methods for TheoryDataRowBase. TheoryDataRow<T1> Implementation of ITheoryDataRow which accepts one typed value. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Implementation of ITheoryDataRow which accepts ten typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Implementation of ITheoryDataRow which accepts eleven typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Implementation of ITheoryDataRow which accepts twelve typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Implementation of ITheoryDataRow which accepts thirteen typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Implementation of ITheoryDataRow which accepts fourteen typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Implementation of ITheoryDataRow which accepts fifteen typed values. TheoryDataRow<T1, T2> Implementation of ITheoryDataRow which accepts two typed values. TheoryDataRow<T1, T2, T3> Implementation of ITheoryDataRow which accepts three typed values. TheoryDataRow<T1, T2, T3, T4> Implementation of ITheoryDataRow which accepts four typed values. TheoryDataRow<T1, T2, T3, T4, T5> Implementation of ITheoryDataRow which accepts five typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6> Implementation of ITheoryDataRow which accepts six typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7> Implementation of ITheoryDataRow which accepts seven typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8> Implementation of ITheoryDataRow which accepts eight typed values. TheoryDataRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> Implementation of ITheoryDataRow which accepts nine typed values. TheoryData<T> Represents a set of data for a theory with one parameter. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Represents a set of data for a theory with ten parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Represents a set of data for a theory with eleven parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Represents a set of data for a theory with twelve parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Represents a set of data for a theory with thirteen parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Represents a set of data for a theory with fourteen parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Represents a set of data for a theory with fifteen parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2> Represents a set of data for a theory with two parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3> Represents a set of data for a theory with three parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4> Represents a set of data for a theory with four parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5> Represents a set of data for a theory with five parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6> Represents a set of data for a theory with six parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7> Represents a set of data for a theory with seven parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8> Represents a set of data for a theory with eight parameters. Data can be added to the data set using the collection initializer syntax. TheoryData<T1, T2, T3, T4, T5, T6, T7, T8, T9> Represents a set of data for a theory with nine parameters. Data can be added to the data set using the collection initializer syntax. TraitAttribute Attribute used to decorate a test method, test class, or assembly with an arbitrary name/value pair (\"trait\"). XunitFrontController Default implementation of IFrontController which supports running tests from xUnit.net v1, v2, and v3. Interfaces IAsyncLifetime Used to provide asynchronous lifetime functionality. Currently supported: Test classes Classes used in IClassFixture<TFixture> Classes used in ICollectionFixture<TFixture>. Classes used in [assembly: AssemblyFixtureAttribute()]. IClassFixture<TFixture> Used to decorate xUnit.net test classes and collections to indicate a test which has per-test-class fixture data. An instance of the fixture data is initialized just before the first test in the class is run (including InitializeAsync() if it's implemented). After all the tests in the test class have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Class fixtures may have a public constructor which is either empty, or accepts one or more assembly and/or collection fixture objects as constructor arguments. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which/ exactly matches the TFixture. ICollectionFixture<TFixture> Used to decorate xUnit.net test classes and collections to indicate a test which has per-test-collection fixture data. An instance of the fixture data is initialized just before the first test in the collection is run (including InitializeAsync() if it's implemented). After all the tests in the collection have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Collection fixtures may have a public constructor which is either empty, or accepts one or more assembly fixture objects as constructor arguments. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the TFixture. IFrontController Represents a class which acts as a front controller for unit testing frameworks. This allows runners to run tests from multiple unit testing frameworks (in particular, hiding the differences between xUnit.net v1, v2, and v3 tests). IFrontControllerDiscoverer Represents a class which acts as a front controller for unit testing frameworks for the purposes of discovery (which can include source-based discovery). Tests found with these classes can later be run by an instance of IFrontController. This allows runners to run tests from multiple unit testing frameworks (in particular, hiding the differences between xUnit.net v1, v2, and v3 tests). ITestContext Represents the current state of the test pipeline. ITestContextAccessor Gives access to the current test context, which is considered to be an immutable snapshot of the current test state at the time it's retrieved. ITestOutputHelper Represents a class which can be used to provide test output. ITheoryDataRow Represents a single row of theory data, along with optional metadata attached to the row. Enums CollectionBehavior Defines the built-in behavior types for collections in xUnit.net. TestEngineStatus Represents the current status of the execution of the test engine, with respect to a phase in the execution pipeline (for example, engine status for a test collection vs. test case vs. test). TestPipelineStage A flag to indicate which part of the test pipeline you're in. Retrieved from an instance of TestContext. TestResult Indicates the result of running the test."
  },
  "v3/2.0.0/Xunit.v3.AfterTestFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.AfterTestFinished.html",
    "title": "Class AfterTestFinished | xunit",
    "summary": "Class AfterTestFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IAfterTestFinished. [JsonTypeID(\"after-test-finished\")] public sealed class AfterTestFinished : TestMessage, IAfterTestFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage AfterTestFinished Implements IAfterTestFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.AfterTestStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.AfterTestStarting.html",
    "title": "Class AfterTestStarting | xunit",
    "summary": "Class AfterTestStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IAfterTestStarting. [JsonTypeID(\"after-test-starting\")] public sealed class AfterTestStarting : TestMessage, IAfterTestStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage AfterTestStarting Implements IAfterTestStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.BeforeAfterTestAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.BeforeAfterTestAttribute.html",
    "title": "Class BeforeAfterTestAttribute | xunit",
    "summary": "Class BeforeAfterTestAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IBeforeAfterTestAttribute. [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public abstract class BeforeAfterTestAttribute : Attribute, IBeforeAfterTestAttribute Inheritance object Attribute BeforeAfterTestAttribute Implements IBeforeAfterTestAttribute Derived CaptureConsoleAttribute CaptureTraceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods After(MethodInfo, IXunitTest) This method is called after the test method is executed. public virtual void After(MethodInfo methodUnderTest, IXunitTest test) Parameters methodUnderTest MethodInfo The method under test test IXunitTest The current ITest Before(MethodInfo, IXunitTest) This method is called before the test method is executed. public virtual void Before(MethodInfo methodUnderTest, IXunitTest test) Parameters methodUnderTest MethodInfo The method under test test IXunitTest The current ITest"
  },
  "v3/2.0.0/Xunit.v3.BeforeTestFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.BeforeTestFinished.html",
    "title": "Class BeforeTestFinished | xunit",
    "summary": "Class BeforeTestFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IBeforeTestFinished. [JsonTypeID(\"before-test-finished\")] public sealed class BeforeTestFinished : TestMessage, IBeforeTestFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage BeforeTestFinished Implements IBeforeTestFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.BeforeTestStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.BeforeTestStarting.html",
    "title": "Class BeforeTestStarting | xunit",
    "summary": "Class BeforeTestStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IBeforeTestStarting. [JsonTypeID(\"before-test-starting\")] public sealed class BeforeTestStarting : TestMessage, IBeforeTestStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage BeforeTestStarting Implements IBeforeTestStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AttributeName Gets the fully qualified type name of the IBeforeAfterTestAttribute. public required string AttributeName { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.CollectionPerAssemblyTestCollectionFactory.html": {
    "href": "v3/2.0.0/Xunit.v3.CollectionPerAssemblyTestCollectionFactory.html",
    "title": "Class CollectionPerAssemblyTestCollectionFactory | xunit",
    "summary": "Class CollectionPerAssemblyTestCollectionFactory Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IXunitTestCollectionFactory that creates a single default test collection for the assembly, and places any tests classes which are not decorated by CollectionAttribute or CollectionAttribute<TCollectionDefinition> into the default test collection. public class CollectionPerAssemblyTestCollectionFactory : TestCollectionFactoryBase, IXunitTestCollectionFactory Inheritance object TestCollectionFactoryBase CollectionPerAssemblyTestCollectionFactory Implements IXunitTestCollectionFactory Inherited Members TestCollectionFactoryBase.TestAssembly TestCollectionFactoryBase.Get(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors CollectionPerAssemblyTestCollectionFactory(IXunitTestAssembly) Initializes a new instance of the CollectionPerAssemblyTestCollectionFactory class. public CollectionPerAssemblyTestCollectionFactory(IXunitTestAssembly testAssembly) Parameters testAssembly IXunitTestAssembly The assembly. Properties DisplayName Gets the display name for the test collection factory. This information is shown to the end user as part of the description of the test environment. public override string DisplayName { get; } Property Value string Methods GetDefaultTestCollection(Type) Override to provide a test collection when the given test class is not decorated with any test collection attributes. protected override IXunitTestCollection GetDefaultTestCollection(Type testClass) Parameters testClass Type The test class Returns IXunitTestCollection"
  },
  "v3/2.0.0/Xunit.v3.CollectionPerClassTestCollectionFactory.html": {
    "href": "v3/2.0.0/Xunit.v3.CollectionPerClassTestCollectionFactory.html",
    "title": "Class CollectionPerClassTestCollectionFactory | xunit",
    "summary": "Class CollectionPerClassTestCollectionFactory Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IXunitTestCollectionFactory which creates a new test collection for each test class that isn't decorated with CollectionAttribute or CollectionAttribute<TCollectionDefinition>. public class CollectionPerClassTestCollectionFactory : TestCollectionFactoryBase, IXunitTestCollectionFactory Inheritance object TestCollectionFactoryBase CollectionPerClassTestCollectionFactory Implements IXunitTestCollectionFactory Inherited Members TestCollectionFactoryBase.TestAssembly TestCollectionFactoryBase.Get(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors CollectionPerClassTestCollectionFactory(IXunitTestAssembly) Implementation of IXunitTestCollectionFactory which creates a new test collection for each test class that isn't decorated with CollectionAttribute or CollectionAttribute<TCollectionDefinition>. public CollectionPerClassTestCollectionFactory(IXunitTestAssembly testAssembly) Parameters testAssembly IXunitTestAssembly The test assembly Properties DisplayName Gets the display name for the test collection factory. This information is shown to the end user as part of the description of the test environment. public override string DisplayName { get; } Property Value string Methods GetDefaultTestCollection(Type) Override to provide a test collection when the given test class is not decorated with any test collection attributes. protected override IXunitTestCollection GetDefaultTestCollection(Type testClass) Parameters testClass Type The test class Returns IXunitTestCollection"
  },
  "v3/2.0.0/Xunit.v3.ContextBase.html": {
    "href": "v3/2.0.0/Xunit.v3.ContextBase.html",
    "title": "Class ContextBase | xunit",
    "summary": "Class ContextBase Namespace Xunit.v3 Assembly xunit.v3.core.dll Base class for all execution pipeline context classes. public class ContextBase : IAsyncLifetime, IAsyncDisposable Inheritance object ContextBase Implements IAsyncLifetime IAsyncDisposable Derived TestCaseRunnerBaseContext<TTestCase> TestClassRunnerContext<TTestClass, TTestCase> TestCollectionRunnerContext<TTestCollection, TTestCase> TestMethodRunnerContext<TTestMethod, TTestCase> TestRunnerBaseContext<TTest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ContextBase(ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource) Base class for all execution pipeline context classes. public ContextBase(ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties Aggregator Gets the aggregator used for reporting exceptions. public ExceptionAggregator Aggregator { get; } Property Value ExceptionAggregator CancellationTokenSource Gets the cancellation token source used for cancelling test execution. public CancellationTokenSource CancellationTokenSource { get; } Property Value CancellationTokenSource ExplicitOption Gets a flag which indicates how explicit tests should be handled. public ExplicitOption ExplicitOption { get; } Property Value ExplicitOption MessageBus Gets the message bus to send execution engine messages to. public IMessageBus MessageBus { get; } Property Value IMessageBus Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask InitializeAsync() Called immediately after the class has been created, before it is used. public virtual ValueTask InitializeAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.DataAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.DataAttribute.html",
    "title": "Class DataAttribute | xunit",
    "summary": "Class DataAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Abstract attribute which represents a based implementation of IDataAttribute. Data source providers derive from this attribute and implement GetData(MethodInfo, DisposalTracker) to return the data for the theory. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public abstract class DataAttribute : Attribute, IDataAttribute Inheritance object Attribute DataAttribute Implements IDataAttribute Derived ClassDataAttribute InlineDataAttribute MemberDataAttributeBase Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Sets a value that determines whether the data rows provided by this data provider should be considered explicit or not. If true, then the data rows will all be considered explicit; if false, then the data rows will all be considered not explicit; if unset, then the data rows will inherit their explicitness from Explicit. public bool Explicit { get; set; } Property Value bool ExplicitAsNullable Gettable as a nullable value since .NET Framework does not permit attributes to have nullable value types for settable properties. protected bool? ExplicitAsNullable { get; set; } Property Value bool? Skip Gets a skip reason for all the data rows provided by this data provider. If not null, then all rows will be skipped with the given reason; if null, then the rows will inherit their skip reason from Skip. public string? Skip { get; set; } Property Value string TestDisplayName Gets the test display name for the test (replacing the default behavior, which would be to use DisplayName, or falling back to generating display names based on TestMethodDisplay and TestMethodDisplayOptions). public string? TestDisplayName { get; set; } Property Value string Timeout Sets a value to determine if the data rows provided by this data provider should include a timeout (in milliseconds). If greater than zero, the data rows will have the given timeout; if zero or less, the data rows will not have a timeout; if unset, the data rows will inherit their timeout from Timeout. public int Timeout { get; set; } Property Value int TimeoutAsNullable Gettable as a nullable value since .NET Framework does not permit attributes to have nullable value types for settable properties. protected int? TimeoutAsNullable { get; set; } Property Value int? Traits Gets a set of traits for the associated data. The data is provided as an array of string values that are alternating keys and values (e.g., [\"key1\", \"value1\", \"key2\", \"value2\"]). public string[]? Traits { get; set; } Property Value string[] Remarks This is structured as an array because attribute initializers don't support dictionaries. Note: Setting an odd number of values will throw away the unmatched key at the end of the list. If you seem to be missing your a key/value pair or have misaligned keys and values, make sure you have an even number of strings alternating between keys and values. Methods ConvertDataRow(object) Converts an item yielded by the data attribute to an ITheoryDataRow, for return from GetData(MethodInfo, DisposalTracker). Items yielded will typically be object[], ITheoryDataRow, or System.Runtime.CompilerServices.ITuple, but this override will allow derived attribute types to support additional data items. If the data item cannot be converted, this method will throw ArgumentException. protected virtual ITheoryDataRow ConvertDataRow(object dataRow) Parameters dataRow object An item yielded from the data member. Returns ITheoryDataRow An ITheoryDataRow suitable for return from GetData(MethodInfo, DisposalTracker). Exceptions ArgumentException Thrown when dataRow does not point to a valid data row (must be compatible with object[] or ITheoryDataRow). GetData(MethodInfo, DisposalTracker) Returns the data to be used to test the theory. public abstract ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(MethodInfo testMethod, DisposalTracker disposalTracker) Parameters testMethod MethodInfo The test method the data attribute is attached to disposalTracker DisposalTracker The disposal tracker used to dispose the data Returns ValueTask<IReadOnlyCollection<ITheoryDataRow>> SupportsDiscoveryEnumeration() Returns true if the data attribute supports enumeration during discovery; false otherwise. Data attributes with expensive computational costs and/or randomized data sets should return false. public abstract bool SupportsDiscoveryEnumeration() Returns bool"
  },
  "v3/2.0.0/Xunit.v3.DefaultTestCaseOrderer.html": {
    "href": "v3/2.0.0/Xunit.v3.DefaultTestCaseOrderer.html",
    "title": "Class DefaultTestCaseOrderer | xunit",
    "summary": "Class DefaultTestCaseOrderer Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCaseOrderer. Orders tests in an unpredictable but stable order, so that repeated test runs of the identical test assembly run tests in the same order. public class DefaultTestCaseOrderer : ITestCaseOrderer Inheritance object DefaultTestCaseOrderer Implements ITestCaseOrderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Instance Gets the singleton instance of DefaultTestCaseOrderer. public static DefaultTestCaseOrderer Instance { get; } Property Value DefaultTestCaseOrderer Methods OrderTestCases<TTestCase>(IReadOnlyCollection<TTestCase>) Orders test cases for execution. public IReadOnlyCollection<TTestCase> OrderTestCases<TTestCase>(IReadOnlyCollection<TTestCase> testCases) where TTestCase : notnull, ITestCase Parameters testCases IReadOnlyCollection<TTestCase> The test cases to be ordered. Returns IReadOnlyCollection<TTestCase> The test cases in the order to be run. Type Parameters TTestCase"
  },
  "v3/2.0.0/Xunit.v3.DefaultTestCollectionOrderer.html": {
    "href": "v3/2.0.0/Xunit.v3.DefaultTestCollectionOrderer.html",
    "title": "Class DefaultTestCollectionOrderer | xunit",
    "summary": "Class DefaultTestCollectionOrderer Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCollectionOrderer. Orders tests in an unpredictable and unstable order, so that repeated test runs of the identical test assembly run test collections in a random order. public class DefaultTestCollectionOrderer : ITestCollectionOrderer Inheritance object DefaultTestCollectionOrderer Implements ITestCollectionOrderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Instance Get the singleton instance of DefaultTestCollectionOrderer. public static DefaultTestCollectionOrderer Instance { get; } Property Value DefaultTestCollectionOrderer Methods OrderTestCollections<TTestCollection>(IReadOnlyCollection<TTestCollection>) Orders test collections for execution. public IReadOnlyCollection<TTestCollection> OrderTestCollections<TTestCollection>(IReadOnlyCollection<TTestCollection> testCollections) where TTestCollection : ITestCollection Parameters testCollections IReadOnlyCollection<TTestCollection> The test collections to be ordered. Returns IReadOnlyCollection<TTestCollection> The test collections in the order to be run. Type Parameters TTestCollection The type of the test collection to be ordered. Must derive from ITestCollection."
  },
  "v3/2.0.0/Xunit.v3.DelegatingMessageBus-1.html": {
    "href": "v3/2.0.0/Xunit.v3.DelegatingMessageBus-1.html",
    "title": "Class DelegatingMessageBus<TFinalMessage> | xunit",
    "summary": "Class DelegatingMessageBus<TFinalMessage> Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IMessageBus that delegates to another implementation of IMessageBus while calling into an optional callback for each message. In addition, it issues a Finished event when a message of the type TFinalMessage is seen and records the final message for later retrieval. public class DelegatingMessageBus<TFinalMessage> : DelegatingMessageBus, IMessageBus, IDisposable where TFinalMessage : IMessageSinkMessage Type Parameters TFinalMessage The type of the T final message. Inheritance object DelegatingMessageBus DelegatingMessageBus<TFinalMessage> Implements IMessageBus IDisposable Inherited Members DelegatingMessageBus.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DelegatingMessageBus(IMessageBus, Action<IMessageSinkMessage>?) Implementation of IMessageBus that delegates to another implementation of IMessageBus while calling into an optional callback for each message. In addition, it issues a Finished event when a message of the type TFinalMessage is seen and records the final message for later retrieval. public DelegatingMessageBus(IMessageBus innerMessageBus, Action<IMessageSinkMessage>? callback = null) Parameters innerMessageBus IMessageBus The message bus to delegate to. callback Action<IMessageSinkMessage> The callback to send messages to. Properties FinalMessage The final message that was seen that caused Finished to be triggered. public TFinalMessage FinalMessage { get; } Property Value TFinalMessage Finished An event that is triggered when a message of type TFinalMessage is seen. public ManualResetEvent Finished { get; } Property Value ManualResetEvent Methods QueueMessage(IMessageSinkMessage) Queues a message to be sent to the runner. public override bool QueueMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message to be sent to the runner Returns bool Returns true if discovery/execution should continue; false, otherwise. The return value may be safely ignored by components which are not directly responsible for discovery or execution, and this is intended to communicate to those sub-systems that that they should short circuit and stop their work as quickly as is reasonable."
  },
  "v3/2.0.0/Xunit.v3.DelegatingMessageBus.html": {
    "href": "v3/2.0.0/Xunit.v3.DelegatingMessageBus.html",
    "title": "Class DelegatingMessageBus | xunit",
    "summary": "Class DelegatingMessageBus Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IMessageBus that delegates to another implementation of IMessageBus while calling into an optional callback for each message. public class DelegatingMessageBus : IMessageBus, IDisposable Inheritance object DelegatingMessageBus Implements IMessageBus IDisposable Derived DelegatingMessageBus<TFinalMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DelegatingMessageBus(IMessageBus, Action<IMessageSinkMessage>?) Implementation of IMessageBus that delegates to another implementation of IMessageBus while calling into an optional callback for each message. public DelegatingMessageBus(IMessageBus innerMessageBus, Action<IMessageSinkMessage>? callback = null) Parameters innerMessageBus IMessageBus The message bus to delegate to. callback Action<IMessageSinkMessage> The callback to send messages to. Methods Dispose() public void Dispose() QueueMessage(IMessageSinkMessage) Queues a message to be sent to the runner. public virtual bool QueueMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message to be sent to the runner Returns bool Returns true if discovery/execution should continue; false, otherwise. The return value may be safely ignored by components which are not directly responsible for discovery or execution, and this is intended to communicate to those sub-systems that that they should short circuit and stop their work as quickly as is reasonable."
  },
  "v3/2.0.0/Xunit.v3.DelegatingMessageSink-1.html": {
    "href": "v3/2.0.0/Xunit.v3.DelegatingMessageSink-1.html",
    "title": "Class DelegatingMessageSink<TFinalMessage> | xunit",
    "summary": "Class DelegatingMessageSink<TFinalMessage> Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IMessageSink that delegates to another implementation of IMessageSink while calling into an optional callback for each message. In addition, it issues a Finished event when a message of the type TFinalMessage is seen and records the final message for later retrieval. public class DelegatingMessageSink<TFinalMessage> : DelegatingMessageSink, IMessageSink where TFinalMessage : IMessageSinkMessage Type Parameters TFinalMessage The type of the T final message. Inheritance object DelegatingMessageSink DelegatingMessageSink<TFinalMessage> Implements IMessageSink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DelegatingMessageSink(IMessageSink, Action<IMessageSinkMessage>?) Implementation of IMessageSink that delegates to another implementation of IMessageSink while calling into an optional callback for each message. In addition, it issues a Finished event when a message of the type TFinalMessage is seen and records the final message for later retrieval. public DelegatingMessageSink(IMessageSink innerSink, Action<IMessageSinkMessage>? callback = null) Parameters innerSink IMessageSink The inner message sink. callback Action<IMessageSinkMessage> The callback. Properties FinalMessage The final message that was seen that caused Finished to be triggered. public TFinalMessage FinalMessage { get; } Property Value TFinalMessage Finished An event that is triggered when a message of type TFinalMessage is seen. public ManualResetEvent Finished { get; } Property Value ManualResetEvent Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public override bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.v3.DelegatingMessageSink.html": {
    "href": "v3/2.0.0/Xunit.v3.DelegatingMessageSink.html",
    "title": "Class DelegatingMessageSink | xunit",
    "summary": "Class DelegatingMessageSink Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IMessageSink that delegates to another implementation of IMessageSink while calling into an optional callback for each message. public class DelegatingMessageSink : IMessageSink Inheritance object DelegatingMessageSink Implements IMessageSink Derived DelegatingMessageSink<TFinalMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DelegatingMessageSink(IMessageSink, Action<IMessageSinkMessage>?) Implementation of IMessageSink that delegates to another implementation of IMessageSink while calling into an optional callback for each message. public DelegatingMessageSink(IMessageSink innerSink, Action<IMessageSinkMessage>? callback = null) Parameters innerSink IMessageSink The inner message sink. callback Action<IMessageSinkMessage> The callback. Methods OnMessage(IMessageSinkMessage) Reports the presence of a message on the message bus. This method should never throw exceptions. public virtual bool OnMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message from the message bus Returns bool Return true to continue running tests, or false to stop."
  },
  "v3/2.0.0/Xunit.v3.DiagnosticMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.DiagnosticMessage.html",
    "title": "Class DiagnosticMessage | xunit",
    "summary": "Class DiagnosticMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IDiagnosticMessage. [JsonTypeID(\"diagnostic\")] public sealed class DiagnosticMessage : MessageSinkMessage, IDiagnosticMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage DiagnosticMessage Implements IDiagnosticMessage IMessageSinkMessage IJsonSerializable Inherited Members MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DiagnosticMessage() Creates a new instance of the DiagnosticMessage class. public DiagnosticMessage() DiagnosticMessage(string) Creates a new instance of the DiagnosticMessage class with the provided message. public DiagnosticMessage(string message) Parameters message string The diagnostic message DiagnosticMessage(string, object?) Creates a new instance of the DiagnosticMessage class with the provided message format and single argument. public DiagnosticMessage(string messageFormat, object? arg0) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. DiagnosticMessage(string, object?, object?) Creates a new instance of the DiagnosticMessage class with the provided message format and two arguments. public DiagnosticMessage(string messageFormat, object? arg0, object? arg1) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. DiagnosticMessage(string, object?, object?, object?) Creates a new instance of the DiagnosticMessage class with the provided message format and three arguments. public DiagnosticMessage(string messageFormat, object? arg0, object? arg1, object? arg2) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. arg2 object The value to replace {2} in the format string. DiagnosticMessage(string, params object?[]) Creates a new instance of the DiagnosticMessage class with the provided message format and multiple arguments. public DiagnosticMessage(string messageFormat, params object?[] args) Parameters messageFormat string The message format string args object[] An object array that contains zero or more objects to format. Properties Message Gets the diagnostic message. public required string Message { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.DiscoveryComplete.html": {
    "href": "v3/2.0.0/Xunit.v3.DiscoveryComplete.html",
    "title": "Class DiscoveryComplete | xunit",
    "summary": "Class DiscoveryComplete Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IDiscoveryComplete. [JsonTypeID(\"discovery-complete\")] public sealed class DiscoveryComplete : TestAssemblyMessage, IDiscoveryComplete, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage DiscoveryComplete Implements IDiscoveryComplete ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCasesToRun Gets a count of the number of test cases that passed the filter and will be run. public required int TestCasesToRun { get; set; } Property Value int Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.DiscoveryStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.DiscoveryStarting.html",
    "title": "Class DiscoveryStarting | xunit",
    "summary": "Class DiscoveryStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IDiscoveryStarting. [JsonTypeID(\"discovery-starting\")] public sealed class DiscoveryStarting : TestAssemblyMessage, IDiscoveryStarting, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage DiscoveryStarting Implements IDiscoveryStarting ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). public required string AssemblyName { get; set; } Property Value string AssemblyPath Gets the on-disk location of the assembly under test. public required string AssemblyPath { get; set; } Property Value string ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. public required string? ConfigFilePath { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.DisplayNameFormatter.html": {
    "href": "v3/2.0.0/Xunit.v3.DisplayNameFormatter.html",
    "title": "Class DisplayNameFormatter | xunit",
    "summary": "Class DisplayNameFormatter Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a formatter that formats the display name of a class and/or method into a more human readable form using additional options. public class DisplayNameFormatter Inheritance object DisplayNameFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors DisplayNameFormatter() Initializes a new instance of the DisplayNameFormatter class. public DisplayNameFormatter() DisplayNameFormatter(TestMethodDisplay, TestMethodDisplayOptions) Initializes a new instance of the DisplayNameFormatter class. public DisplayNameFormatter(TestMethodDisplay display, TestMethodDisplayOptions displayOptions) Parameters display TestMethodDisplay The TestMethodDisplay used by the formatter. displayOptions TestMethodDisplayOptions The TestMethodDisplayOptions used by the formatter. Methods Format(string) Formats the specified display name. public string Format(string displayName) Parameters displayName string The display name to format. Returns string The formatted display name."
  },
  "v3/2.0.0/Xunit.v3.DynamicSkipToken.html": {
    "href": "v3/2.0.0/Xunit.v3.DynamicSkipToken.html",
    "title": "Class DynamicSkipToken | xunit",
    "summary": "Class DynamicSkipToken Namespace Xunit.v3 Assembly xunit.v3.core.dll Container class for token used to dynamically skip tests. public static class DynamicSkipToken Inheritance object DynamicSkipToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Value The contract for exceptions which indicate that something should be skipped rather than failed is that exception message should start with this, and that any text following this will be treated as the skip reason (for example, \"$XunitDynamicSkip$This code can only run on Linux\") will result in a skipped test with the reason of \"This code can only run on Linux\". public const string Value = \"$XunitDynamicSkip$\" Field Value string"
  },
  "v3/2.0.0/Xunit.v3.ErrorMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.ErrorMessage.html",
    "title": "Class ErrorMessage | xunit",
    "summary": "Class ErrorMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IErrorMessage. [JsonTypeID(\"error\")] public sealed class ErrorMessage : MessageSinkMessage, IErrorMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage ErrorMessage Implements IErrorMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception) Creates a new IErrorMessage constructed from an Exception object. public static IErrorMessage FromException(Exception ex) Parameters ex Exception The exception to use Returns IErrorMessage Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.ExceptionAggregator.html": {
    "href": "v3/2.0.0/Xunit.v3.ExceptionAggregator.html",
    "title": "Struct ExceptionAggregator | xunit",
    "summary": "Struct ExceptionAggregator Namespace Xunit.v3 Assembly xunit.v3.core.dll Aggregates exceptions. Intended to run one or more code blocks, and collect the exceptions thrown by those code blocks. public struct ExceptionAggregator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ExceptionAggregator() Initializes a new instance of the ExceptionAggregator value type. public ExceptionAggregator() Properties HasExceptions Returns true if the aggregator has at least one exception inside it. public bool HasExceptions { get; } Property Value bool Methods Add(Exception) Adds an exception to the aggregator. public void Add(Exception ex) Parameters ex Exception The exception to be added. Aggregate(ExceptionAggregator) Adds exceptions from another aggregator into this aggregator. public void Aggregate(ExceptionAggregator aggregator) Parameters aggregator ExceptionAggregator The aggregator whose exceptions should be copied. Clear() Clears the aggregator. public void Clear() Clone() Clones the aggregator with a copy of the existing exceptions. public ExceptionAggregator Clone() Returns ExceptionAggregator Create() Creates an empty aggregator. public static ExceptionAggregator Create() Returns ExceptionAggregator Run(Action) Runs the code, catching the exception that is thrown and adding it to the aggregate. public void Run(Action code) Parameters code Action The code to be run. RunAsync(Func<ValueTask>) Runs the code, catching the exception that is thrown and adding it to the aggregate. public ValueTask RunAsync(Func<ValueTask> code) Parameters code Func<ValueTask> The code to be run. Returns ValueTask RunAsync<T>(Func<ValueTask<T>>, T) Runs the code, catching the exception that is thrown and adding it to the aggregate. public ValueTask<T> RunAsync<T>(Func<ValueTask<T>> code, T defaultValue) Parameters code Func<ValueTask<T>> The code to be run. defaultValue T The default value to return if the lambda throws an exception Returns ValueTask<T> Type Parameters T Run<T>(Func<T>, T) Runs the code, catching the exception that is thrown and adding it to the aggregate. public T Run<T>(Func<T> code, T defaultValue) Parameters code Func<T> The code to be run. defaultValue T The default value to return if the lambda throws an exception Returns T Type Parameters T ThrowIfFaulted() Throws an exception if the aggregator contains any exceptions. If the aggregator contains a single exception, it will be re-thrown without losing the original stack trace; if the aggregator contains more than one exception, then the original exceptions will be wrapped up into an instance of AggregateException. public void ThrowIfFaulted() ToException() Returns an exception that represents the exceptions thrown by the code passed to the Run(Action) or RunAsync methods. public Exception? ToException() Returns Exception Returns null if no exceptions were thrown; returns the exact exception if a single exception was thrown; returns AggregateException if more than one exception was thrown."
  },
  "v3/2.0.0/Xunit.v3.ExecutionErrorTestCase.html": {
    "href": "v3/2.0.0/Xunit.v3.ExecutionErrorTestCase.html",
    "title": "Class ExecutionErrorTestCase | xunit",
    "summary": "Class ExecutionErrorTestCase Namespace Xunit.v3 Assembly xunit.v3.core.dll A simple implementation of IXunitTestCase that can be used to report an error rather than running a test. public class ExecutionErrorTestCase : XunitTestCase, IXunitTestCase, ITestCase, ITestCaseMetadata, IXunitSerializable, IAsyncDisposable Inheritance object XunitTestCase ExecutionErrorTestCase Implements IXunitTestCase ITestCase ITestCaseMetadata IXunitSerializable IAsyncDisposable Inherited Members XunitTestCase.DisposalTracker XunitTestCase.Explicit XunitTestCase.SkipExceptions XunitTestCase.SkipReason XunitTestCase.SkipType XunitTestCase.SkipUnless XunitTestCase.SkipWhen XunitTestCase.SourceFilePath XunitTestCase.SourceLineNumber XunitTestCase.TestCaseDisplayName XunitTestCase.TestCollection XunitTestCase.TestClass XunitTestCase.TestClassMetadataToken XunitTestCase.TestClassName XunitTestCase.TestClassNamespace XunitTestCase.TestClassSimpleName XunitTestCase.TestMethod XunitTestCase.TestMethodArguments XunitTestCase.TestMethodMetadataToken XunitTestCase.TestMethodName XunitTestCase.TestMethodParameterTypesVSTest XunitTestCase.TestMethodReturnTypeVSTest XunitTestCase.Timeout XunitTestCase.Traits XunitTestCase.UniqueID XunitTestCase.DisposeAsync() XunitTestCase.PostInvoke() XunitTestCase.PreInvoke() XunitTestCase.ResolveTestMethodArguments(ParameterInfo[], object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors ExecutionErrorTestCase() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public ExecutionErrorTestCase() ExecutionErrorTestCase(IXunitTestMethod, string, string, string) Initializes a new instance of the ExecutionErrorTestCase class. public ExecutionErrorTestCase(IXunitTestMethod testMethod, string testCaseDisplayName, string uniqueID, string errorMessage) Parameters testMethod IXunitTestMethod The test method. testCaseDisplayName string The display name for the test case. uniqueID string The unique ID for the test case. errorMessage string The error message to report for the test. Properties ErrorMessage Gets the error message that will be displayed when the test is run. public string ErrorMessage { get; } Property Value string Methods CreateTests() Throws the expected error mesage rather than creating tests. public override ValueTask<IReadOnlyCollection<IXunitTest>> CreateTests() Returns ValueTask<IReadOnlyCollection<IXunitTest>> Deserialize(IXunitSerializationInfo) Called when the test case should populate itself with data from the serialization info. protected override void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from Serialize(IXunitSerializationInfo) Called when the test case should store its serialized values into the serialization info. protected override void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.ExecutionTimer.html": {
    "href": "v3/2.0.0/Xunit.v3.ExecutionTimer.html",
    "title": "Class ExecutionTimer | xunit",
    "summary": "Class ExecutionTimer Namespace Xunit.v3 Assembly xunit.v3.core.dll The methods on this static class can measure the time taken to execute actions (both synchronous and asynchronous). public static class ExecutionTimer Inheritance object ExecutionTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Measure(Action) Executes an action and returns the amount of time it took to execute. Note: time cannot be measured for any action that throws an exception, so this should only be called by code that is known not to throw (f.e., using ExceptionAggregator) or when the execution time for throwing code is irrelevant. public static TimeSpan Measure(Action action) Parameters action Action The action to measure. Returns TimeSpan MeasureAsync(Func<ValueTask>) Executes an asynchronous action and returns the amount of time it took to execute. Note: time cannot be measured for any action that throws an exception, so this should only be called by code that is known not to throw (f.e., using ExceptionAggregator) or when the execution time for throwing code is irrelevant. public static ValueTask<TimeSpan> MeasureAsync(Func<ValueTask> asyncAction) Parameters asyncAction Func<ValueTask> The asynchronous action to measure. Returns ValueTask<TimeSpan> MeasureAsync<T>(Func<ValueTask<T>>) Executes an asynchronous function and returns the amount of time it took to execute. Note: time cannot be measured for any action that throws an exception, so this should only be called by code that is known not to throw (f.e., using ExceptionAggregator) or when the execution time for throwing code is irrelevant. public static ValueTask<(T Result, TimeSpan Elapsed)> MeasureAsync<T>(Func<ValueTask<T>> asyncFunc) Parameters asyncFunc Func<ValueTask<T>> The asynchronous function to measure. Returns ValueTask<(T Result, TimeSpan Elapsed)> Type Parameters T Measure<T>(Func<T>) Executes a function and returns the amount of time it took to execute. Note: time cannot be measured for any action that throws an exception, so this should only be called by code that is known not to throw (f.e., using ExceptionAggregator) or when the execution time for throwing code is irrelevant. public static (T Result, TimeSpan Elapsed) Measure<T>(Func<T> func) Parameters func Func<T> The function to measure. Returns (T Result, TimeSpan Elapsed) Type Parameters T"
  },
  "v3/2.0.0/Xunit.v3.ExtensibilityPointFactory.html": {
    "href": "v3/2.0.0/Xunit.v3.ExtensibilityPointFactory.html",
    "title": "Class ExtensibilityPointFactory | xunit",
    "summary": "Class ExtensibilityPointFactory Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a factory for the types used for extensibility throughout the system. public static class ExtensibilityPointFactory Inheritance object ExtensibilityPointFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAssemblyBeforeAfterTestAttributes(Assembly) Gets the IBeforeAfterTestAttributes attached to the given test assembly. public static IReadOnlyCollection<IBeforeAfterTestAttribute> GetAssemblyBeforeAfterTestAttributes(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns IReadOnlyCollection<IBeforeAfterTestAttribute> GetAssemblyFixtureTypes(Assembly) Gets the fixture types that are attached to the test assembly via IAssemblyFixtureAttributes. public static IReadOnlyCollection<Type> GetAssemblyFixtureTypes(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns IReadOnlyCollection<Type> GetAssemblyTestCaseOrderer(Assembly) Gets the test case orderer that's attached to a test assembly. Returns null if there isn't one attached. public static ITestCaseOrderer? GetAssemblyTestCaseOrderer(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns ITestCaseOrderer GetAssemblyTestCollectionOrderer(Assembly) Gets the test collection orderer that's attached to a test assembly. Returns null if there isn't one attached. public static ITestCollectionOrderer? GetAssemblyTestCollectionOrderer(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns ITestCollectionOrderer GetAssemblyTraits(Assembly) Gets the traits that are attached to the test assembly via ITraitAttributes. public static IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetAssemblyTraits(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetClassBeforeAfterTestAttributes(Type, IReadOnlyCollection<IBeforeAfterTestAttribute>) Gets the IBeforeAfterTestAttributes attached to the given test class. public static IReadOnlyCollection<IBeforeAfterTestAttribute> GetClassBeforeAfterTestAttributes(Type testClass, IReadOnlyCollection<IBeforeAfterTestAttribute> collectionBeforeAfterAttributes) Parameters testClass Type The test class collectionBeforeAfterAttributes IReadOnlyCollection<IBeforeAfterTestAttribute> The before after attributes from the test collection, to be merged into the result. Returns IReadOnlyCollection<IBeforeAfterTestAttribute> GetClassClassFixtureTypes(Type, IReadOnlyCollection<Type>) Gets the fixture types that are attached to the test class via IClassFixture<TFixture>. public static IReadOnlyCollection<Type> GetClassClassFixtureTypes(Type testClass, IReadOnlyCollection<Type> collectionClassFixtureTypes) Parameters testClass Type The test class collectionClassFixtureTypes IReadOnlyCollection<Type> The class fixture types from the test collection, which will be merged into the result Returns IReadOnlyCollection<Type> GetClassTestCaseOrderer(Type) Gets the test case orderer that's attached to a test class. Returns null if there isn't one attached. public static ITestCaseOrderer? GetClassTestCaseOrderer(Type testClass) Parameters testClass Type The test class Returns ITestCaseOrderer GetClassTraits(Type?, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?) Gets the traits that are attached to the test class via ITraitAttributes. public static IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetClassTraits(Type? testClass, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? testCollectionTraits) Parameters testClass Type The test class testCollectionTraits IReadOnlyDictionary<string, IReadOnlyCollection<string>> The traits inherited from the test collection Returns IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetCollectionBeforeAfterTestAttributes(Type?, IReadOnlyCollection<IBeforeAfterTestAttribute>) Gets the IBeforeAfterTestAttributes attached to the given test collection. public static IReadOnlyCollection<IBeforeAfterTestAttribute> GetCollectionBeforeAfterTestAttributes(Type? collectionDefinition, IReadOnlyCollection<IBeforeAfterTestAttribute> assemblyBeforeAfterTestAttributes) Parameters collectionDefinition Type The collection definition type assemblyBeforeAfterTestAttributes IReadOnlyCollection<IBeforeAfterTestAttribute> The before after attributes from the test assembly, to be merged into the result. Returns IReadOnlyCollection<IBeforeAfterTestAttribute> GetCollectionBehavior(Assembly) Gets the ICollectionBehaviorAttribute that's attached to the test assembly, if there is one. public static ICollectionBehaviorAttribute? GetCollectionBehavior(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns ICollectionBehaviorAttribute GetCollectionClassFixtureTypes(Type?) Gets the fixture types that are attached to the test collection via IClassFixture<TFixture>. public static IReadOnlyCollection<Type> GetCollectionClassFixtureTypes(Type? collectionDefinition) Parameters collectionDefinition Type The test collection definition type Returns IReadOnlyCollection<Type> GetCollectionCollectionFixtureTypes(Type?) Gets the fixture types that are attached to the test collection via ICollectionFixture<TFixture>. public static IReadOnlyCollection<Type> GetCollectionCollectionFixtureTypes(Type? collectionDefinition) Parameters collectionDefinition Type The test collection definition type Returns IReadOnlyCollection<Type> GetCollectionDefinitions(Assembly) Gets the CollectionDefinitionAttributes that are attached to the test assembly. Verifies that there are no collection definitions with identical names. public static IReadOnlyDictionary<string, (Type Type, CollectionDefinitionAttribute Attribute)> GetCollectionDefinitions(Assembly testAssembly) Parameters testAssembly Assembly The test assembly Returns IReadOnlyDictionary<string, (Type Type, CollectionDefinitionAttribute Attribute)> GetCollectionTestCaseOrderer(Type?) Gets the test case orderer that's attached to a test collection. Returns null if there isn't one attached. public static ITestCaseOrderer? GetCollectionTestCaseOrderer(Type? collectionDefinition) Parameters collectionDefinition Type The test collection definition Returns ITestCaseOrderer GetCollectionTraits(Type?, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?) Gets the traits that are attached to the test collection via ITraitAttributes. public static IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetCollectionTraits(Type? testCollectionDefinition, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? testAssemblyTraits) Parameters testCollectionDefinition Type The test collection testAssemblyTraits IReadOnlyDictionary<string, IReadOnlyCollection<string>> The traits inherited from the test assembly Returns IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetMethodBeforeAfterTestAttributes(MethodInfo, IReadOnlyCollection<IBeforeAfterTestAttribute>) Gets the IBeforeAfterTestAttributes attached to the given method. public static IReadOnlyCollection<IBeforeAfterTestAttribute> GetMethodBeforeAfterTestAttributes(MethodInfo testMethod, IReadOnlyCollection<IBeforeAfterTestAttribute> classBeforeAfterAttributes) Parameters testMethod MethodInfo The test method classBeforeAfterAttributes IReadOnlyCollection<IBeforeAfterTestAttribute> The before after attributes from the test class, to be merged into the result. Returns IReadOnlyCollection<IBeforeAfterTestAttribute> GetMethodDataAttributes(MethodInfo) Gets the IDataAttributes attached to the given test method. public static IReadOnlyCollection<IDataAttribute> GetMethodDataAttributes(MethodInfo testMethod) Parameters testMethod MethodInfo The test method Returns IReadOnlyCollection<IDataAttribute> GetMethodFactAttributes(MethodInfo) Gets the IFactAttributes attached to the given test method. public static IReadOnlyCollection<IFactAttribute> GetMethodFactAttributes(MethodInfo testMethod) Parameters testMethod MethodInfo The test method Returns IReadOnlyCollection<IFactAttribute> GetMethodTraits(MethodInfo, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?) Gets the traits that are attached to the test method via ITraitAttributes. public static IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetMethodTraits(MethodInfo testMethod, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? testClassTraits) Parameters testMethod MethodInfo The test method testClassTraits IReadOnlyDictionary<string, IReadOnlyCollection<string>> The traits inherited from the test class Returns IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetTestFramework(Assembly) Gets the test framework object for the given test assembly. It is important that callers to this function have called SetForInitialization(IMessageSink?, bool, bool) before calling this, so that the test framework and any ancillary helper classes have access to the diagnostic and internal diagnostic message sinks. public static ITestFramework GetTestFramework(Assembly testAssembly) Parameters testAssembly Assembly The test assembly to get the test framework for Returns ITestFramework The test framework object GetXunitTestCaseDiscoverer(Type) Gets an xUnit.net v3 test discoverer. public static IXunitTestCaseDiscoverer? GetXunitTestCaseDiscoverer(Type testCaseDiscovererType) Parameters testCaseDiscovererType Type The test case discoverer type Returns IXunitTestCaseDiscoverer GetXunitTestCollectionFactory(Type?, IXunitTestAssembly) Gets an xUnit.net v3 test collection factory. public static IXunitTestCollectionFactory? GetXunitTestCollectionFactory(Type? testCollectionFactoryType, IXunitTestAssembly testAssembly) Parameters testCollectionFactoryType Type The test collection factory type testAssembly IXunitTestAssembly The test assembly under test Returns IXunitTestCollectionFactory Get<TInterface>(Type?, object?[]?) Gets an instance of the given type, casting it to TInterface, using the provided constructor arguments. public static TInterface? Get<TInterface>(Type? type, object?[]? ctorArgs = null) where TInterface : class Parameters type Type The implementation type. ctorArgs object[] The constructor arguments. Since diagnostic message sinks are optional, the code first looks for a type that takes the given arguments plus the message sink, and only falls back to the message sink-less constructor if none was found. Returns TInterface The instance of the type. Type Parameters TInterface The interface type."
  },
  "v3/2.0.0/Xunit.v3.FactDiscoverer.html": {
    "href": "v3/2.0.0/Xunit.v3.FactDiscoverer.html",
    "title": "Class FactDiscoverer | xunit",
    "summary": "Class FactDiscoverer Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IXunitTestCaseDiscoverer that supports finding test cases on methods decorated with FactAttribute. public class FactDiscoverer : IXunitTestCaseDiscoverer Inheritance object FactDiscoverer Implements IXunitTestCaseDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods CreateTestCase(ITestFrameworkDiscoveryOptions, IXunitTestMethod, IFactAttribute) Creates a single XunitTestCase for the given test method. protected virtual IXunitTestCase CreateTestCase(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod IXunitTestMethod The test method. factAttribute IFactAttribute The attribute that decorates the test method. Returns IXunitTestCase Discover(ITestFrameworkDiscoveryOptions, IXunitTestMethod, IFactAttribute) Discover test cases from a test method. By default, if the method is generic, or it contains arguments, returns a single ExecutionErrorTestCase; otherwise, it returns the result of calling CreateTestCase(ITestFrameworkDiscoveryOptions, IXunitTestMethod, IFactAttribute). public virtual ValueTask<IReadOnlyCollection<IXunitTestCase>> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod IXunitTestMethod The test method the test cases belong to. factAttribute IFactAttribute The fact attribute attached to the test method. Returns ValueTask<IReadOnlyCollection<IXunitTestCase>> Returns zero or more test cases represented by the test method."
  },
  "v3/2.0.0/Xunit.v3.FixtureMappingManager.html": {
    "href": "v3/2.0.0/Xunit.v3.FixtureMappingManager.html",
    "title": "Class FixtureMappingManager | xunit",
    "summary": "Class FixtureMappingManager Namespace Xunit.v3 Assembly xunit.v3.core.dll Maps fixture objects, including support for generic collection fixtures. public class FixtureMappingManager : IAsyncDisposable Inheritance object FixtureMappingManager Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Initializes a new instance of the FixtureMappingManager class. Constructors FixtureMappingManager(string, object[]) FOR TESTING PURPOSES ONLY. protected FixtureMappingManager(string fixtureCategory, object[] cachedFixtureValues) Parameters fixtureCategory string cachedFixtureValues object[] FixtureMappingManager(string, FixtureMappingManager?) Maps fixture objects, including support for generic collection fixtures. public FixtureMappingManager(string fixtureCategory, FixtureMappingManager? parentMappingManager = null) Parameters fixtureCategory string The category of fixture (i.e., \"Assembly\"); used in exception messages parentMappingManager FixtureMappingManager The parent mapping manager (used to resolve constructor arguments) Remarks Initializes a new instance of the FixtureMappingManager class. Properties GlobalFixtureTypes Returns a list of all known fixture types at all category levels. public IReadOnlyCollection<Type> GlobalFixtureTypes { get; } Property Value IReadOnlyCollection<Type> LocalFixtureTypes Returns a list of the known fixture types at this category level. This will not include fixture types known from parent categories and above. public IReadOnlyCollection<Type> LocalFixtureTypes { get; } Property Value IReadOnlyCollection<Type> Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask GetFixture(Type) Get a value for the given fixture type. If the fixture type is unknown, then returns null. public ValueTask<object?> GetFixture(Type fixtureType) Parameters fixtureType Type The type of the fixture Returns ValueTask<object> Returns the value if the fixture type is found, or null if it's not. InitializeAsync(IReadOnlyCollection<Type>) public ValueTask InitializeAsync(IReadOnlyCollection<Type> fixtureTypes) Parameters fixtureTypes IReadOnlyCollection<Type> Returns ValueTask InitializeAsync(params Type[]) public ValueTask InitializeAsync(params Type[] fixtureTypes) Parameters fixtureTypes Type[] Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.IAssemblyFixtureAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.IAssemblyFixtureAttribute.html",
    "title": "Interface IAssemblyFixtureAttribute | xunit",
    "summary": "Interface IAssemblyFixtureAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of the fixture data is initialized before any test in the assembly are run (including InitializeAsync() if it's implemented). After all the tests in the assembly have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the fixture type. public interface IAssemblyFixtureAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Assembly fixture attributes are only valid at the assembly level. Properties AssemblyFixtureType Gets the fixture type. Type AssemblyFixtureType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.IBeforeAfterTestAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.IBeforeAfterTestAttribute.html",
    "title": "Interface IBeforeAfterTestAttribute | xunit",
    "summary": "Interface IBeforeAfterTestAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Indicates an attribute which is involved in test method interception (allows code to be run before and after a test is run). public interface IBeforeAfterTestAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods After(MethodInfo, IXunitTest) This method is called after the test method is executed. void After(MethodInfo methodUnderTest, IXunitTest test) Parameters methodUnderTest MethodInfo The method under test test IXunitTest The current ITest Before(MethodInfo, IXunitTest) This method is called before the test method is executed. void Before(MethodInfo methodUnderTest, IXunitTest test) Parameters methodUnderTest MethodInfo The method under test test IXunitTest The current ITest"
  },
  "v3/2.0.0/Xunit.v3.ICollectionAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ICollectionAttribute.html",
    "title": "Interface ICollectionAttribute | xunit",
    "summary": "Interface ICollectionAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to declare a specific test collection for a test class. Only valid on test classes, and only a single instance of a collection attribute may be present. public interface ICollectionAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Name Gets the name of the collection. string Name { get; } Property Value string Type Gets the collection definition type. Returns null if the collection is purely based on name. Type? Type { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.ICollectionBehaviorAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ICollectionBehaviorAttribute.html",
    "title": "Interface ICollectionBehaviorAttribute | xunit",
    "summary": "Interface ICollectionBehaviorAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to declare the default test collection behavior for the assembly. This is only valid at the assembly level, and there can be only one. public interface ICollectionBehaviorAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties CollectionFactoryType Gets the collection factory type specified by this collection behavior attribute. Type? CollectionFactoryType { get; } Property Value Type DisableTestParallelization Determines whether tests in this assembly are run in parallel. bool DisableTestParallelization { get; } Property Value bool MaxParallelThreads Determines how many tests can run in parallel with each other. If set to 0, the system will use ProcessorCount. If set to a negative number, then there will be no limit to the number of threads. int MaxParallelThreads { get; } Property Value int ParallelAlgorithm Determines the parallel algorithm used when running tests in parallel. ParallelAlgorithm ParallelAlgorithm { get; } Property Value ParallelAlgorithm"
  },
  "v3/2.0.0/Xunit.v3.IDataAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.IDataAttribute.html",
    "title": "Interface IDataAttribute | xunit",
    "summary": "Interface IDataAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Base interface that all data attributes (that is, data providers for theories) are expected to implement. Data attributes are valid on methods only. public interface IDataAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a value that determines whether the data rows provided by this data provider should be considered explicit or not. If true, then the data rows will all be considered explicit; if false, then the data rows will all be considered not explicit; if null, then the data rows will inherit their explicitness from Explicit. bool? Explicit { get; } Property Value bool? Skip Gets a skip reason for all the data rows provided by this data provider. If not null, then all rows will be skipped with the given reason; if null, then the rows will inherit their skip reason from Skip. string? Skip { get; } Property Value string TestDisplayName Gets the test display name for the test (replacing the default behavior, which would be to use DisplayName, or falling back to generating display names based on TestMethodDisplay and TestMethodDisplayOptions). string? TestDisplayName { get; } Property Value string Timeout Gets a value to determine if the data rows provided by this data provider should include a timeout (in milliseconds). If greater than zero, the data rows will have the given timeout; if zero or less, the data rows will not have a timeout; if null, the data rows will inherit their timeout from Timeout. int? Timeout { get; } Property Value int? Traits Gets a set of traits for the associated data. The data is provided as an array of string values that are alternating keys and values (e.g., [\"key1\", \"value1\", \"key2\", \"value2\"]). string[]? Traits { get; } Property Value string[] Remarks This is structured as an array because attribute initializers don't support dictionaries. Note: Setting an odd number of values will throw away the unmatched key at the end of the list. If you seem to be missing your a key/value pair or have misaligned keys and values, make sure you have an even number of strings alternating between keys and values. Methods GetData(MethodInfo, DisposalTracker) Returns the data to be used to test the theory. ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(MethodInfo testMethod, DisposalTracker disposalTracker) Parameters testMethod MethodInfo The test method the data attribute is attached to disposalTracker DisposalTracker The disposal tracker used to dispose the data Returns ValueTask<IReadOnlyCollection<ITheoryDataRow>> SupportsDiscoveryEnumeration() Returns true if the data attribute supports enumeration during discovery; false otherwise. Data attributes with expensive computational costs and/or randomized data sets should return false. bool SupportsDiscoveryEnumeration() Returns bool"
  },
  "v3/2.0.0/Xunit.v3.IFactAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.IFactAttribute.html",
    "title": "Interface IFactAttribute | xunit",
    "summary": "Interface IFactAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Attribute that is applied to a method to indicate that it is a test method that should be run by the default test runner. Implementations must be decorated by XunitTestCaseDiscovererAttribute to indicate which class is responsible for converting the test method into one or more tests. public interface IFactAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks The attribute can only be applied to methods, and only one attribute is allowed. Properties DisplayName Gets the name of the test to be used when the test is skipped. When null is returned, will cause a default display name to be used. string? DisplayName { get; } Property Value string Explicit Gets a flag which indicates whether the test should only be run explicitly. An explicit test is skipped by default unless explicit tests are requested to be run. bool Explicit { get; } Property Value bool Skip Gets the skip reason for the test. When null is returned, the test is not skipped. string? Skip { get; } Property Value string Remarks Skipping is conditional based on whether SkipWhen or SkipUnless is set. SkipExceptions Gets exceptions that, when thrown, will cause the test to be skipped rather than failed. Type[]? SkipExceptions { get; } Property Value Type[] Remarks The skip reason will be the exception's message. SkipType Gets the type to retrieve SkipUnless or SkipWhen from. If not set, then the property will be retrieved from the unit test class. Type? SkipType { get; } Property Value Type SkipUnless Gets the name of a public static property on the test class which returns bool to indicate whether the test should be skipped (false) or not (true). string? SkipUnless { get; } Property Value string Remarks This property cannot be set if SkipWhen is set. Setting both will result in a failed test. To ensure compile-time safety and easier refactoring, use the nameof operator, e.g., SkipUnless = nameof(IsConditionMet). SkipWhen Gets the name of a public static property on the test class which returns bool to indicate whether the test should be skipped (true) or not (false). string? SkipWhen { get; } Property Value string Remarks This property cannot be set if SkipUnless is set. Setting both will result in a failed test. To avoid issues during refactoring, it is recommended to use the nameof operator to reference the property, e.g., SkipWhen = nameof(IsTestSkipped). Timeout Gets the timeout for test (in milliseconds). When 0 is returned, the test will not have a timeout. int Timeout { get; } Property Value int Remarks WARNING: Using this with Aggressive will result in undefined behavior. Test timing and timeouts are only reliable when using Conservative (or when parallelization is disabled completely)."
  },
  "v3/2.0.0/Xunit.v3.IMessageBus.html": {
    "href": "v3/2.0.0/Xunit.v3.IMessageBus.html",
    "title": "Interface IMessageBus | xunit",
    "summary": "Interface IMessageBus Namespace Xunit.v3 Assembly xunit.v3.core.dll Used by discovery, execution, and extensibility code to send messages to the runner. public interface IMessageBus : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods QueueMessage(IMessageSinkMessage) Queues a message to be sent to the runner. bool QueueMessage(IMessageSinkMessage message) Parameters message IMessageSinkMessage The message to be sent to the runner Returns bool Returns true if discovery/execution should continue; false, otherwise. The return value may be safely ignored by components which are not directly responsible for discovery or execution, and this is intended to communicate to those sub-systems that that they should short circuit and stop their work as quickly as is reasonable."
  },
  "v3/2.0.0/Xunit.v3.ISelfExecutingXunitTestCase.html": {
    "href": "v3/2.0.0/Xunit.v3.ISelfExecutingXunitTestCase.html",
    "title": "Interface ISelfExecutingXunitTestCase | xunit",
    "summary": "Interface ISelfExecutingXunitTestCase Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents an implementation of IXunitTestCase that is self-executing. This allows the test case to opt into the middle of the test execution pipeline without implementing everything that comes before it. public interface ISelfExecutingXunitTestCase : IXunitTestCase, ITestCase, ITestCaseMetadata Inherited Members IXunitTestCase.SkipExceptions IXunitTestCase.SkipReason IXunitTestCase.SkipType IXunitTestCase.SkipUnless IXunitTestCase.SkipWhen IXunitTestCase.TestClass IXunitTestCase.TestClassMetadataToken IXunitTestCase.TestClassName IXunitTestCase.TestClassSimpleName IXunitTestCase.TestCollection IXunitTestCase.TestMethod IXunitTestCase.TestMethodMetadataToken IXunitTestCase.TestMethodName IXunitTestCase.TestMethodParameterTypesVSTest IXunitTestCase.TestMethodReturnTypeVSTest IXunitTestCase.Timeout IXunitTestCase.CreateTests() IXunitTestCase.PostInvoke() IXunitTestCase.PreInvoke() ITestCaseMetadata.Explicit ITestCaseMetadata.SourceFilePath ITestCaseMetadata.SourceLineNumber ITestCaseMetadata.TestCaseDisplayName ITestCaseMetadata.TestClassNamespace ITestCaseMetadata.Traits ITestCaseMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Run(ExplicitOption, IMessageBus, object?[], ExceptionAggregator, CancellationTokenSource) Executes the test case, returning 0 or more result messages through the message sink. ValueTask<RunSummary> Run(ExplicitOption explicitOption, IMessageBus messageBus, object?[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters explicitOption ExplicitOption A flag to indicate how explicit tests should be treated. messageBus IMessageBus The message bus to report results to. constructorArguments object[] The arguments to pass to the constructor. aggregator ExceptionAggregator The error aggregator to use for catching exception. cancellationTokenSource CancellationTokenSource The cancellation token source that indicates whether cancellation has been requested. Returns ValueTask<RunSummary> Returns the summary of the test case run."
  },
  "v3/2.0.0/Xunit.v3.ITestCaseOrderer.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestCaseOrderer.html",
    "title": "Interface ITestCaseOrderer | xunit",
    "summary": "Interface ITestCaseOrderer Namespace Xunit.v3 Assembly xunit.v3.core.dll A class implements this interface to participate in ordering tests for the test runner. Test case orderers are applied using an implementation of ITestCaseOrdererAttribute (most commonly TestCaseOrdererAttribute), which can be applied at the assembly, test collection, and test class level. public interface ITestCaseOrderer Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OrderTestCases<TTestCase>(IReadOnlyCollection<TTestCase>) Orders test cases for execution. IReadOnlyCollection<TTestCase> OrderTestCases<TTestCase>(IReadOnlyCollection<TTestCase> testCases) where TTestCase : notnull, ITestCase Parameters testCases IReadOnlyCollection<TTestCase> The test cases to be ordered. Returns IReadOnlyCollection<TTestCase> The test cases in the order to be run. Type Parameters TTestCase"
  },
  "v3/2.0.0/Xunit.v3.ITestCaseOrdererAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestCaseOrdererAttribute.html",
    "title": "Interface ITestCaseOrdererAttribute | xunit",
    "summary": "Interface ITestCaseOrdererAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to decorate an assembly, test collection, or test class to allow the use of a custom test case orderer. Only one may exist on a given element. public interface ITestCaseOrdererAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties OrdererType Gets the orderer type. Must implement ITestCaseOrderer. Type OrdererType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.ITestCollectionOrderer.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestCollectionOrderer.html",
    "title": "Interface ITestCollectionOrderer | xunit",
    "summary": "Interface ITestCollectionOrderer Namespace Xunit.v3 Assembly xunit.v3.core.dll A class implements this interface to participate in ordering tests for the test runner. Test collection orderers are applied using the and implementation of ITestCollectionOrdererAttribute (most commonly TestCollectionOrdererAttribute), which can be applied at the assembly level. public interface ITestCollectionOrderer Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods OrderTestCollections<TTestCollection>(IReadOnlyCollection<TTestCollection>) Orders test collections for execution. IReadOnlyCollection<TTestCollection> OrderTestCollections<TTestCollection>(IReadOnlyCollection<TTestCollection> testCollections) where TTestCollection : ITestCollection Parameters testCollections IReadOnlyCollection<TTestCollection> The test collections to be ordered. Returns IReadOnlyCollection<TTestCollection> The test collections in the order to be run. Type Parameters TTestCollection The type of the test collection to be ordered. Must derive from ITestCollection."
  },
  "v3/2.0.0/Xunit.v3.ITestCollectionOrdererAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestCollectionOrdererAttribute.html",
    "title": "Interface ITestCollectionOrdererAttribute | xunit",
    "summary": "Interface ITestCollectionOrdererAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to decorate an assembly, test collection, or test class to allow the use of a custom test collection orderer. Only one may exist on a given element. public interface ITestCollectionOrdererAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties OrdererType Gets the orderer type. Must implement ITestCollectionOrderer. Type OrdererType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.ITestFramework.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestFramework.html",
    "title": "Interface ITestFramework | xunit",
    "summary": "Interface ITestFramework Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test framework. There are two pieces to test frameworks: discovery and execution. The two factory methods represent these two pieces. Test frameworks may optionally implement either IDisposable or IAsyncDisposable. They may implement a constructor which is either empty, or takes a single IMessageSink for diagnostic messages, or takes two instances of IMessageSink for diagnostic messages and internal diagnostic messages, respectively. public interface ITestFramework Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. string TestFrameworkDisplayName { get; } Property Value string Methods GetDiscoverer(Assembly) Get a test discoverer. ITestFrameworkDiscoverer GetDiscoverer(Assembly assembly) Parameters assembly Assembly The assembly to discover tests from. Returns ITestFrameworkDiscoverer The test discoverer. GetExecutor(Assembly) Get a test executor. ITestFrameworkExecutor GetExecutor(Assembly assembly) Parameters assembly Assembly The assembly to run tests from. Returns ITestFrameworkExecutor The test executor. SetTestPipelineStartup(ITestPipelineStartup) Will be invoked by the test pipeline when the user has provided a startup class. Test frameworks may choose to use this in any way they see fit. void SetTestPipelineStartup(ITestPipelineStartup pipelineStartup) Parameters pipelineStartup ITestPipelineStartup"
  },
  "v3/2.0.0/Xunit.v3.ITestFrameworkAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestFrameworkAttribute.html",
    "title": "Interface ITestFrameworkAttribute | xunit",
    "summary": "Interface ITestFrameworkAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to decorate an assembly to allow the use of a custom test framework. May only be placed at the assembly level, and only a single test framework is allowed. public interface ITestFrameworkAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties FrameworkType Gets the framework type; must implement ITestFramework. Type FrameworkType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.ITestFrameworkDiscoverer.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestFrameworkDiscoverer.html",
    "title": "Interface ITestFrameworkDiscoverer | xunit",
    "summary": "Interface ITestFrameworkDiscoverer Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents an implementation of the discovery part of a test framework. Implementations may optionally implement IDisposable and/or IAsyncDisposable for cleanup operations. public interface ITestFrameworkDiscoverer Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestAssembly Gets the test assembly provided to the discoverer. ITestAssembly TestAssembly { get; } Property Value ITestAssembly Methods Find(Func<ITestCase, ValueTask<bool>>, ITestFrameworkDiscoveryOptions, Type[]?, CancellationToken?) Finds tests inside an assembly. Calls the callback for each discovered test. ValueTask Find(Func<ITestCase, ValueTask<bool>> callback, ITestFrameworkDiscoveryOptions discoveryOptions, Type[]? types = null, CancellationToken? cancellationToken = null) Parameters callback Func<ITestCase, ValueTask<bool>> Called for each discovered test. Return true to continue test discovery; return false to cancel test discovery. discoveryOptions ITestFrameworkDiscoveryOptions The options used by the test framework during discovery. types Type[] When passed a non-null collection, only returns tests found from one of the provided types; when passed a null collection, discovers all tests in the assembly. cancellationToken CancellationToken? The optional cancellation token which can be used to cancel the test discovery process. Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.ITestFrameworkExecutor.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestFrameworkExecutor.html",
    "title": "Interface ITestFrameworkExecutor | xunit",
    "summary": "Interface ITestFrameworkExecutor Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents an implementation of the execution part of a test framework. Implementations may optionally implement IDisposable and/or IAsyncDisposable for cleanup operations. public interface ITestFrameworkExecutor Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods RunTestCases(IReadOnlyCollection<ITestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken?) Runs selected test cases in the assembly. ValueTask RunTestCases(IReadOnlyCollection<ITestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken? cancellationToken = null) Parameters testCases IReadOnlyCollection<ITestCase> The test cases to run. executionMessageSink IMessageSink The message sink to report results back to. executionOptions ITestFrameworkExecutionOptions The options to be used during test execution. cancellationToken CancellationToken? The optional cancellation token which can be used to cancel the test execution process. Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.ITestPipelineStartup.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestPipelineStartup.html",
    "title": "Interface ITestPipelineStartup | xunit",
    "summary": "Interface ITestPipelineStartup Namespace Xunit.v3 Assembly xunit.v3.core.dll Interface implemented by developers who want to run code during test pipeline startup and shutdown. A single instance of this may be decorated with an instance of ITestPipelineStartupAttribute (typically TestPipelineStartupAttribute) at the assembly level. public interface ITestPipelineStartup Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Unlike assembly-level fixtures, this code runs for both discovery and execution (whereas fixtures only run during execution), and it occurs at a much earlier point in the pipeline. The intention with this hook is primarily about ensuring that some essential infrastructure is in place before test discovery takes place. Activities which are only used during execution should be done with assembly-level fixtures. Methods StartAsync(IMessageSink) Indicates that the test assembly is starting up. ValueTask StartAsync(IMessageSink diagnosticMessageSink) Parameters diagnosticMessageSink IMessageSink A message sink to which it can report IDiagnosticMessage instances. Returns ValueTask StopAsync() Inidicates that the test assembly is shutting down. ValueTask StopAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.ITestPipelineStartupAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestPipelineStartupAttribute.html",
    "title": "Interface ITestPipelineStartupAttribute | xunit",
    "summary": "Interface ITestPipelineStartupAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code that runs during the test pipeline startup and shutdown (including both discovery and execution). public interface ITestPipelineStartupAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Test pipeline startup attributes are only valid at the assembly level, and only a single instance is allowed. Properties TestPipelineStartupType Gets the test pipeline startup type. Must implement ITestPipelineStartup. Type TestPipelineStartupType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.ITestProcess.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestProcess.html",
    "title": "Interface ITestProcess | xunit",
    "summary": "Interface ITestProcess Namespace Xunit.v3 Assembly xunit.v3.runner.utility.netfx.dll Represents a v3 test process that has been launched. When the process is disposed, it should be allowed to cleaned up and exit within an appropriate amount of time, and then killed if it will not stop cleanly. public interface ITestProcess : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties HasExited Gets a flag to indicate whether the test process has exited or not yet. bool HasExited { get; } Property Value bool StandardInput Gets a TextWriter that can be used to write text from the standard input of the test process. TextWriter StandardInput { get; } Property Value TextWriter StandardOutput Gets a TextReader that can be used to read text from the standard output of the test process. TextReader StandardOutput { get; } Property Value TextReader Methods Cancel(bool) Cancels the test pipeline, forcefully if necessary. void Cancel(bool forceCancellation) Parameters forceCancellation bool When set to false, this should request graceful termination of the test pipeline; when set to true, the test process should be forcefully shut down as quickly as possible. Remarks Note that repeated calls to this method with forceCancellation set to false may be possible, since it may be dispatched every time a remote runner returns false from a message sink/message bus call. For out of process runners using Ctrl+C via standard input, it should only send Ctrl+C the first time this is called (since double Ctrl+C is the forceful cancellation signal). WaitForExit(int) Wait for the specified number of milliseconds for the test process to exit. bool WaitForExit(int milliseconds) Parameters milliseconds int The amount of time, in milliseconds, to wait Returns bool Returns true if the process exited; false, otherwise"
  },
  "v3/2.0.0/Xunit.v3.ITestProcessLauncher.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestProcessLauncher.html",
    "title": "Interface ITestProcessLauncher | xunit",
    "summary": "Interface ITestProcessLauncher Namespace Xunit.v3 Assembly xunit.v3.runner.utility.netfx.dll Implement this to control the launch of an xUnit.net v3 test process. public interface ITestProcessLauncher Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Launch(XunitProjectAssembly, IReadOnlyList<string>) Launches the test process. Returns null if the process could not be launched. ITestProcess? Launch(XunitProjectAssembly projectAssembly, IReadOnlyList<string> arguments) Parameters projectAssembly XunitProjectAssembly The test project assembly arguments IReadOnlyList<string> The list of arguments to be passed to the in-process runner Returns ITestProcess"
  },
  "v3/2.0.0/Xunit.v3.ITestTimeoutException.html": {
    "href": "v3/2.0.0/Xunit.v3.ITestTimeoutException.html",
    "title": "Interface ITestTimeoutException | xunit",
    "summary": "Interface ITestTimeoutException Namespace Xunit.v3 Assembly xunit.v3.core.dll This is a marker interface implemented to indicate that the exception is the result of a test timeout, resulting in a failure cause of Timeout. public interface ITestTimeoutException Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.ITheoryAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ITheoryAttribute.html",
    "title": "Interface ITheoryAttribute | xunit",
    "summary": "Interface ITheoryAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Marks a test method as being a data theory. Data theories are tests which are fed various bits of data from a data source, mapping to parameters on the test method. If the data source contains multiple rows, then the test method is executed multiple times (once with each data row). Data is provided by attributes which implement IDataAttribute (most commonly, InlineDataAttribute and MemberDataAttribute). Implementations must be decorated by XunitTestCaseDiscovererAttribute to indicate which class is responsible for converting the test method into one or more tests. public interface ITheoryAttribute : IFactAttribute Inherited Members IFactAttribute.DisplayName IFactAttribute.Explicit IFactAttribute.Skip IFactAttribute.SkipExceptions IFactAttribute.SkipType IFactAttribute.SkipUnless IFactAttribute.SkipWhen IFactAttribute.Timeout Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks The attribute can only be applied to methods, and only one attribute is allowed. Properties DisableDiscoveryEnumeration Gets a flag which indicates whether the test method wants to skip enumerating data during discovery. This will cause the theory to yield a single test case for all data, and the data discovery will be performed during test execution instead of discovery. bool DisableDiscoveryEnumeration { get; } Property Value bool SkipTestWithoutData Gets a flag which indicates whether the test should be skipped (rather than failed) for a lack of data. bool SkipTestWithoutData { get; } Property Value bool"
  },
  "v3/2.0.0/Xunit.v3.ITraitAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.ITraitAttribute.html",
    "title": "Interface ITraitAttribute | xunit",
    "summary": "Interface ITraitAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Base interface that all traits attributes (that is, anything with provides traits to a test). Trait attributes are valid on assemblies, classes, and methods. public interface ITraitAttribute Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods GetTraits() Gets the trait values from the trait attribute. IReadOnlyCollection<KeyValuePair<string, string>> GetTraits() Returns IReadOnlyCollection<KeyValuePair<string, string>> The trait values."
  },
  "v3/2.0.0/Xunit.v3.IXunitDelayEnumeratedTestCase.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitDelayEnumeratedTestCase.html",
    "title": "Interface IXunitDelayEnumeratedTestCase | xunit",
    "summary": "Interface IXunitDelayEnumeratedTestCase Namespace Xunit.v3 Assembly xunit.v3.core.dll Indicates a test case which delays enumeration of tests until execution time. public interface IXunitDelayEnumeratedTestCase : IXunitTestCase, ITestCase, ITestCaseMetadata Inherited Members IXunitTestCase.SkipExceptions IXunitTestCase.SkipReason IXunitTestCase.SkipType IXunitTestCase.SkipUnless IXunitTestCase.SkipWhen IXunitTestCase.TestClass IXunitTestCase.TestClassMetadataToken IXunitTestCase.TestClassName IXunitTestCase.TestClassSimpleName IXunitTestCase.TestCollection IXunitTestCase.TestMethod IXunitTestCase.TestMethodMetadataToken IXunitTestCase.TestMethodName IXunitTestCase.TestMethodParameterTypesVSTest IXunitTestCase.TestMethodReturnTypeVSTest IXunitTestCase.Timeout IXunitTestCase.CreateTests() IXunitTestCase.PostInvoke() IXunitTestCase.PreInvoke() ITestCaseMetadata.Explicit ITestCaseMetadata.SourceFilePath ITestCaseMetadata.SourceLineNumber ITestCaseMetadata.TestCaseDisplayName ITestCaseMetadata.TestClassNamespace ITestCaseMetadata.Traits ITestCaseMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks This is normally used when theory data enumeration is performed at execution time, either because theory data pre-enumeration was disabled, or data found during discovery was not serializable. Properties SkipTestWithoutData Get a flag to indicate whether test cases with no data should be skipped (instead of failed, which is the default behavior). bool SkipTestWithoutData { get; } Property Value bool"
  },
  "v3/2.0.0/Xunit.v3.IXunitTest.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTest.html",
    "title": "Interface IXunitTest | xunit",
    "summary": "Interface IXunitTest Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test from xUnit.net v3 based on reflection. public interface IXunitTest : ITest, ITestMetadata Inherited Members ITestMetadata.TestDisplayName ITestMetadata.Traits ITestMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag indicating whether this test was marked as explicit or not. bool Explicit { get; } Property Value bool SkipReason Gets a skip reason for this test. string? SkipReason { get; } Property Value string Remarks This value may not line up the with SkipReason, as you can skip individual data rows during delay enumeration. TestCase Gets the test case this test belongs to. IXunitTestCase TestCase { get; } Property Value IXunitTestCase TestMethod Gets the test method to run. May different from the test method embedded in the test case. IXunitTestMethod TestMethod { get; } Property Value IXunitTestMethod TestMethodArguments Gets the arguments to be passed to the test method during invocation. object?[] TestMethodArguments { get; } Property Value object[] Timeout Gets the timeout for the test, in milliseconds; if 0, there is no timeout. int Timeout { get; } Property Value int Remarks WARNING: Using this with Aggressive will result in undefined behavior. Timeout is only supported by Conservative (or when parallelization is disabled completely)."
  },
  "v3/2.0.0/Xunit.v3.IXunitTestAssembly.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestAssembly.html",
    "title": "Interface IXunitTestAssembly | xunit",
    "summary": "Interface IXunitTestAssembly Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test assembly from xUnit.net v3 based on reflection. public interface IXunitTestAssembly : ITestAssembly, IAssemblyMetadata Inherited Members ITestAssembly.ModuleVersionID IAssemblyMetadata.AssemblyName IAssemblyMetadata.AssemblyPath IAssemblyMetadata.ConfigFilePath IAssemblyMetadata.Traits IAssemblyMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Assembly Gets the assembly of this test assembly. Assembly Assembly { get; } Property Value Assembly Remarks This should only be used to execute a test assembly. All reflection should be abstracted here instead for better testability. AssemblyFixtureTypes Gets a list of fixture types associated with the test assembly. IReadOnlyCollection<Type> AssemblyFixtureTypes { get; } Property Value IReadOnlyCollection<Type> BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test assembly. IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> CollectionBehavior Gets the collection behavior associated with the assembly, if present. ICollectionBehaviorAttribute? CollectionBehavior { get; } Property Value ICollectionBehaviorAttribute CollectionDefinitions Gets the collection definitions attached to the test assembly, by collection name. IReadOnlyDictionary<string, (Type Type, CollectionDefinitionAttribute Attribute)> CollectionDefinitions { get; } Property Value IReadOnlyDictionary<string, (Type Type, CollectionDefinitionAttribute Attribute)> TargetFramework Gets the target framework the test assembly was compiled against. Will be in a form like \".NETFramework,Version=v4.7.2\" or \".NETCoreApp,Version=v6.0\". string TargetFramework { get; } Property Value string TestCaseOrderer Gets the test case orderer for the test assembly, if present. ITestCaseOrderer? TestCaseOrderer { get; } Property Value ITestCaseOrderer TestCollectionOrderer Gets the test collection orderer for the test assembly, if present. ITestCollectionOrderer? TestCollectionOrderer { get; } Property Value ITestCollectionOrderer Version Gets the assembly version. Version Version { get; } Property Value Version"
  },
  "v3/2.0.0/Xunit.v3.IXunitTestCase.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestCase.html",
    "title": "Interface IXunitTestCase | xunit",
    "summary": "Interface IXunitTestCase Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a single test case from xUnit.net v3 based on reflection. public interface IXunitTestCase : ITestCase, ITestCaseMetadata Inherited Members ITestCaseMetadata.Explicit ITestCaseMetadata.SourceFilePath ITestCaseMetadata.SourceLineNumber ITestCaseMetadata.TestCaseDisplayName ITestCaseMetadata.TestClassNamespace ITestCaseMetadata.Traits ITestCaseMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties SkipExceptions Gets the exception types that, when thrown, will cause a Type[]? SkipExceptions { get; } Property Value Type[] SkipReason Gets the display text for the reason a test that might being skipped. string? SkipReason { get; } Property Value string Remarks This differs from the contract of SkipReason by virtue of the fact that when this value is non-null, it may indicate that a test is statically skipped (if both SkipUnless and SkipWhen are null) or dynamically skipped (if one is non-null). SkipType When set, indicates the type to use when resolving SkipUnless or SkipWhen. If not set, uses the test class type. Type? SkipType { get; } Property Value Type SkipUnless When set, indicates a public static property that is used at runtime to determine whether the test is skipped or not (true to run, false to skip). string? SkipUnless { get; } Property Value string Remarks Note: It is an error condition for both SkipUnless and SkipWhen to return a non-null value. SkipWhen When set, indicates a public static property that is used at runtime to determine whether the test is skipped or not (false to run, true to skip). string? SkipWhen { get; } Property Value string Remarks Note: It is an error condition for both SkipUnless and SkipWhen to return a non-null value. TestClass Gets the test class that this test case belongs to. IXunitTestClass TestClass { get; } Property Value IXunitTestClass TestClassMetadataToken Gets the MetadataToken for the test class. int TestClassMetadataToken { get; } Property Value int TestClassName Gets the full name of the class where the test is defined (i.e. FullName). string TestClassName { get; } Property Value string TestClassSimpleName Gets the simple name of the class where the test is defined (i.e. Name). string TestClassSimpleName { get; } Property Value string TestCollection Gets the test collection this test case belongs to. IXunitTestCollection TestCollection { get; } Property Value IXunitTestCollection TestMethod Gets the test method this test case belongs to. IXunitTestMethod TestMethod { get; } Property Value IXunitTestMethod TestMethodMetadataToken Gets the MetadataToken for the test method. int TestMethodMetadataToken { get; } Property Value int TestMethodName Gets the method name where the test is defined. string TestMethodName { get; } Property Value string TestMethodParameterTypesVSTest Gets the types for the test method parameters. string[] TestMethodParameterTypesVSTest { get; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. string TestMethodReturnTypeVSTest { get; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Timeout Gets the timeout of the test, in milliseconds; if zero or negative, means the test case has no timeout. int Timeout { get; } Property Value int Methods CreateTests() Creates the tests that are emitted from this test case. Exceptions thrown here will be caught and converted into a test case failure. ValueTask<IReadOnlyCollection<IXunitTest>> CreateTests() Returns ValueTask<IReadOnlyCollection<IXunitTest>> PostInvoke() Allows the test case to run some code just after the test case is finished running. void PostInvoke() PreInvoke() Allows the test case to run some code just before the test case is run. void PreInvoke()"
  },
  "v3/2.0.0/Xunit.v3.IXunitTestCaseDiscoverer.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestCaseDiscoverer.html",
    "title": "Interface IXunitTestCaseDiscoverer | xunit",
    "summary": "Interface IXunitTestCaseDiscoverer Namespace Xunit.v3 Assembly xunit.v3.core.dll Interface to be implemented by classes which are used to discover tests cases attached to test methods that are attributed with an implementation of IFactAttribute. public interface IXunitTestCaseDiscoverer Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods Discover(ITestFrameworkDiscoveryOptions, IXunitTestMethod, IFactAttribute) Discover test cases from a test method. ValueTask<IReadOnlyCollection<IXunitTestCase>> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod IXunitTestMethod The test method the test cases belong to. factAttribute IFactAttribute The fact attribute attached to the test method. Returns ValueTask<IReadOnlyCollection<IXunitTestCase>> Returns zero or more test cases represented by the test method."
  },
  "v3/2.0.0/Xunit.v3.IXunitTestClass.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestClass.html",
    "title": "Interface IXunitTestClass | xunit",
    "summary": "Interface IXunitTestClass Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test class from xUnit.net v3 based on reflection. public interface IXunitTestClass : ITestClass, ITestClassMetadata Inherited Members ITestClassMetadata.TestClassName ITestClassMetadata.TestClassNamespace ITestClassMetadata.TestClassSimpleName ITestClassMetadata.Traits ITestClassMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test class (and the test collection and test assembly). IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> Class Gets the type that this test class refers to. Type Class { get; } Property Value Type Remarks This should only be used to execute a test class. All reflection should be abstracted here instead for better testability. ClassFixtureTypes Gets a list of class fixture types associated with the test class (and the test collection). IReadOnlyCollection<Type> ClassFixtureTypes { get; } Property Value IReadOnlyCollection<Type> Constructors Gets the public constructors on the test class. If the test class is static, will return null. IReadOnlyCollection<ConstructorInfo>? Constructors { get; } Property Value IReadOnlyCollection<ConstructorInfo> Methods Gets the public methods on the test class. IReadOnlyCollection<MethodInfo> Methods { get; } Property Value IReadOnlyCollection<MethodInfo> TestCaseOrderer Gets the test case orderer for the test class, if present. ITestCaseOrderer? TestCaseOrderer { get; } Property Value ITestCaseOrderer TestCollection Gets the test collection this test class belongs to. IXunitTestCollection TestCollection { get; } Property Value IXunitTestCollection"
  },
  "v3/2.0.0/Xunit.v3.IXunitTestCollection.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestCollection.html",
    "title": "Interface IXunitTestCollection | xunit",
    "summary": "Interface IXunitTestCollection Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test collection from xUnit.net v3 based on reflection. public interface IXunitTestCollection : ITestCollection, ITestCollectionMetadata Inherited Members ITestCollectionMetadata.TestCollectionClassName ITestCollectionMetadata.TestCollectionDisplayName ITestCollectionMetadata.Traits ITestCollectionMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Test collections form the basis of the parallelization in xUnit.net v3. Test cases which are in the same test collection will not be run in parallel against sibling tests, but will run in parallel against tests in other collections. They also provide a level of shared context via ICollectionFixture<TFixture>. Properties BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test collection (and the test assembly). IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> ClassFixtureTypes Gets a list of collection fixture types associated with the test collection. IReadOnlyCollection<Type> ClassFixtureTypes { get; } Property Value IReadOnlyCollection<Type> CollectionDefinition Gets the type that this collection definition derived from, if it derives from one. Untyped collections are possible when test classes are decorated using CollectionAttribute(string) and there is no test collection class declared with the same name. Type? CollectionDefinition { get; } Property Value Type Remarks This should only be used to execute a test collection. All reflection should be abstracted here instead for better testability. CollectionFixtureTypes Gets a list of collection fixture types associated with the test collection. IReadOnlyCollection<Type> CollectionFixtureTypes { get; } Property Value IReadOnlyCollection<Type> DisableParallelization Determines whether tests in this collection runs in parallel with any other collections. bool DisableParallelization { get; } Property Value bool TestAssembly Gets the test assembly this test collection belongs to. IXunitTestAssembly TestAssembly { get; } Property Value IXunitTestAssembly TestCaseOrderer Gets the test case orderer for the test collection, if present. ITestCaseOrderer? TestCaseOrderer { get; } Property Value ITestCaseOrderer"
  },
  "v3/2.0.0/Xunit.v3.IXunitTestCollectionFactory.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestCollectionFactory.html",
    "title": "Interface IXunitTestCollectionFactory | xunit",
    "summary": "Interface IXunitTestCollectionFactory Namespace Xunit.v3 Assembly xunit.v3.core.dll This interface is intended to be implemented by components which generate test collections. End users specify the desired test collection factory by applying CollectionBehaviorAttribute (or any attribute that implements ICollectionBehaviorAttribute) at the assembly level. Classes which implement this interface must have a constructor that takes IXunitTestAssembly. public interface IXunitTestCollectionFactory Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties DisplayName Gets the display name for the test collection factory. This information is shown to the end user as part of the description of the test environment. string DisplayName { get; } Property Value string Methods Get(Type) Gets the test collection for a given test class. IXunitTestCollection Get(Type testClass) Parameters testClass Type The test class. Returns IXunitTestCollection The test collection."
  },
  "v3/2.0.0/Xunit.v3.IXunitTestMethod.html": {
    "href": "v3/2.0.0/Xunit.v3.IXunitTestMethod.html",
    "title": "Interface IXunitTestMethod | xunit",
    "summary": "Interface IXunitTestMethod Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test class from xUnit.net v3 based on reflection. public interface IXunitTestMethod : ITestMethod, ITestMethodMetadata Inherited Members ITestMethodMetadata.MethodName ITestMethodMetadata.Traits ITestMethodMetadata.UniqueID Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test method (and the test class, test collection, and test assembly). IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> DataAttributes Gets the IDataAttributes attached to the test method. IReadOnlyCollection<IDataAttribute> DataAttributes { get; } Property Value IReadOnlyCollection<IDataAttribute> FactAttributes Gets the IFactAttributes attached to the test method. IReadOnlyCollection<IFactAttribute> FactAttributes { get; } Property Value IReadOnlyCollection<IFactAttribute> IsGenericMethodDefinition Gets a flag which indicates whether this is a generic method definition. bool IsGenericMethodDefinition { get; } Property Value bool Method Gets the method that this test method refers to. MethodInfo Method { get; } Property Value MethodInfo Remarks This should only be used to execute a test method. All reflection should be abstracted here instead for better testability. Parameters Gets the parameters of the test method. IReadOnlyCollection<ParameterInfo> Parameters { get; } Property Value IReadOnlyCollection<ParameterInfo> ReturnType Gets the return type of the test method. Type ReturnType { get; } Property Value Type TestClass Gets the test class that this test method belongs to. IXunitTestClass TestClass { get; } Property Value IXunitTestClass TestMethodArguments Gets the arguments that will be passed to the test method. object?[] TestMethodArguments { get; } Property Value object[] Methods GetDisplayName(string, object?[]?, Type[]?) Gets the display name for the test method, factoring in arguments and generic types. string GetDisplayName(string baseDisplayName, object?[]? testMethodArguments, Type[]? methodGenericTypes) Parameters baseDisplayName string The base display name. testMethodArguments object[] The test method arguments. methodGenericTypes Type[] The generic types of the method. Returns string MakeGenericMethod(Type[]) Creates a generic version of the test method with the given generic types. MethodInfo MakeGenericMethod(Type[] genericTypes) Parameters genericTypes Type[] The generic types Returns MethodInfo ResolveGenericTypes(object?[]) Resolves the generic types for the test method given the method's arguments. If the method is not generic, will return null. Type[]? ResolveGenericTypes(object?[] arguments) Parameters arguments object[] The method arguments Returns Type[] ResolveMethodArguments(object?[]) Resolves argument values for the test method, ensuring they are the correct type, including support for optional method arguments. object?[] ResolveMethodArguments(object?[] arguments) Parameters arguments object[] The test method arguments Returns object[]"
  },
  "v3/2.0.0/Xunit.v3.InProcessFrontController.html": {
    "href": "v3/2.0.0/Xunit.v3.InProcessFrontController.html",
    "title": "Class InProcessFrontController | xunit",
    "summary": "Class InProcessFrontController Namespace Xunit.v3 Assembly xunit.v3.core.dll This class is a \"philosophical\" implementation of IFrontController (which isn't a type that's available here), intended to be used by in-process runners, wrapped around an implementation of ITestFramework. The signatures of the methods are slightly different, as they permit and require direct access to ITestCase instances rather than forcing the test cases through a round of serialization and deserialization. It will also manufacture the IDiscoveryStarting and IDiscoveryComplete messages that the test framework is not responsible for. When connected to remote meta-runners, the in-process runner can convert ITestCase instances into TestCaseDiscovered instances by using a converter like Xunit.Runner.Common.TestCaseExtensions.ToTestCaseDiscovered (which should be called from a callback passed to Find(IMessageSink?, ITestFrameworkDiscoveryOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?, Func<ITestCase, bool, ValueTask<bool>>?)). public class InProcessFrontController Inheritance object InProcessFrontController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors InProcessFrontController(ITestFramework, Assembly, string?) Initializes a new instance of the InProcessFrontController class. public InProcessFrontController(ITestFramework testFramework, Assembly testAssembly, string? configFilePath) Parameters testFramework ITestFramework The test framework to be wrapped. testAssembly Assembly The assembly under test. configFilePath string The optional configuration file path. Properties TestAssemblyUniqueID Gets the unique ID for the test assembly provided to the discoverer. public string TestAssemblyUniqueID { get; } Property Value string TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public string TestFrameworkDisplayName { get; } Property Value string Methods Find(IMessageSink?, ITestFrameworkDiscoveryOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?, Func<ITestCase, bool, ValueTask<bool>>?) Starts the process of finding tests in an assembly. Typically only used by runners which discover tests and present them into a UI for the user to interactively choose for selective run (via Run(IMessageSink, ITestFrameworkExecutionOptions, IReadOnlyCollection<ITestCase>, CancellationTokenSource)). For runners which simply wish to discover and immediately run tests, they should instead use FindAndRun(IMessageSink, ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?), which permits the same filtering logic as this method. public ValueTask Find(IMessageSink? messageSink, ITestFrameworkDiscoveryOptions options, Func<ITestCase, bool> filter, CancellationTokenSource cancellationTokenSource, Type[]? types = null, Func<ITestCase, bool, ValueTask<bool>>? discoveryCallback = null) Parameters messageSink IMessageSink The message sink to report discovery starting and discovery complete messages to. Discovered tests are not reported to this message sink, since it's also used for FindAndRun(IMessageSink, ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?), so it is assumed that callers to this method will use the discoveryCallback to report discovered tests if needed. options ITestFrameworkDiscoveryOptions The options to be used for discovery. filter Func<ITestCase, bool> The filter function for filtering test cases. cancellationTokenSource CancellationTokenSource The cancellation token source used to cancel discovery. types Type[] When passed a non-null collection, only returns tests found from one of the provided types; when passed a null collection, discovers all tests in the assembly. discoveryCallback Func<ITestCase, bool, ValueTask<bool>> An optional callback to be called for each discovered test case. It provides both the test case and a flag which indicates if it passed the provided filter. Returns ValueTask FindAndRun(IMessageSink, ITestFrameworkDiscoveryOptions, ITestFrameworkExecutionOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?) Starts the process of finding and running tests in an assembly. Typically only used by runner which do not present test discovery UIs to users that allow them to run selected tests (those should instead use Find(IMessageSink?, ITestFrameworkDiscoveryOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?, Func<ITestCase, bool, ValueTask<bool>>?) and Run(IMessageSink, ITestFrameworkExecutionOptions, IReadOnlyCollection<ITestCase>, CancellationTokenSource) as separate operations). public ValueTask FindAndRun(IMessageSink messageSink, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, Func<ITestCase, bool> filter, CancellationTokenSource cancellationTokenSource, Type[]? types = null) Parameters messageSink IMessageSink The message sink to report messages to. discoveryOptions ITestFrameworkDiscoveryOptions The options to be used for discovery. executionOptions ITestFrameworkExecutionOptions The options to be used for execution. filter Func<ITestCase, bool> The filter function for filtering test cases. cancellationTokenSource CancellationTokenSource The cancellation token sourced used to cancel discovery/execution. types Type[] When passed a non-null collection, discovery/filtering/execution only looks for tests from one of the provided types; when passed a null collection, discovery/filtering/execution looks at all types in the assembly. Returns ValueTask Run(IMessageSink, ITestFrameworkExecutionOptions, IReadOnlyCollection<ITestCase>, CancellationTokenSource) Starts the process of running selected tests in the assembly. The test cases to run come from calling Find(IMessageSink?, ITestFrameworkDiscoveryOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?, Func<ITestCase, bool, ValueTask<bool>>?) and collecting the test cases that were returned via the callback. public ValueTask Run(IMessageSink messageSink, ITestFrameworkExecutionOptions executionOptions, IReadOnlyCollection<ITestCase> testCases, CancellationTokenSource cancellationTokenSource) Parameters messageSink IMessageSink The message sink to report messages to. executionOptions ITestFrameworkExecutionOptions The options to be used for execution. testCases IReadOnlyCollection<ITestCase> The test cases to execute. cancellationTokenSource CancellationTokenSource The cancellation token source used to cancel discovery. Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.InProcessTestProcessLauncher.html": {
    "href": "v3/2.0.0/Xunit.v3.InProcessTestProcessLauncher.html",
    "title": "Class InProcessTestProcessLauncher | xunit",
    "summary": "Class InProcessTestProcessLauncher Namespace Xunit.v3 Assembly xunit.v3.runner.utility.netfx.dll Implementation of ITestProcessLauncher that will launch an xUnit.net v3 test in-process. public sealed class InProcessTestProcessLauncher : ITestProcessLauncher Inheritance object InProcessTestProcessLauncher Implements ITestProcessLauncher Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Note that this will require the runner author to implement dependency resolution, as no attempt to do so is done here. Properties Instance Gets the singleton instance of InProcessTestProcessLauncher. public static InProcessTestProcessLauncher Instance { get; } Property Value InProcessTestProcessLauncher Methods Launch(XunitProjectAssembly, IReadOnlyList<string>) Launches the test process. Returns null if the process could not be launched. public ITestProcess? Launch(XunitProjectAssembly projectAssembly, IReadOnlyList<string> arguments) Parameters projectAssembly XunitProjectAssembly The test project assembly arguments IReadOnlyList<string> The list of arguments to be passed to the in-process runner Returns ITestProcess"
  },
  "v3/2.0.0/Xunit.v3.InternalDiagnosticMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.InternalDiagnosticMessage.html",
    "title": "Class InternalDiagnosticMessage | xunit",
    "summary": "Class InternalDiagnosticMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IInternalDiagnosticMessage. [JsonTypeID(\"internal-diagnostic\")] public sealed class InternalDiagnosticMessage : MessageSinkMessage, IInternalDiagnosticMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage InternalDiagnosticMessage Implements IInternalDiagnosticMessage IMessageSinkMessage IJsonSerializable Inherited Members MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors InternalDiagnosticMessage() Creates a new instance of the InternalDiagnosticMessage class. public InternalDiagnosticMessage() InternalDiagnosticMessage(string) Creates a new instance of the InternalDiagnosticMessage class with the provided message. public InternalDiagnosticMessage(string message) Parameters message string The diagnostic message InternalDiagnosticMessage(string, object?) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and single argument. public InternalDiagnosticMessage(string messageFormat, object? arg0) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. InternalDiagnosticMessage(string, object?, object?) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and two arguments. public InternalDiagnosticMessage(string messageFormat, object? arg0, object? arg1) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. InternalDiagnosticMessage(string, object?, object?, object?) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and three arguments. public InternalDiagnosticMessage(string messageFormat, object? arg0, object? arg1, object? arg2) Parameters messageFormat string The message format string arg0 object The value to replace {0} in the format string. arg1 object The value to replace {1} in the format string. arg2 object The value to replace {2} in the format string. InternalDiagnosticMessage(string, params object?[]) Creates a new instance of the InternalDiagnosticMessage class with the provided message format and multiple arguments. public InternalDiagnosticMessage(string messageFormat, params object?[] args) Parameters messageFormat string The message format string args object[] An object array that contains zero or more objects to format. Properties Message Gets the internal diagnostic message. public required string Message { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.LocalOutOfProcessTestProcessLauncher.html": {
    "href": "v3/2.0.0/Xunit.v3.LocalOutOfProcessTestProcessLauncher.html",
    "title": "Class LocalOutOfProcessTestProcessLauncher | xunit",
    "summary": "Class LocalOutOfProcessTestProcessLauncher Namespace Xunit.v3 Assembly xunit.v3.runner.utility.netfx.dll Implementation of ITestProcessLauncher that will launch an xUnit.net v3 test project out-of-process on the local machine. public sealed class LocalOutOfProcessTestProcessLauncher : OutOfProcessTestProcessLauncherBase, ITestProcessLauncher Inheritance object OutOfProcessTestProcessLauncherBase LocalOutOfProcessTestProcessLauncher Implements ITestProcessLauncher Inherited Members OutOfProcessTestProcessLauncherBase.IsWindows OutOfProcessTestProcessLauncherBase.Launch(XunitProjectAssembly, IReadOnlyList<string>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Instance Gets the singleton instance of LocalOutOfProcessTestProcessLauncher. public static LocalOutOfProcessTestProcessLauncher Instance { get; } Property Value LocalOutOfProcessTestProcessLauncher Methods StartTestProcess(string, string, string?) Starts the test process. protected override sealed ITestProcess? StartTestProcess(string executable, string executableArguments, string? responseFile) Parameters executable string The executable to be launched (note that this may not be a fully qualified path name, as it may be depending on the system path to locate the executable) executableArguments string The arguments to pass to the executable responseFile string The response file that's being used, if present Returns ITestProcess Remarks The response file will be part of the executableArguments, but the actual path to the response file is provided here in the even that it needs to be modified or copied elsewhere (at which point the developer is responsible for updating executableArguments to point to the new response file location). Additionally, the developer is responsible for deleting the response file from the disk when the execution is complete."
  },
  "v3/2.0.0/Xunit.v3.LocalTestProcess.html": {
    "href": "v3/2.0.0/Xunit.v3.LocalTestProcess.html",
    "title": "Class LocalTestProcess | xunit",
    "summary": "Class LocalTestProcess Namespace Xunit.v3 Assembly xunit.v3.runner.utility.netfx.dll Implementation of ITestProcess for a process running on the local machine. public sealed class LocalTestProcess : ITestProcess, IDisposable Inheritance object LocalTestProcess Implements ITestProcess IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties HasExited Gets a flag to indicate whether the test process has exited or not yet. public bool HasExited { get; } Property Value bool ProcessID Gets the process ID of the local process. public int ProcessID { get; } Property Value int StandardInput Gets a TextWriter that can be used to write text from the standard input of the test process. public TextWriter StandardInput { get; } Property Value TextWriter StandardOutput Gets a TextReader that can be used to read text from the standard output of the test process. public TextReader StandardOutput { get; } Property Value TextReader Methods Attach(int, string?) Returns a test process for an existing process based on process ID. public static LocalTestProcess Attach(int processID, string? responseFile) Parameters processID int The process ID responseFile string The response file (to be cleaned up during disposal) Returns LocalTestProcess Cancel(bool) Cancels the test pipeline, forcefully if necessary. public void Cancel(bool forceCancellation) Parameters forceCancellation bool When set to false, this should request graceful termination of the test pipeline; when set to true, the test process should be forcefully shut down as quickly as possible. Remarks Note that repeated calls to this method with forceCancellation set to false may be possible, since it may be dispatched every time a remote runner returns false from a message sink/message bus call. For out of process runners using Ctrl+C via standard input, it should only send Ctrl+C the first time this is called (since double Ctrl+C is the forceful cancellation signal). Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Start(string, string, string?) Starts a new test process. public static LocalTestProcess? Start(string executable, string executableArguments, string? responseFile) Parameters executable string The executable to be launched executableArguments string The arguments to the executable responseFile string The response file (to be cleaned up during disposal) Returns LocalTestProcess WaitForExit(int) Wait for the specified number of milliseconds for the test process to exit. public bool WaitForExit(int milliseconds) Parameters milliseconds int The amount of time, in milliseconds, to wait Returns bool Returns true if the process exited; false, otherwise"
  },
  "v3/2.0.0/Xunit.v3.MaxConcurrencySyncContext.html": {
    "href": "v3/2.0.0/Xunit.v3.MaxConcurrencySyncContext.html",
    "title": "Class MaxConcurrencySyncContext | xunit",
    "summary": "Class MaxConcurrencySyncContext Namespace Xunit.v3 Assembly xunit.v3.core.dll An implementation of SynchronizationContext which runs work on custom threads rather than in the thread pool, and limits the number of in-flight actions. public class MaxConcurrencySyncContext : SynchronizationContext, IDisposable Inheritance object SynchronizationContext MaxConcurrencySyncContext Implements IDisposable Inherited Members SynchronizationContext.CreateCopy() SynchronizationContext.IsWaitNotificationRequired() SynchronizationContext.OperationCompleted() SynchronizationContext.OperationStarted() SynchronizationContext.SetSynchronizationContext(SynchronizationContext) SynchronizationContext.SetWaitNotificationRequired() SynchronizationContext.Wait(IntPtr[], bool, int) SynchronizationContext.WaitHelper(IntPtr[], bool, int) SynchronizationContext.Current object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MaxConcurrencySyncContext(int) Initializes a new instance of the MaxConcurrencySyncContext class. public MaxConcurrencySyncContext(int maximumConcurrencyLevel) Parameters maximumConcurrencyLevel int The maximum number of tasks to run at any one time. Methods Dispose() public void Dispose() Post(SendOrPostCallback, object?) public override void Post(SendOrPostCallback d, object? state) Parameters d SendOrPostCallback state object Send(SendOrPostCallback, object?) public override void Send(SendOrPostCallback d, object? state) Parameters d SendOrPostCallback state object"
  },
  "v3/2.0.0/Xunit.v3.MemberDataAttributeBase.html": {
    "href": "v3/2.0.0/Xunit.v3.MemberDataAttributeBase.html",
    "title": "Class MemberDataAttributeBase | xunit",
    "summary": "Class MemberDataAttributeBase Namespace Xunit.v3 Assembly xunit.v3.core.dll Provides a base class for attributes that will provide member data. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public abstract class MemberDataAttributeBase : DataAttribute, IDataAttribute Inheritance object Attribute DataAttribute MemberDataAttributeBase Implements IDataAttribute Derived MemberDataAttribute Inherited Members DataAttribute.Explicit DataAttribute.ExplicitAsNullable DataAttribute.Skip DataAttribute.TestDisplayName DataAttribute.Timeout DataAttribute.TimeoutAsNullable DataAttribute.Traits Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors MemberDataAttributeBase(string, object?[]) Provides a base class for attributes that will provide member data. protected MemberDataAttributeBase(string memberName, object?[] arguments) Parameters memberName string The name of the public static member on the test class that will provide the test data It is recommended to use the nameof operator to ensure compile-time safety, e.g., nameof(SomeMemberName). arguments object[] The arguments to be passed to the member (only supported for methods; ignored for everything else) Properties Arguments Gets or sets the arguments passed to the member. Only supported for static methods. public object?[] Arguments { get; } Property Value object[] DisableDiscoveryEnumeration Returns true if the data attribute wants to skip enumerating data during discovery. This will cause the theory to yield a single test case for all data, and the data discovery will be during test execution instead of discovery. public bool DisableDiscoveryEnumeration { get; set; } Property Value bool MemberName Gets the member name. public string MemberName { get; } Property Value string MemberType Gets or sets the type to retrieve the member from. If not set, then the member will be retrieved from the unit test class. public Type? MemberType { get; set; } Property Value Type Methods ConvertDataRow(object) Converts an item yielded by the data attribute to an ITheoryDataRow, for return from GetData(MethodInfo, DisposalTracker). Items yielded will typically be object[], ITheoryDataRow, or System.Runtime.CompilerServices.ITuple, but this override will allow derived attribute types to support additional data items. If the data item cannot be converted, this method will throw ArgumentException. protected override ITheoryDataRow ConvertDataRow(object dataRow) Parameters dataRow object An item yielded from the data member. Returns ITheoryDataRow An ITheoryDataRow suitable for return from GetData(MethodInfo, DisposalTracker). Exceptions ArgumentException Thrown when dataRow does not point to a valid data row (must be compatible with object[] or ITheoryDataRow). GetData(MethodInfo, DisposalTracker) Returns the data to be used to test the theory. public override ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(MethodInfo testMethod, DisposalTracker disposalTracker) Parameters testMethod MethodInfo The test method the data attribute is attached to disposalTracker DisposalTracker The disposal tracker used to dispose the data Returns ValueTask<IReadOnlyCollection<ITheoryDataRow>> SupportsDiscoveryEnumeration() Returns true if the data attribute supports enumeration during discovery; false otherwise. Data attributes with expensive computational costs and/or randomized data sets should return false. public override bool SupportsDiscoveryEnumeration() Returns bool"
  },
  "v3/2.0.0/Xunit.v3.MessageSinkMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.MessageSinkMessage.html",
    "title": "Class MessageSinkMessage | xunit",
    "summary": "Class MessageSinkMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IMessageSinkMessage, with serialization support. public abstract class MessageSinkMessage : IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage Implements IMessageSinkMessage IJsonSerializable Derived DiagnosticMessage ErrorMessage InternalDiagnosticMessage TestAssemblyMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Because of serialization, all concrete message sink message types must be decorated with JsonTypeIDAttribute to set a unique type ID for serialization purposes. Constructors MessageSinkMessage() Initializes a new instance of the see MessageSinkMessage class. protected MessageSinkMessage() Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected abstract void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToDisplayString(string?[]?) Converts a string array into a display value, for use in an ToString() overload. protected static string ToDisplayString(string?[]? array) Parameters array string[] Returns string ToDisplayString<T>(T[]?) Converts am array into a display value, for use in an ToString() overload. protected static string ToDisplayString<T>(T[]? array) Parameters array T[] Returns string Type Parameters T ToJson() Creates a JSON serialized version of this message. public string ToJson() Returns string Exceptions InvalidOperationException Thrown if the message class does not have a JsonTypeIDAttribute. UnsetPropertiesException Thrown when one or more properties are missing values. ValidateObjectState() Validates the state of the message object. This should be called just before serializing the message or just after deserializing the message to ensure that the message is not missing any required property values. public void ValidateObjectState() Exceptions UnsetPropertiesException Throw when one or more properties are missing values. ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected abstract void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into ValidatePropertyIsNotNull(object?, string, HashSet<string>) Validates that the property value is not null, and if it is, adds the given property name to the invalid property hash set. protected static void ValidatePropertyIsNotNull(object? propertyValue, string propertyName, HashSet<string> invalidProperties) Parameters propertyValue object The property value propertyName string The property name invalidProperties HashSet<string> The hash set to contain the invalid property name list"
  },
  "v3/2.0.0/Xunit.v3.OutOfProcessTestProcessLauncherBase.html": {
    "href": "v3/2.0.0/Xunit.v3.OutOfProcessTestProcessLauncherBase.html",
    "title": "Class OutOfProcessTestProcessLauncherBase | xunit",
    "summary": "Class OutOfProcessTestProcessLauncherBase Namespace Xunit.v3 Assembly xunit.v3.runner.utility.netfx.dll Base implementation of ITestProcessLauncher designed to launch an xUnit.net v3 test project out of process (the default behavior). The base class abstracts away the actual launch and manipulation, so that replacement launchers to perform things like launching under a debugger. public abstract class OutOfProcessTestProcessLauncherBase : ITestProcessLauncher Inheritance object OutOfProcessTestProcessLauncherBase Implements ITestProcessLauncher Derived LocalOutOfProcessTestProcessLauncher Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties IsWindows Return true if running under Windows; return false if running elsewhere (and Mono is required for .NET Framework support). By default uses RuntimeInformation. public virtual bool IsWindows { get; } Property Value bool Methods Launch(XunitProjectAssembly, IReadOnlyList<string>) Launches the test process. Returns null if the process could not be launched. public ITestProcess? Launch(XunitProjectAssembly projectAssembly, IReadOnlyList<string> arguments) Parameters projectAssembly XunitProjectAssembly The test project assembly arguments IReadOnlyList<string> The list of arguments to be passed to the in-process runner Returns ITestProcess StartTestProcess(string, string, string?) Starts the test process. protected abstract ITestProcess? StartTestProcess(string executable, string executableArguments, string? responseFile) Parameters executable string The executable to be launched (note that this may not be a fully qualified path name, as it may be depending on the system path to locate the executable) executableArguments string The arguments to pass to the executable responseFile string The response file that's being used, if present Returns ITestProcess Remarks The response file will be part of the executableArguments, but the actual path to the response file is provided here in the even that it needs to be modified or copied elsewhere (at which point the developer is responsible for updating executableArguments to point to the new response file location). Additionally, the developer is responsible for deleting the response file from the disk when the execution is complete."
  },
  "v3/2.0.0/Xunit.v3.RunSummary.html": {
    "href": "v3/2.0.0/Xunit.v3.RunSummary.html",
    "title": "Struct RunSummary | xunit",
    "summary": "Struct RunSummary Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents the statistical summary from a run of one or more tests. public struct RunSummary Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Failed The number of failed tests. public int Failed Field Value int NotRun The number of tests that were not run. public int NotRun Field Value int Skipped The number of skipped tests. public int Skipped Field Value int Time The total time taken to run the tests, in seconds. public decimal Time Field Value decimal Total The total number of tests run. public int Total Field Value int Methods Aggregate(RunSummary) Adds a run summary's totals into this run summary. public void Aggregate(RunSummary other) Parameters other RunSummary The run summary to be added. ToString() public override readonly string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.v3.TestAssemblyCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.v3.TestAssemblyCleanupFailure.html",
    "title": "Class TestAssemblyCleanupFailure | xunit",
    "summary": "Class TestAssemblyCleanupFailure Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestAssemblyCleanupFailure. [JsonTypeID(\"test-assembly-cleanup-failure\")] public sealed class TestAssemblyCleanupFailure : TestAssemblyMessage, ITestAssemblyCleanupFailure, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestAssemblyCleanupFailure Implements ITestAssemblyCleanupFailure ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string) Creates a new ITestAssemblyCleanupFailure constructed from an Exception object. public static ITestAssemblyCleanupFailure FromException(Exception ex, string assemblyUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly Returns ITestAssemblyCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestAssemblyFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestAssemblyFinished.html",
    "title": "Class TestAssemblyFinished | xunit",
    "summary": "Class TestAssemblyFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestAssemblyFinished. [JsonTypeID(\"test-assembly-finished\")] public sealed class TestAssemblyFinished : TestAssemblyMessage, ITestAssemblyFinished, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestAssemblyFinished Implements ITestAssemblyFinished ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal FinishTime Gets the date and time when the test assembly execution finished. public required DateTimeOffset FinishTime { get; set; } Property Value DateTimeOffset TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestAssemblyMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestAssemblyMessage.html",
    "title": "Class TestAssemblyMessage | xunit",
    "summary": "Class TestAssemblyMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestAssemblyMessage. public abstract class TestAssemblyMessage : MessageSinkMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage Implements ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived DiscoveryComplete DiscoveryStarting TestAssemblyCleanupFailure TestAssemblyFinished TestAssemblyStarting TestCollectionMessage Inherited Members MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AssemblyUniqueID Gets the assembly's unique ID. Can be used to correlate test messages with the appropriate assembly that they're related to. public required string AssemblyUniqueID { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestAssemblyRunner-4.html": {
    "href": "v3/2.0.0/Xunit.v3.TestAssemblyRunner-4.html",
    "title": "Class TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> | xunit",
    "summary": "Class TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running tests in an assembly. It groups the tests by test collection, and then runs the individual test collections. public abstract class TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> where TContext : TestAssemblyRunnerContext<TTestAssembly, TTestCase> where TTestAssembly : class, ITestAssembly where TTestCollection : class, ITestCollection where TTestCase : class, ITestCase Type Parameters TContext The context type used by the runner TTestAssembly The type of the test assembly object model. Must derive from ITestAssembly. TTestCollection The type of the test collection object model. Must derive from ITestCollection. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> Derived XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestAssemblyRunner() Initializes a new instance of the TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> class. protected TestAssemblyRunner() Methods FailTestCollection(TContext, TTestCollection, IReadOnlyCollection<TTestCase>, Exception) Fails the tests from a test collection due to an exception. protected virtual ValueTask<RunSummary> FailTestCollection(TContext ctxt, TTestCollection testCollection, IReadOnlyCollection<TTestCase> testCases, Exception exception) Parameters ctxt TContext The context that describes the current test assembly testCollection TTestCollection The test collection that is being failed. testCases IReadOnlyCollection<TTestCase> The test cases that belong to the test collection. exception Exception The exception that was caused during startup. Returns ValueTask<RunSummary> Returns summary information about the tests that were failed. Remarks By default, using XunitRunnerHelper to fail the test cases. GetTestFrameworkDisplayName(TContext) Gets the display name for the test framework. Used to populate TestAssemblyStarting during OnTestAssemblyStarting(TContext). protected abstract ValueTask<string> GetTestFrameworkDisplayName(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns ValueTask<string> OnTestAssemblyCleanupFailure(TContext, Exception) This method is called when an exception was thrown while cleaning up, after the test assembly has run. By default this sends TestAssemblyCleanupFailure. protected virtual ValueTask<bool> OnTestAssemblyCleanupFailure(TContext ctxt, Exception exception) Parameters ctxt TContext The context that describes the current test assembly exception Exception The exception that caused the cleanup failure (may be an instance of AggregateException if more than one exception occurred). Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown are converted into fatal exception messages (via IErrorMessage) and sent to the message bus in ctxt. OnTestAssemblyFinished(TContext, RunSummary) This method will be called when the test assembly has finished running. By default this sends TestAssemblyFinished. Override this to enable any extensibility related to test assembly finish. protected virtual ValueTask<bool> OnTestAssemblyFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test assembly summary RunSummary The execution summary for the test assembly Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test assembly cleanup failure. OnTestAssemblyStarting(TContext) This method will be called before the test assembly has started running. TBy default this sends TestAssemblyStarting. Override this to enable any extensibility related to test assembly start. protected virtual ValueTask<bool> OnTestAssemblyStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test assembly failure (and will prevent the test assembly from running). Even if this method records exceptions, OnTestAssemblyFinished(TContext, RunSummary) will be called. OrderTestCollections(TContext) Orders the test collections in the assembly. By default does not re-order the test collections. Override this to provide custom test collection ordering. protected virtual List<(TTestCollection Collection, List<TTestCase> TestCases)> OrderTestCollections(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns List<(TTestCollection Collection, List<TTestCase> TestCases)> Test collections in run order (and associated, not-yet-ordered test cases). Run(TContext) Runs the tests in the test assembly. protected ValueTask<RunSummary> Run(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestCollection(TContext, TTestCollection, IReadOnlyCollection<TTestCase>) Override this method to run the tests in an individual test collection. protected abstract ValueTask<RunSummary> RunTestCollection(TContext ctxt, TTestCollection testCollection, IReadOnlyCollection<TTestCase> testCases) Parameters ctxt TContext The context that describes the current test assembly testCollection TTestCollection The test collection that is being run. testCases IReadOnlyCollection<TTestCase> The test cases that belong to the test collection. Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestCollections(TContext, Exception?) Runs the list of test collections. By default, groups the tests by collection and runs them synchronously. protected virtual ValueTask<RunSummary> RunTestCollections(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test assembly exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run. SetTestContext(TContext, TestEngineStatus) Sets the current TestContext for the current test assembly and the given test assembly status. protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testAssemblyStatus) Parameters ctxt TContext The context that describes the current test assembly testAssemblyStatus TestEngineStatus The current test assembly status."
  },
  "v3/2.0.0/Xunit.v3.TestAssemblyRunnerContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestAssemblyRunnerContext-2.html",
    "title": "Class TestAssemblyRunnerContext<TTestAssembly, TTestCase> | xunit",
    "summary": "Class TestAssemblyRunnerContext<TTestAssembly, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>. public class TestAssemblyRunnerContext<TTestAssembly, TTestCase> : IAsyncLifetime, IAsyncDisposable where TTestAssembly : class, ITestAssembly where TTestCase : class, ITestCase Type Parameters TTestAssembly The type of the test assembly object model. Must derive from ITestAssembly. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestAssemblyRunnerContext<TTestAssembly, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestAssemblyRunnerContext(TTestAssembly, IReadOnlyCollection<TTestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken) Base context class for TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>. public TestAssemblyRunnerContext(TTestAssembly testAssembly, IReadOnlyCollection<TTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken cancellationToken) Parameters testAssembly TTestAssembly The test assembly testCases IReadOnlyCollection<TTestCase> The test cases from the assembly executionMessageSink IMessageSink The message sink to send execution messages to executionOptions ITestFrameworkExecutionOptions The options used during test execution cancellationToken CancellationToken The cancellation token used to cancel execution Properties Aggregator Gets the aggregator used for reporting exceptions. public virtual ExceptionAggregator Aggregator { get; } Property Value ExceptionAggregator CancellationTokenSource Gets the cancellation token source used for cancelling test execution. public virtual CancellationTokenSource CancellationTokenSource { get; } Property Value CancellationTokenSource ExecutionMessageSink Gets the execution message sink provided by the runner. This is typically wrapped into the message bus by CreateMessageBus(). protected IMessageSink ExecutionMessageSink { get; } Property Value IMessageSink ExecutionOptions Gets the execution options provided by the runner. protected ITestFrameworkExecutionOptions ExecutionOptions { get; } Property Value ITestFrameworkExecutionOptions MessageBus Gets the message bus to send execution engine messages to. public IMessageBus MessageBus { get; } Property Value IMessageBus TargetFramework Gets the target framework that the test assembly is targeting. By default, this returns null. Test frameworks that are based on .NET runtime assemblies can look for TargetFrameworkAttribute decorated at the assembly level, which is added automatically by the compiler. public virtual string? TargetFramework { get; } Property Value string TestAssembly Gets the assembly that is being executed. public TTestAssembly TestAssembly { get; } Property Value TTestAssembly TestCases Gets the test cases associated with this test assembly. public IReadOnlyCollection<TTestCase> TestCases { get; protected set; } Property Value IReadOnlyCollection<TTestCase> TestEnvironment Gets the environment that the test are running in. By default, returns a string which indicates process bitness, processor architecture (when known), and the description of the runtime environment (from FrameworkDescription). public virtual string TestEnvironment { get; } Property Value string Remarks Example: \"64-bit (x64) .NET 8.0.11\" Methods CreateMessageBus() Creates the message bus to be used for test execution. By default, it inspects the options for the SynchronousMessageReporting flag, and if present, creates a message bus that ensures all messages are delivered on the same thread. protected virtual IMessageBus CreateMessageBus() Returns IMessageBus The message bus. DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask InitializeAsync() Called immediately after the class has been created, before it is used. public virtual ValueTask InitializeAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.TestAssemblyStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestAssemblyStarting.html",
    "title": "Class TestAssemblyStarting | xunit",
    "summary": "Class TestAssemblyStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestAssemblyStarting. [JsonTypeID(\"test-assembly-starting\")] public sealed class TestAssemblyStarting : TestAssemblyMessage, ITestAssemblyStarting, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IAssemblyMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestAssemblyStarting Implements ITestAssemblyStarting ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IAssemblyMetadata Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). public required string AssemblyName { get; set; } Property Value string AssemblyPath Gets the on-disk location of the assembly under test. public required string AssemblyPath { get; set; } Property Value string ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. public required string? ConfigFilePath { get; set; } Property Value string Seed Gets the seed value used for randomization. If null, then the test framework does not support getting or setting a randomization seed. (For stock versions of xUnit.net, support for settable randomization seeds started with v3.) public required int? Seed { get; set; } Property Value int? StartTime Gets the date and time when the test assembly execution began. public required DateTimeOffset StartTime { get; set; } Property Value DateTimeOffset TargetFramework Gets the target framework that the assembly was compiled against. Examples: \".NETFramework,Version=v4.7.2\", \".NETCoreApp,Version=v6.0\". This information is read from TargetFrameworkAttribute on the test assembly, which is normally auto-generated (but could be missing or empty). public required string? TargetFramework { get; set; } Property Value string TestEnvironment Gets a display string that describes the test execution environment. Examples: \"32-bit .NET Framework 4.8.4220.0\", \"64-bit .NET Core 4.6.29220.03\" public required string TestEnvironment { get; set; } Property Value string TestFrameworkDisplayName Gets a display string which describes the test framework and version number. Examples: \"xUnit.net v3 0.1.0-pre.15\", \"xUnit.net 2.4.1\" public required string TestFrameworkDisplayName { get; set; } Property Value string Traits Gets the trait values associated with this test assembly. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCaseCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseCleanupFailure.html",
    "title": "Class TestCaseCleanupFailure | xunit",
    "summary": "Class TestCaseCleanupFailure Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCaseCleanupFailure. [JsonTypeID(\"test-case-cleanup-failure\")] public sealed class TestCaseCleanupFailure : TestCaseMessage, ITestCaseCleanupFailure, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseCleanupFailure Implements ITestCaseCleanupFailure ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string, string, string?, string?, string) Creates a new ITestCaseCleanupFailure constructed from an Exception object. public static ITestCaseCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID, string testCaseUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method testCaseUniqueID string The unique ID of the test case Returns ITestCaseCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCaseDiscovered.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseDiscovered.html",
    "title": "Class TestCaseDiscovered | xunit",
    "summary": "Class TestCaseDiscovered Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCaseDiscovered. [JsonTypeID(\"test-case-discovered\")] public sealed class TestCaseDiscovered : TestCaseMessage, ITestCaseDiscovered, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCaseMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseDiscovered Implements ITestCaseDiscovered ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestCaseMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag indicating whether this test case was marked as explicit or not. public required bool Explicit { get; set; } Property Value bool Serialization Gets the serialized value of the test case, which allows it to be transferred across process boundaries. public required string Serialization { get; set; } Property Value string SkipReason Gets the display text for the reason a test is being skipped; if the test is not statically skipped, returns null. (A test may be dynamically skipped at runtime while still returning null.) public required string? SkipReason { get; set; } Property Value string SourceFilePath Gets the source file name. A null value indicates that the source file name is not known. public required string? SourceFilePath { get; set; } Property Value string SourceLineNumber Gets the source file line number. A null value indicates that the source file line number is not known. public required int? SourceLineNumber { get; set; } Property Value int? TestCaseDisplayName Gets the display name of the test case. public required string TestCaseDisplayName { get; set; } Property Value string TestClassMetadataToken Gets the MetadataToken for the test class. If the test did not originate in a class, will return null. public required int? TestClassMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestClassName is null. TestClassName Gets the full name of the class where the test is defined (i.e., FullName). If the test did not originiate in a class, will return null. public required string? TestClassName { get; set; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. If the test did not originate in a class, or the class it originated in does not reside in a namespace, will return null. public required string? TestClassNamespace { get; set; } Property Value string TestClassSimpleName Gets the simple name of the class where the test is defined (the class name without namespace). If the test did not originiate in a class, will return null. public required string? TestClassSimpleName { get; set; } Property Value string TestMethodMetadataToken Gets the MetadataToken for the test method. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required int? TestMethodMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestMethodName is null. TestMethodName Gets the method name where the test is defined, in the TestClassName class. If the test did not originiate in a method, will return null. public required string? TestMethodName { get; set; } Property Value string TestMethodParameterTypesVSTest Gets the types for the test method parameters. If the test did not originate in a method, or the test framework does not provide this information, will return null; if the test method has no parameters, will return an empty array. public required string[]? TestMethodParameterTypesVSTest { get; set; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required string? TestMethodReturnTypeVSTest { get; set; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCaseFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseFinished.html",
    "title": "Class TestCaseFinished | xunit",
    "summary": "Class TestCaseFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCaseFinished. [JsonTypeID(\"test-case-finished\")] public sealed class TestCaseFinished : TestCaseMessage, ITestCaseFinished, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseFinished Implements ITestCaseFinished ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCaseMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseMessage.html",
    "title": "Class TestCaseMessage | xunit",
    "summary": "Class TestCaseMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCaseMessage. public abstract class TestCaseMessage : TestMethodMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage Implements ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestCaseCleanupFailure TestCaseDiscovered TestCaseFinished TestCaseStarting TestMessage Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCaseUniqueID Gets the test case's unique ID. Can be used to correlate test messages with the appropriate test case that they're related to. public required string TestCaseUniqueID { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCaseRunner-3.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseRunner-3.html",
    "title": "Class TestCaseRunner<TContext, TTestCase, TTest> | xunit",
    "summary": "Class TestCaseRunner<TContext, TTestCase, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running test cases which are assumed to result in one or more tests (that implement ITest). public abstract class TestCaseRunner<TContext, TTestCase, TTest> : TestCaseRunnerBase<TContext, TTestCase> where TContext : TestCaseRunnerContext<TTestCase, TTest> where TTestCase : class, ITestCase where TTest : class, ITest Type Parameters TContext The context type used by the runner TTestCase The type of the test case used by the test framework. Must derive from ITestCase. TTest The type of the test that is generated from the test case. Must derive from ITest. Inheritance object TestCaseRunnerBase<TContext, TTestCase> TestCaseRunner<TContext, TTestCase, TTest> Derived XunitTestCaseRunnerBase<TContext, TTestCase, TTest> Inherited Members TestCaseRunnerBase<TContext, TTestCase>.OnTestCaseCleanupFailure(TContext, Exception) TestCaseRunnerBase<TContext, TTestCase>.OnTestCaseFinished(TContext, RunSummary) TestCaseRunnerBase<TContext, TTestCase>.OnTestCaseStarting(TContext) TestCaseRunnerBase<TContext, TTestCase>.Run(TContext) TestCaseRunnerBase<TContext, TTestCase>.RunTestCase(TContext, Exception) TestCaseRunnerBase<TContext, TTestCase>.SetTestContext(TContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCaseRunner() Initializes a new instance of the TestCaseRunner<TContext, TTestCase, TTest> class. protected TestCaseRunner() Methods FailTest(TContext, TTest, Exception) Override this method to fail an individual test. protected virtual ValueTask<RunSummary> FailTest(TContext ctxt, TTest test, Exception exception) Parameters ctxt TContext The context that describes the current test case test TTest The test to be failed. exception Exception The exception that was caused during startup. Returns ValueTask<RunSummary> Returns summary information about the test case run. Remarks By default, uses XunitRunnerHelper to fail the test cases. RunTest(TContext, TTest) Override this method to run an individual test. protected abstract ValueTask<RunSummary> RunTest(TContext ctxt, TTest test) Parameters ctxt TContext The context that describes the current test method test TTest The test to be run. Returns ValueTask<RunSummary> Returns summary information about the test case run. RunTestCase(TContext, Exception?) Override this to run the test case. protected override ValueTask<RunSummary> RunTestCase(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test case exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run."
  },
  "v3/2.0.0/Xunit.v3.TestCaseRunnerBase-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseRunnerBase-2.html",
    "title": "Class TestCaseRunnerBase<TContext, TTestCase> | xunit",
    "summary": "Class TestCaseRunnerBase<TContext, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running test cases. public abstract class TestCaseRunnerBase<TContext, TTestCase> where TContext : TestCaseRunnerBaseContext<TTestCase> where TTestCase : class, ITestCase Type Parameters TContext The context type used by the runner TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestCaseRunnerBase<TContext, TTestCase> Derived TestCaseRunner<TContext, TTestCase, TTest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks This class does not make any test-related assumptions about test cases, only that at some point, a test case will be \"run\" and results will be provided. As such, it has no definitions that related to tests (or ITest). The intention with this base class is that it can serve as a base for non-traditional test cases, such as injecting errors into the test pipeline during discovery that aren't uncovered until execution time. Constructors TestCaseRunnerBase() Initializes a new instance of the TestCaseRunnerBase<TContext, TTestCase> class. protected TestCaseRunnerBase() Methods OnTestCaseCleanupFailure(TContext, Exception) This method is called when an exception was thrown while cleaning up, after the test case has run. By default, this sends TestCaseCleanupFailure. protected virtual ValueTask<bool> OnTestCaseCleanupFailure(TContext ctxt, Exception exception) Parameters ctxt TContext The context that describes the current test case exception Exception The exception that caused the cleanup failure (may be an instance of AggregateException if more than one exception occurred). Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown are converted into fatal exception messages (via IErrorMessage) and sent to the message bus in ctxt. OnTestCaseFinished(TContext, RunSummary) This method will be called when the test case has finished running. By default, this sends TestCaseFinished. Override this to enable any extensibility related to test case finish. protected virtual ValueTask<bool> OnTestCaseFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test case summary RunSummary The execution summary for the test case. Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test case cleanup failure. OnTestCaseStarting(TContext) This method will be called before the test case has started running. TBy default, this sends TestCaseStarting. Override this to enable any extensibility related to test case start. protected virtual ValueTask<bool> OnTestCaseStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test case Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test case failure (and will prevent the test case from running). Even if this method records exceptions, OnTestCaseFinished(TContext, RunSummary) will be called. Run(TContext) Executes the administrivia around running a test case, while leaving the actual test case execution up to RunTestCase(TContext, Exception?). protected ValueTask<RunSummary> Run(TContext ctxt) Parameters ctxt TContext Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestCase(TContext, Exception?) Override this to run the test case. protected abstract ValueTask<RunSummary> RunTestCase(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test case exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run. SetTestContext(TContext, TestEngineStatus) Sets the current TestContext for the current test case and the given test case status. protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testCaseStatus) Parameters ctxt TContext The context that describes the current test case testCaseStatus TestEngineStatus The current test case status. Remarks This method must never throw. Behavior is undefined if it does. Instead, exceptions that occur should be recorded in the aggregator in ctxt and will be reflected in a way that's appropriate based on when this method is called."
  },
  "v3/2.0.0/Xunit.v3.TestCaseRunnerBaseContext-1.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseRunnerBaseContext-1.html",
    "title": "Class TestCaseRunnerBaseContext<TTestCase> | xunit",
    "summary": "Class TestCaseRunnerBaseContext<TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestCaseRunnerBase<TContext, TTestCase>. public class TestCaseRunnerBaseContext<TTestCase> : ContextBase, IAsyncLifetime, IAsyncDisposable where TTestCase : class, ITestCase Type Parameters TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object ContextBase TestCaseRunnerBaseContext<TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived TestCaseRunnerContext<TTestCase, TTest> Inherited Members ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCaseRunnerBaseContext(TTestCase, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource) Base context class for TestCaseRunnerBase<TContext, TTestCase>. public TestCaseRunnerBaseContext(TTestCase testCase, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters testCase TTestCase The test case explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties TestCase Gets the test case that is being executed. public TTestCase TestCase { get; } Property Value TTestCase"
  },
  "v3/2.0.0/Xunit.v3.TestCaseRunnerContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseRunnerContext-2.html",
    "title": "Class TestCaseRunnerContext<TTestCase, TTest> | xunit",
    "summary": "Class TestCaseRunnerContext<TTestCase, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestCaseRunner<TContext, TTestCase, TTest>. public abstract class TestCaseRunnerContext<TTestCase, TTest> : TestCaseRunnerBaseContext<TTestCase>, IAsyncLifetime, IAsyncDisposable where TTestCase : class, ITestCase where TTest : class, ITest Type Parameters TTestCase The type of the test case used by the test framework. Must derive from ITestCase. TTest The type of the test that is generated from the test case. Must derive from ITest. Inheritance object ContextBase TestCaseRunnerBaseContext<TTestCase> TestCaseRunnerContext<TTestCase, TTest> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestCaseRunnerBaseContext<TTestCase, TTest> Inherited Members TestCaseRunnerBaseContext<TTestCase>.TestCase ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCaseRunnerContext(TTestCase, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource) Base context class for TestCaseRunner<TContext, TTestCase, TTest>. protected TestCaseRunnerContext(TTestCase testCase, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters testCase TTestCase The test case explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties Tests Gets the tests for the given test case. public abstract IReadOnlyCollection<TTest> Tests { get; } Property Value IReadOnlyCollection<TTest>"
  },
  "v3/2.0.0/Xunit.v3.TestCaseStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCaseStarting.html",
    "title": "Class TestCaseStarting | xunit",
    "summary": "Class TestCaseStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCaseStarting. [JsonTypeID(\"test-case-starting\")] public sealed class TestCaseStarting : TestCaseMessage, ITestCaseStarting, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCaseMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestCaseStarting Implements ITestCaseStarting ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestCaseMetadata Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag indicating whether this test case was marked as explicit or not. public required bool Explicit { get; set; } Property Value bool SkipReason Gets the display text for the reason a test is being skipped; if the test is not statically skipped, returns null. (A test may be dynamically skipped at runtime while still returning null.) public required string? SkipReason { get; set; } Property Value string SourceFilePath Gets the source file name. A null value indicates that the source file name is not known. public required string? SourceFilePath { get; set; } Property Value string SourceLineNumber Gets the source file line number. A null value indicates that the source file line number is not known. public required int? SourceLineNumber { get; set; } Property Value int? TestCaseDisplayName Gets the display name of the test case. public required string TestCaseDisplayName { get; set; } Property Value string TestClassMetadataToken Gets the MetadataToken for the test class. If the test did not originate in a class, will return null. public required int? TestClassMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestClassName is null. TestClassName Gets the full name of the class where the test is defined (i.e., FullName). If the test did not originiate in a class, will return null. public required string? TestClassName { get; set; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. If the test did not originate in a class, or the class it originated in does not reside in a namespace, will return null. public required string? TestClassNamespace { get; set; } Property Value string TestClassSimpleName Gets the simple name of the class where the test is defined (the class name without namespace). If the test did not originiate in a class, will return null. public required string? TestClassSimpleName { get; set; } Property Value string TestMethodMetadataToken Gets the MetadataToken for the test method. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required int? TestMethodMetadataToken { get; set; } Property Value int? Remarks This value is only populated for xUnit.net v3 or later test cases, and will return null for v1 or v2 test cases, regardless of whether TestMethodName is null. TestMethodName Gets the method name where the test is defined, in the TestClassName class. If the test did not originiate in a method, will return null. public required string? TestMethodName { get; set; } Property Value string TestMethodParameterTypesVSTest Gets the types for the test method parameters. If the test did not originate in a method, or the test framework does not provide this information, will return null; if the test method has no parameters, will return an empty array. public required string[]? TestMethodParameterTypesVSTest { get; set; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. If the test did not originate in a method, or the test framework did not provide this information, will return null. public required string? TestMethodReturnTypeVSTest { get; set; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestClassCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassCleanupFailure.html",
    "title": "Class TestClassCleanupFailure | xunit",
    "summary": "Class TestClassCleanupFailure Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassCleanupFailure. [JsonTypeID(\"test-class-cleanup-failure\")] public sealed class TestClassCleanupFailure : TestClassMessage, ITestClassCleanupFailure, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestClassCleanupFailure Implements ITestClassCleanupFailure ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string, string, string?) Creates a new ITestClassCleanupFailure constructed from an Exception object. public static ITestClassCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class Returns ITestClassCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestClassComparer.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassComparer.html",
    "title": "Class TestClassComparer | xunit",
    "summary": "Class TestClassComparer Namespace Xunit.v3 Assembly xunit.v3.core.dll An implementation of IEqualityComparer<T> for ITestClass. Compares the fully qualified names of the types. public class TestClassComparer : IEqualityComparer<ITestClass?> Inheritance object TestClassComparer Implements IEqualityComparer<ITestClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Instance The singleton instance of the comparer. public static readonly TestClassComparer Instance Field Value TestClassComparer Methods Equals(ITestClass?, ITestClass?) public bool Equals(ITestClass? x, ITestClass? y) Parameters x ITestClass y ITestClass Returns bool GetHashCode(ITestClass?) public int GetHashCode(ITestClass? obj) Parameters obj ITestClass Returns int"
  },
  "v3/2.0.0/Xunit.v3.TestClassConstructionFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassConstructionFinished.html",
    "title": "Class TestClassConstructionFinished | xunit",
    "summary": "Class TestClassConstructionFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassConstructionFinished. [JsonTypeID(\"test-class-construction-finished\")] public sealed class TestClassConstructionFinished : TestMessage, ITestClassConstructionFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassConstructionFinished Implements ITestClassConstructionFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.TestClassConstructionStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassConstructionStarting.html",
    "title": "Class TestClassConstructionStarting | xunit",
    "summary": "Class TestClassConstructionStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassConstructionStarting. [JsonTypeID(\"test-class-construction-starting\")] public sealed class TestClassConstructionStarting : TestMessage, ITestClassConstructionStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassConstructionStarting Implements ITestClassConstructionStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.TestClassDisposeFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassDisposeFinished.html",
    "title": "Class TestClassDisposeFinished | xunit",
    "summary": "Class TestClassDisposeFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassDisposeFinished. [JsonTypeID(\"test-class-dispose-finished\")] public sealed class TestClassDisposeFinished : TestMessage, ITestClassDisposeFinished, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassDisposeFinished Implements ITestClassDisposeFinished ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.TestClassDisposeStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassDisposeStarting.html",
    "title": "Class TestClassDisposeStarting | xunit",
    "summary": "Class TestClassDisposeStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassDisposeStarting. [JsonTypeID(\"test-class-dispose-starting\")] public sealed class TestClassDisposeStarting : TestMessage, ITestClassDisposeStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestClassDisposeStarting Implements ITestClassDisposeStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestMessage.ToString() TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.TestClassFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassFinished.html",
    "title": "Class TestClassFinished | xunit",
    "summary": "Class TestClassFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassFinished [JsonTypeID(\"test-class-finished\")] public sealed class TestClassFinished : TestClassMessage, ITestClassFinished, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestClassFinished Implements ITestClassFinished ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestClassMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassMessage.html",
    "title": "Class TestClassMessage | xunit",
    "summary": "Class TestClassMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassMessage. public abstract class TestClassMessage : TestCollectionMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage Implements ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestClassCleanupFailure TestClassFinished TestClassStarting TestMethodMessage Inherited Members TestCollectionMessage.TestCollectionUniqueID TestCollectionMessage.ValidateObjectState(HashSet<string>) TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestClassUniqueID Gets the test class's unique ID. Can be used to correlate test messages with the appropriate test class that they're related to. Will be null if the test did not originate from a class. public required string? TestClassUniqueID { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.v3.TestClassRunner-4.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassRunner-4.html",
    "title": "Class TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> | xunit",
    "summary": "Class TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running tests in a test class. It groups the tests by test method, and then runs the individual test methods. public abstract class TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> where TContext : TestClassRunnerContext<TTestClass, TTestCase> where TTestClass : class, ITestClass where TTestMethod : class, ITestMethod where TTestCase : class, ITestCase Type Parameters TContext The context type used by the runner TTestClass The type of the test class used by the test framework. Must derive from ITestClass. TTestMethod The type of the test method used by the test framework. Must derive from ITestMethod. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> Derived XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestClassRunner() Initializes a new instance of the TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> class. protected TestClassRunner() Methods CreateTestClassConstructorArguments(TContext) Creates the arguments for the test class constructor. By default just returns an empty set of arguments. Override to find the arguments for the constructor. protected virtual ValueTask<object?[]> CreateTestClassConstructorArguments(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns ValueTask<object[]> The test class constructor arguments. Remarks This method runs during Initializing and any exceptions thrown will contribute to test class failure (and will prevent the test class from running) FailTestMethod(TContext, TTestMethod?, IReadOnlyCollection<TTestCase>, object?[], Exception) Fails the tests from a test method due to an exception. protected virtual ValueTask<RunSummary> FailTestMethod(TContext ctxt, TTestMethod? testMethod, IReadOnlyCollection<TTestCase> testCases, object?[] constructorArguments, Exception exception) Parameters ctxt TContext The context that describes the current test class testMethod TTestMethod The test method that contains the test cases. May be null for test cases that do not support classes and methods. testCases IReadOnlyCollection<TTestCase> The test cases to be failed. constructorArguments object[] The constructor arguments that would have been used to create the test class. exception Exception The exception that was caused during startup. Returns ValueTask<RunSummary> Returns summary information about the tests that were failed. Remarks By default, using XunitRunnerHelper to fail the test cases. OnTestClassCleanupFailure(TContext, Exception) This method is called when an exception was thrown while cleaning up, after the test class has run. By default, this sends TestClassCleanupFailure. protected virtual ValueTask<bool> OnTestClassCleanupFailure(TContext ctxt, Exception exception) Parameters ctxt TContext The context that describes the current test class exception Exception The exception that caused the cleanup failure (may be an instance of AggregateException if more than one exception occurred). Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown are converted into fatal exception messages (via IErrorMessage) and sent to the message bus in ctxt. OnTestClassFinished(TContext, RunSummary) This method will be called when the test class has finished running. By default, this sends TestClassFinished. Override this to enable any extensibility related to test class finish. protected virtual ValueTask<bool> OnTestClassFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test class summary RunSummary The execution summary for the test class Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test class cleanup failure. OnTestClassStarting(TContext) This method will be called before the test class has started running. By default, this sends TestClassStarting. Override this to enable any extensibility related to test class start. protected virtual ValueTask<bool> OnTestClassStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test class failure (and will prevent the test class from running). Even if this method records exceptions, OnTestClassFinished(TContext, RunSummary) will be called. OrderTestCases(TContext) Orders the test cases in the class. By default does not re-order the test cases. Override this to provide custom test case ordering. protected virtual IReadOnlyCollection<TTestCase> OrderTestCases(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns IReadOnlyCollection<TTestCase> Remarks This method runs during Running and any exceptions thrown will contribute to test class failure Run(TContext) Runs the tests in the test class. protected ValueTask<RunSummary> Run(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestMethod(TContext, TTestMethod?, IReadOnlyCollection<TTestCase>, object?[]) Override this method to run the tests in an individual test method. protected abstract ValueTask<RunSummary> RunTestMethod(TContext ctxt, TTestMethod? testMethod, IReadOnlyCollection<TTestCase> testCases, object?[] constructorArguments) Parameters ctxt TContext The context that describes the current test class testMethod TTestMethod The test method that contains the test cases. May be null for test cases that do not support classes and methods. testCases IReadOnlyCollection<TTestCase> The test cases to be run. constructorArguments object[] The constructor arguments that will be used to create the test class. Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestMethods(TContext, Exception?) Runs the list of test methods. By default, orders the tests, groups them by method and runs them synchronously. protected virtual ValueTask<RunSummary> RunTestMethods(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test class exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run SetTestContext(TContext, TestEngineStatus) Sets the current TestContext for the current test class and the given test class status. protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testClassStatus) Parameters ctxt TContext The context that describes the current test class testClassStatus TestEngineStatus The current test class status. Remarks This method must never throw. Behavior is undefined if it does. Instead, exceptions that occur should be recorded in the aggregator in ctxt and will be reflected in a way that's appropriate based on when this method is called."
  },
  "v3/2.0.0/Xunit.v3.TestClassRunnerContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassRunnerContext-2.html",
    "title": "Class TestClassRunnerContext<TTestClass, TTestCase> | xunit",
    "summary": "Class TestClassRunnerContext<TTestClass, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestClassRunnerContext<TTestClass, TTestCase>. public class TestClassRunnerContext<TTestClass, TTestCase> : ContextBase, IAsyncLifetime, IAsyncDisposable where TTestClass : class, ITestClass where TTestCase : class, ITestCase Type Parameters TTestClass The type of the test class used by the test framework. Must derive from ITestClass. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object ContextBase TestClassRunnerContext<TTestClass, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestClassRunnerBaseContext<TTestClass, TTestCase> Inherited Members ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestClassRunnerContext(TTestClass, IReadOnlyCollection<TTestCase>, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource) Base context class for TestClassRunnerContext<TTestClass, TTestCase>. public TestClassRunnerContext(TTestClass testClass, IReadOnlyCollection<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters testClass TTestClass The test class testCases IReadOnlyCollection<TTestCase> The test from the test class explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties TestCases Gets the test cases associated with the test class. public IReadOnlyCollection<TTestCase> TestCases { get; } Property Value IReadOnlyCollection<TTestCase> TestClass Gets the test class that is being executed. public TTestClass TestClass { get; } Property Value TTestClass"
  },
  "v3/2.0.0/Xunit.v3.TestClassStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestClassStarting.html",
    "title": "Class TestClassStarting | xunit",
    "summary": "Class TestClassStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestClassStarting. [JsonTypeID(\"test-class-starting\")] public sealed class TestClassStarting : TestClassMessage, ITestClassStarting, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestClassMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestClassStarting Implements ITestClassStarting ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestClassMetadata Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestClassName Gets the full name of the test class (i.e., FullName). public required string TestClassName { get; set; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. Will return null for classes not residing in a namespace. public required string? TestClassNamespace { get; set; } Property Value string TestClassSimpleName Gets the simple name of the test class (the class name without namespace). public required string TestClassSimpleName { get; set; } Property Value string Traits Gets the trait values associated with this test class (and the test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCleanupFailure.html",
    "title": "Class TestCleanupFailure | xunit",
    "summary": "Class TestCleanupFailure Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCleanupFailure. [JsonTypeID(\"test-cleanup-failure\")] public sealed class TestCleanupFailure : TestMessage, ITestCleanupFailure, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestCleanupFailure Implements ITestCleanupFailure ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string, string, string?, string?, string, string) Creates a new ITestCleanupFailure constructed from an Exception object. public static ITestCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID, string testCaseUniqueID, string testUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method testCaseUniqueID string The unique ID of the test case testUniqueID string The unique ID of the test Returns ITestCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionCleanupFailure.html",
    "title": "Class TestCollectionCleanupFailure | xunit",
    "summary": "Class TestCollectionCleanupFailure Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCollectionCleanupFailure. [JsonTypeID(\"test-collection-cleanup-failure\")] public sealed class TestCollectionCleanupFailure : TestCollectionMessage, ITestCollectionCleanupFailure, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestCollectionCleanupFailure Implements ITestCollectionCleanupFailure ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string, string) Creates a new ITestCollectionCleanupFailure constructed from an Exception object. public static ITestCollectionCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon Returns ITestCollectionCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionComparer-1.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionComparer-1.html",
    "title": "Class TestCollectionComparer<TTestCollection> | xunit",
    "summary": "Class TestCollectionComparer<TTestCollection> Namespace Xunit.v3 Assembly xunit.v3.core.dll An implementation of IEqualityComparer<T> for ITestCollection. Compares the IDs of the test collections. public class TestCollectionComparer<TTestCollection> : IEqualityComparer<TTestCollection> where TTestCollection : class, ITestCollection Type Parameters TTestCollection The type of the test collection. Must derive from ITestCollection. Inheritance object TestCollectionComparer<TTestCollection> Implements IEqualityComparer<TTestCollection> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Instance The singleton instance of the comparer. public static readonly TestCollectionComparer<TTestCollection> Instance Field Value TestCollectionComparer<TTestCollection> Methods Equals(TTestCollection?, TTestCollection?) public bool Equals(TTestCollection? x, TTestCollection? y) Parameters x TTestCollection y TTestCollection Returns bool GetHashCode(TTestCollection) public int GetHashCode(TTestCollection obj) Parameters obj TTestCollection Returns int"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionFactoryBase.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionFactoryBase.html",
    "title": "Class TestCollectionFactoryBase | xunit",
    "summary": "Class TestCollectionFactoryBase Namespace Xunit.v3 Assembly xunit.v3.core.dll Base class with common functionality between CollectionPerAssemblyTestCollectionFactory and CollectionPerClassTestCollectionFactory. public abstract class TestCollectionFactoryBase : IXunitTestCollectionFactory Inheritance object TestCollectionFactoryBase Implements IXunitTestCollectionFactory Derived CollectionPerAssemblyTestCollectionFactory CollectionPerClassTestCollectionFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCollectionFactoryBase(IXunitTestAssembly) Base class with common functionality between CollectionPerAssemblyTestCollectionFactory and CollectionPerClassTestCollectionFactory. protected TestCollectionFactoryBase(IXunitTestAssembly testAssembly) Parameters testAssembly IXunitTestAssembly The test assembly Properties DisplayName Gets the display name for the test collection factory. This information is shown to the end user as part of the description of the test environment. public abstract string DisplayName { get; } Property Value string TestAssembly Gets the test assembly. protected IXunitTestAssembly TestAssembly { get; } Property Value IXunitTestAssembly Methods Get(Type) Gets the test collection for a given test class. public IXunitTestCollection Get(Type testClass) Parameters testClass Type The test class. Returns IXunitTestCollection The test collection. GetDefaultTestCollection(Type) Override to provide a test collection when the given test class is not decorated with any test collection attributes. protected abstract IXunitTestCollection GetDefaultTestCollection(Type testClass) Parameters testClass Type The test class Returns IXunitTestCollection"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionFinished.html",
    "title": "Class TestCollectionFinished | xunit",
    "summary": "Class TestCollectionFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCollectionFinished. [JsonTypeID(\"test-collection-finished\")] public sealed class TestCollectionFinished : TestCollectionMessage, ITestCollectionFinished, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestCollectionFinished Implements ITestCollectionFinished ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionMessage.html",
    "title": "Class TestCollectionMessage | xunit",
    "summary": "Class TestCollectionMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCollectionMessage. public abstract class TestCollectionMessage : TestAssemblyMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage Implements ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestClassMessage TestCollectionCleanupFailure TestCollectionFinished TestCollectionStarting Inherited Members TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCollectionUniqueID Gets the test collection's unique ID. Can be used to correlate test messages with the appropriate test collection that they're related to. public required string TestCollectionUniqueID { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionRunner-4.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionRunner-4.html",
    "title": "Class TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> | xunit",
    "summary": "Class TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running tests in a test collection. It groups the tests by test class, and then runs the individual test classes. public abstract class TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> where TContext : TestCollectionRunnerContext<TTestCollection, TTestCase> where TTestCollection : class, ITestCollection where TTestClass : class, ITestClass where TTestCase : class, ITestCase Type Parameters TContext The context type used by the runner TTestCollection The type of the test collection used by the test framework. Must derive from ITestCollection. TTestClass The type of the test class used by the test framework. Must derive from ITestClass. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> Derived XunitTestCollectionRunnerBase<TContext, TTestCollection, TTestClass, TTestCase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCollectionRunner() Initializes a new instance of the TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> class. protected TestCollectionRunner() Methods FailTestClass(TContext, TTestClass?, IReadOnlyCollection<TTestCase>, Exception) Fails the tests from a test class due to an exception. protected virtual ValueTask<RunSummary> FailTestClass(TContext ctxt, TTestClass? testClass, IReadOnlyCollection<TTestCase> testCases, Exception exception) Parameters ctxt TContext The context that describes the current test collection testClass TTestClass The test class that is being failed. May be null for test cases that do not support classes and methods. testCases IReadOnlyCollection<TTestCase> The test cases to be failed. exception Exception The exception that was caused during startup. Returns ValueTask<RunSummary> Returns summary information about the tests that were failed. Remarks By default, using XunitRunnerHelper to fail the test cases. OnTestCollectionCleanupFailure(TContext, Exception) This method is called when an exception was thrown while cleaning up, after the test collection has run. By default, this sends TestCollectionCleanupFailure. protected virtual ValueTask<bool> OnTestCollectionCleanupFailure(TContext ctxt, Exception exception) Parameters ctxt TContext The context that describes the current test collection exception Exception The exception that caused the cleanup failure (may be an instance of AggregateException if more than one exception occurred). Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown are converted into fatal exception messages (via IErrorMessage) and sent to the message bus in ctxt. OnTestCollectionFinished(TContext, RunSummary) This method will be called when the test collection has finished running. By default this sends TestCollectionFinished. Override this to enable any extensibility related to test collection finish. protected virtual ValueTask<bool> OnTestCollectionFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test collection summary RunSummary The execution summary for the test collection Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test collection cleanup failure. OnTestCollectionStarting(TContext) This method will be called before the test collection has started running. By default this sends TestCollectionStarting. Override this to enable any extensibility related to test collection start. protected virtual ValueTask<bool> OnTestCollectionStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test collection Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test collection failure (and will prevent the test collection from running). Even if this method records exceptions, OnTestCollectionFinished(TContext, RunSummary) will be called. Run(TContext) Runs the tests in the test collection. protected ValueTask<RunSummary> Run(TContext ctxt) Parameters ctxt TContext The context that describes the current test collection Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestClass(TContext, TTestClass?, IReadOnlyCollection<TTestCase>) Override this method to run the tests in an individual test class. protected abstract ValueTask<RunSummary> RunTestClass(TContext ctxt, TTestClass? testClass, IReadOnlyCollection<TTestCase> testCases) Parameters ctxt TContext The context that describes the current test collection testClass TTestClass The test class to be run. May be null for test cases that do not support classes and methods. testCases IReadOnlyCollection<TTestCase> The test cases to be run. Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestClasses(TContext, Exception?) Runs the list of test classes. By default, groups the tests by class and runs them synchronously. protected virtual ValueTask<RunSummary> RunTestClasses(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test collection exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run. SetTestContext(TContext, TestEngineStatus) Sets the current TestContext for the current test collection and the given test collection status. protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testCollectionStatus) Parameters ctxt TContext The context that describes the current test collection testCollectionStatus TestEngineStatus The current test collection status."
  },
  "v3/2.0.0/Xunit.v3.TestCollectionRunnerContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionRunnerContext-2.html",
    "title": "Class TestCollectionRunnerContext<TTestCollection, TTestCase> | xunit",
    "summary": "Class TestCollectionRunnerContext<TTestCollection, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>. public class TestCollectionRunnerContext<TTestCollection, TTestCase> : ContextBase, IAsyncLifetime, IAsyncDisposable where TTestCollection : class, ITestCollection where TTestCase : class, ITestCase Type Parameters TTestCollection The type of the test collection used by the test framework. Must derive from ITestCollection. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object ContextBase TestCollectionRunnerContext<TTestCollection, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> Inherited Members ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestCollectionRunnerContext(TTestCollection, IReadOnlyCollection<TTestCase>, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource) Base context class for TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>. public TestCollectionRunnerContext(TTestCollection testCollection, IReadOnlyCollection<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters testCollection TTestCollection The test collection testCases IReadOnlyCollection<TTestCase> The test cases from the test collection explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties TestCases Gets the test cases that belong to the test collection. public IReadOnlyCollection<TTestCase> TestCases { get; protected set; } Property Value IReadOnlyCollection<TTestCase> TestCollection Gets the test collection that is being executed. public TTestCollection TestCollection { get; } Property Value TTestCollection"
  },
  "v3/2.0.0/Xunit.v3.TestCollectionStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestCollectionStarting.html",
    "title": "Class TestCollectionStarting | xunit",
    "summary": "Class TestCollectionStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestCollectionStarting. [JsonTypeID(\"test-collection-starting\")] public sealed class TestCollectionStarting : TestCollectionMessage, ITestCollectionStarting, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestCollectionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestCollectionStarting Implements ITestCollectionStarting ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestCollectionMetadata Inherited Members TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestCollectionClassName Gets the type that the test collection was defined with, if available; may be null if the test collection didn't have a definition type. public required string? TestCollectionClassName { get; set; } Property Value string TestCollectionDisplayName Gets the display name of the test collection. public required string TestCollectionDisplayName { get; set; } Property Value string Traits Gets the trait values associated with this test collection (and the test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestContextAccessor.html": {
    "href": "v3/2.0.0/Xunit.v3.TestContextAccessor.html",
    "title": "Class TestContextAccessor | xunit",
    "summary": "Class TestContextAccessor Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestContextAccessor. public class TestContextAccessor : ITestContextAccessor Inheritance object TestContextAccessor Implements ITestContextAccessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Instance Get the singleton instance of TestContextAccessor. public static TestContextAccessor Instance Field Value TestContextAccessor Properties Current Gets the current test context. If called outside of the text discovery or execution path, will return a test context that is in the Unknown stage. The current test context is a \"snapshot in time\" for when this/ property is called, so do not cache the instance across a single method boundary (or else/ you run the risk of having an out-of-date context). public ITestContext Current { get; } Property Value ITestContext"
  },
  "v3/2.0.0/Xunit.v3.TestFailed.html": {
    "href": "v3/2.0.0/Xunit.v3.TestFailed.html",
    "title": "Class TestFailed | xunit",
    "summary": "Class TestFailed Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestFailed. [JsonTypeID(\"test-failed\")] public sealed class TestFailed : TestResultMessage, ITestFailed, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestFailed Implements ITestFailed ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata IErrorMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Cause Gets the cause of the test failure. public required FailureCause Cause { get; set; } Property Value FailureCause ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string, string, string?, string?, string, string, decimal, string?, string[]?, DateTimeOffset?) Creates a new ITestFailed constructed from an Exception object. public static ITestFailed FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID, string testCaseUniqueID, string testUniqueID, decimal executionTime, string? output, string[]? warnings, DateTimeOffset? finishTime = null) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method testCaseUniqueID string The unique ID of the test case testUniqueID string The unique ID of the test executionTime decimal The execution time of the test (may be null if the test wasn't executed) output string The (optional) output from the test warnings string[] The (optional) warnings that were recorded during test execution finishTime DateTimeOffset? The time when the test finished executing; defaults to UtcNow Returns ITestFailed Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestFinished.html",
    "title": "Class TestFinished | xunit",
    "summary": "Class TestFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestFinished. [JsonTypeID(\"test-finished\")] public sealed class TestFinished : TestResultMessage, ITestFinished, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestFinished Implements ITestFinished ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestResultMessage.ToString() TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Attachments Gets any attachments that were added to the test result via Xunit.TestContext.AddAttachment. public required IReadOnlyDictionary<string, TestAttachment> Attachments { get; set; } Property Value IReadOnlyDictionary<string, TestAttachment> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestFramework.html": {
    "href": "v3/2.0.0/Xunit.v3.TestFramework.html",
    "title": "Class TestFramework | xunit",
    "summary": "Class TestFramework Namespace Xunit.v3 Assembly xunit.v3.core.dll A default implementation of ITestFramework that tracks objects to be disposed when the framework is disposed. The discoverer and executor are automatically tracked for disposal, since those interfaces mandate an implementation of IDisposable. public abstract class TestFramework : ITestFramework, IAsyncDisposable Inheritance object TestFramework Implements ITestFramework IAsyncDisposable Derived XunitTestFramework Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties DisposalTracker Gets the disposal tracker for the test framework. protected DisposalTracker DisposalTracker { get; } Property Value DisposalTracker TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public abstract string TestFrameworkDisplayName { get; } Property Value string TestPipelineStartup Gets the value that was set for the test pipeline startup, if one was present. protected ITestPipelineStartup? TestPipelineStartup { get; } Property Value ITestPipelineStartup Methods CreateDiscoverer(Assembly) Override this method to provide the implementation of ITestFrameworkDiscoverer. protected abstract ITestFrameworkDiscoverer CreateDiscoverer(Assembly assembly) Parameters assembly Assembly The assembly that is being discovered. Returns ITestFrameworkDiscoverer Returns the test framework discoverer. CreateExecutor(Assembly) Override this method to provide the implementation of ITestFrameworkExecutor. protected abstract ITestFrameworkExecutor CreateExecutor(Assembly assembly) Parameters assembly Assembly The assembly that is being executed. Returns ITestFrameworkExecutor Returns the test framework executor. DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask GetDiscoverer(Assembly) Get a test discoverer. public ITestFrameworkDiscoverer GetDiscoverer(Assembly assembly) Parameters assembly Assembly The assembly to discover tests from. Returns ITestFrameworkDiscoverer The test discoverer. GetExecutor(Assembly) Get a test executor. public ITestFrameworkExecutor GetExecutor(Assembly assembly) Parameters assembly Assembly The assembly to run tests from. Returns ITestFrameworkExecutor The test executor. SetTestPipelineStartup(ITestPipelineStartup) Will be invoked by the test pipeline when the user has provided a startup class. Test frameworks may choose to use this in any way they see fit. public void SetTestPipelineStartup(ITestPipelineStartup pipelineStartup) Parameters pipelineStartup ITestPipelineStartup"
  },
  "v3/2.0.0/Xunit.v3.TestFrameworkDiscoverer-1.html": {
    "href": "v3/2.0.0/Xunit.v3.TestFrameworkDiscoverer-1.html",
    "title": "Class TestFrameworkDiscoverer<TTestClass> | xunit",
    "summary": "Class TestFrameworkDiscoverer<TTestClass> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base implementation of ITestFrameworkDiscoverer that supports test filtering and runs the discovery process on a thread pool thread. public abstract class TestFrameworkDiscoverer<TTestClass> : ITestFrameworkDiscoverer, IAsyncDisposable where TTestClass : class, ITestClass Type Parameters TTestClass The test class object model type. Must derive from ITestClass. Inheritance object TestFrameworkDiscoverer<TTestClass> Implements ITestFrameworkDiscoverer IAsyncDisposable Derived XunitTestFrameworkDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestFrameworkDiscoverer(ITestAssembly) A base implementation of ITestFrameworkDiscoverer that supports test filtering and runs the discovery process on a thread pool thread. protected TestFrameworkDiscoverer(ITestAssembly testAssembly) Parameters testAssembly ITestAssembly Properties DisposalTracker Gets the disposal tracker for the test framework discoverer. protected DisposalTracker DisposalTracker { get; } Property Value DisposalTracker TestAssembly Gets the test assembly. public ITestAssembly TestAssembly { get; } Property Value ITestAssembly Methods CreateTestClass(Type) Implement this method to create a test class for the given CLR type. protected abstract ValueTask<TTestClass> CreateTestClass(Type @class) Parameters class Type The CLR type. Returns ValueTask<TTestClass> The test class. DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask Find(Func<ITestCase, ValueTask<bool>>, ITestFrameworkDiscoveryOptions, Type[]?, CancellationToken?) Finds tests inside an assembly. Calls the callback for each discovered test. public virtual ValueTask Find(Func<ITestCase, ValueTask<bool>> callback, ITestFrameworkDiscoveryOptions discoveryOptions, Type[]? types = null, CancellationToken? cancellationToken = null) Parameters callback Func<ITestCase, ValueTask<bool>> Called for each discovered test. Return true to continue test discovery; return false to cancel test discovery. discoveryOptions ITestFrameworkDiscoveryOptions The options used by the test framework during discovery. types Type[] When passed a non-null collection, only returns tests found from one of the provided types; when passed a null collection, discovers all tests in the assembly. cancellationToken CancellationToken? The optional cancellation token which can be used to cancel the test discovery process. Returns ValueTask FindTestsForType(TTestClass, ITestFrameworkDiscoveryOptions, Func<ITestCase, ValueTask<bool>>) Core implementation to discover unit tests in a given test class. protected abstract ValueTask<bool> FindTestsForType(TTestClass testClass, ITestFrameworkDiscoveryOptions discoveryOptions, Func<ITestCase, ValueTask<bool>> discoveryCallback) Parameters testClass TTestClass The test class. discoveryOptions ITestFrameworkDiscoveryOptions The options used by the test framework during discovery. discoveryCallback Func<ITestCase, ValueTask<bool>> The callback that is called for each discovered test case. The return value of the callback indicates the same thing as the return value of this function: return true to continue discovery, or false to halt it. Returns ValueTask<bool> Returns true if discovery should continue; false otherwise. GetExportedTypes() Override this to provide a list of the exported types in the assembly. protected abstract Type[] GetExportedTypes() Returns Type[] IsValidTestClass(Type) Determines if a type should be used for discovery. Can be used to filter out types that are not desirable. The default implementation filters out abstract (non-static) classes. protected virtual bool IsValidTestClass(Type type) Parameters type Type The type. Returns bool Returns true if the type can contain tests; false, otherwise."
  },
  "v3/2.0.0/Xunit.v3.TestFrameworkExecutor-1.html": {
    "href": "v3/2.0.0/Xunit.v3.TestFrameworkExecutor-1.html",
    "title": "Class TestFrameworkExecutor<TTestCase> | xunit",
    "summary": "Class TestFrameworkExecutor<TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll A reusable implementation of ITestFrameworkExecutor which contains the basic behavior for running tests. public abstract class TestFrameworkExecutor<TTestCase> : ITestFrameworkExecutor, IAsyncDisposable where TTestCase : ITestCase Type Parameters TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestFrameworkExecutor<TTestCase> Implements ITestFrameworkExecutor IAsyncDisposable Derived XunitTestFrameworkExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestFrameworkExecutor(ITestAssembly) A reusable implementation of ITestFrameworkExecutor which contains the basic behavior for running tests. protected TestFrameworkExecutor(ITestAssembly testAssembly) Parameters testAssembly ITestAssembly The test assembly. Properties DisposalTracker Gets the disposal tracker for the test framework discoverer. protected DisposalTracker DisposalTracker { get; } Property Value DisposalTracker TestAssembly Gets the test assembly for execution. protected ITestAssembly TestAssembly { get; } Property Value ITestAssembly Methods CreateDiscoverer() Override to create a test framework discoverer that can be used to discover tests when the user asks to run all test. protected abstract ITestFrameworkDiscoverer CreateDiscoverer() Returns ITestFrameworkDiscoverer The test framework discoverer DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask RunTestCases(IReadOnlyCollection<TTestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken) Runs selected test cases in the assembly. public abstract ValueTask RunTestCases(IReadOnlyCollection<TTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken cancellationToken) Parameters testCases IReadOnlyCollection<TTestCase> The test cases to run. executionMessageSink IMessageSink The message sink to report results back to. executionOptions ITestFrameworkExecutionOptions The options to be used during test execution. cancellationToken CancellationToken The cancellation token which can be used to cancel the test execution process. Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.TestIntrospectionHelper.html": {
    "href": "v3/2.0.0/Xunit.v3.TestIntrospectionHelper.html",
    "title": "Class TestIntrospectionHelper | xunit",
    "summary": "Class TestIntrospectionHelper Namespace Xunit.v3 Assembly xunit.v3.core.dll Helper functions for retrieving and interpreting test and test case details from various sources (like IFactAttribute, IDataAttribute, and others). public static class TestIntrospectionHelper Inheritance object TestIntrospectionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetTestCaseDetails(ITestFrameworkDiscoveryOptions, IXunitTestMethod, IFactAttribute, object?[]?, int?, string?) Retrieve the details for a test case that is a test method decorated with an instance of IFactAttribute (or derived). public static (string TestCaseDisplayName, bool Explicit, Type[]? SkipExceptions, string? SkipReason, Type? SkipType, string? SkipUnless, string? SkipWhen, int Timeout, string UniqueID, IXunitTestMethod ResolvedTestMethod) GetTestCaseDetails(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute, object?[]? testMethodArguments = null, int? timeout = null, string? baseDisplayName = null) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The options used for discovery. testMethod IXunitTestMethod The test method. factAttribute IFactAttribute The fact attribute that decorates the test method. testMethodArguments object[] The optional test method arguments. timeout int? The optional timeout; if not provided, will be looked up from the factAttribute. baseDisplayName string The optional base display name for the test method. Returns (string TestCaseDisplayName, bool Explicit, Type[] SkipExceptions, string SkipReason, Type SkipType, string SkipUnless, string SkipWhen, int Timeout, string UniqueID, IXunitTestMethod ResolvedTestMethod) GetTestCaseDetailsForTheoryDataRow(ITestFrameworkDiscoveryOptions, IXunitTestMethod, ITheoryAttribute, ITheoryDataRow, object?[]) Retrieve the details for a test case that is a test method decorated with an instance of ITheoryAttribute (or derived) when you have a data row. The data row is used to augment the returned information (traits, skip reason, etc.). public static (string TestCaseDisplayName, bool Explicit, Type[]? SkipExceptions, string? SkipReason, Type? SkipType, string? SkipUnless, string? SkipWhen, int Timeout, string UniqueID, IXunitTestMethod ResolvedTestMethod) GetTestCaseDetailsForTheoryDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, ITheoryAttribute theoryAttribute, ITheoryDataRow dataRow, object?[] testMethodArguments) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The options used for discovery. testMethod IXunitTestMethod The test method. theoryAttribute ITheoryAttribute The theory attribute that decorates the test method. dataRow ITheoryDataRow The data row for the test. testMethodArguments object[] The test method arguments obtained from the dataRow after being type-resolved. Returns (string TestCaseDisplayName, bool Explicit, Type[] SkipExceptions, string SkipReason, Type SkipType, string SkipUnless, string SkipWhen, int Timeout, string UniqueID, IXunitTestMethod ResolvedTestMethod) GetTraits(IXunitTestMethod, ITheoryDataRow?) Merges the traits from the test method (which already reflect the traits from the test assembly, test collection, and test class) with the traits attached to the data row. public static Dictionary<string, HashSet<string>> GetTraits(IXunitTestMethod testMethod, ITheoryDataRow? dataRow) Parameters testMethod IXunitTestMethod The test method to get traits from. dataRow ITheoryDataRow The data row to get traits from. Returns Dictionary<string, HashSet<string>> The traits dictionary MergeTraitsInto(Dictionary<string, HashSet<string>>, string[]?) Merges string-array traits (like from Traits) into an existing traits dictionary. public static void MergeTraitsInto(Dictionary<string, HashSet<string>> traits, string[]? additionalTraits) Parameters traits Dictionary<string, HashSet<string>> The existing traits dictionary. additionalTraits string[] The additional traits to merge."
  },
  "v3/2.0.0/Xunit.v3.TestMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMessage.html",
    "title": "Class TestMessage | xunit",
    "summary": "Class TestMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestMessage. public abstract class TestMessage : TestCaseMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage Implements ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived AfterTestFinished AfterTestStarting BeforeTestFinished BeforeTestStarting TestClassConstructionFinished TestClassConstructionStarting TestClassDisposeFinished TestClassDisposeStarting TestCleanupFailure TestOutput TestResultMessage TestStarting Inherited Members TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestUniqueID Gets the test's unique ID. Can be used to correlate test messages with the appropriate test that they're related to. public required string TestUniqueID { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestMethodCleanupFailure.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodCleanupFailure.html",
    "title": "Class TestMethodCleanupFailure | xunit",
    "summary": "Class TestMethodCleanupFailure Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestMethodCleanupFailure. [JsonTypeID(\"test-method-cleanup-failure\")] public sealed class TestMethodCleanupFailure : TestMethodMessage, ITestMethodCleanupFailure, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IErrorMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestMethodCleanupFailure Implements ITestMethodCleanupFailure ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IErrorMetadata Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExceptionParentIndices Gets the parent exception index(es) for the exception(s); a -1 indicates that the exception in question has no parent. public required int[] ExceptionParentIndices { get; set; } Property Value int[] ExceptionTypes Gets the fully-qualified type name(s) of the exception(s). public required string?[] ExceptionTypes { get; set; } Property Value string[] Messages Gets the message(s) of the exception(s). public required string[] Messages { get; set; } Property Value string[] StackTraces Gets the stack trace(s) of the exception(s). public required string?[] StackTraces { get; set; } Property Value string[] Methods FromException(Exception, string, string, string?, string?) Creates a new ITestMethodCleanupFailure constructed from an Exception object. public static ITestMethodCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string? testClassUniqueID, string? testMethodUniqueID) Parameters ex Exception The exception to use assemblyUniqueID string The unique ID of the assembly testCollectionUniqueID string The unique ID of the test collectioon testClassUniqueID string The (optional) unique ID of the test class testMethodUniqueID string The (optional) unique ID of the test method Returns ITestMethodCleanupFailure Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestMethodComparer.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodComparer.html",
    "title": "Class TestMethodComparer | xunit",
    "summary": "Class TestMethodComparer Namespace Xunit.v3 Assembly xunit.v3.core.dll An implementation of IEqualityComparer<T> for ITestMethod. Compares the names of the methods. public class TestMethodComparer : IEqualityComparer<ITestMethod?> Inheritance object TestMethodComparer Implements IEqualityComparer<ITestMethod> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Fields Instance The singleton instance of the comparer. public static readonly TestMethodComparer Instance Field Value TestMethodComparer Methods Equals(ITestMethod?, ITestMethod?) public bool Equals(ITestMethod? x, ITestMethod? y) Parameters x ITestMethod y ITestMethod Returns bool GetHashCode(ITestMethod?) public int GetHashCode(ITestMethod? obj) Parameters obj ITestMethod Returns int"
  },
  "v3/2.0.0/Xunit.v3.TestMethodFinished.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodFinished.html",
    "title": "Class TestMethodFinished | xunit",
    "summary": "Class TestMethodFinished Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestMethodFinished. [JsonTypeID(\"test-method-finished\")] public sealed class TestMethodFinished : TestMethodMessage, ITestMethodFinished, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionSummaryMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestMethodFinished Implements ITestMethodFinished ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionSummaryMetadata Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime Gets the execution time (in seconds) for this execution. public required decimal ExecutionTime { get; set; } Property Value decimal TestsFailed Gets the number of failing tests. public required int TestsFailed { get; set; } Property Value int TestsNotRun Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run, or non-expicit tests when non-explicit tests are not run. public required int TestsNotRun { get; set; } Property Value int TestsSkipped Gets the number of skipped tests. public required int TestsSkipped { get; set; } Property Value int TestsTotal Gets the total number of tests run and not run. public required int TestsTotal { get; set; } Property Value int Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestMethodMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodMessage.html",
    "title": "Class TestMethodMessage | xunit",
    "summary": "Class TestMethodMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestMethodMessage. public abstract class TestMethodMessage : TestClassMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage Implements ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Derived TestCaseMessage TestMethodCleanupFailure TestMethodFinished TestMethodStarting Inherited Members TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestCollectionMessage.ValidateObjectState(HashSet<string>) TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties TestMethodUniqueID Gets the test method's unique ID. Can be used to correlate test messages with the appropriate test method that they're related to. Will be null if the test did not originate from a method. public required string? TestMethodUniqueID { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string"
  },
  "v3/2.0.0/Xunit.v3.TestMethodRunner-3.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodRunner-3.html",
    "title": "Class TestMethodRunner<TContext, TTestMethod, TTestCase> | xunit",
    "summary": "Class TestMethodRunner<TContext, TTestMethod, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running tests in a test method. public abstract class TestMethodRunner<TContext, TTestMethod, TTestCase> where TContext : TestMethodRunnerContext<TTestMethod, TTestCase> where TTestMethod : class, ITestMethod where TTestCase : class, ITestCase Type Parameters TContext The context type used by the runner TTestMethod The type of the test method used by the test framework. Must derive from ITestMethod. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object TestMethodRunner<TContext, TTestMethod, TTestCase> Derived XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestMethodRunner() Initializes a new instance of the TestMethodRunner<TContext, TTestMethod, TTestCase> class. protected TestMethodRunner() Methods FailTestCase(TContext, TTestCase, Exception) Override this method to fail an individual test case. protected virtual ValueTask<RunSummary> FailTestCase(TContext ctxt, TTestCase testCase, Exception exception) Parameters ctxt TContext The context that describes the current test method testCase TTestCase The test case to be failed. exception Exception The exception that was caused during startup. Returns ValueTask<RunSummary> Returns summary information about the test case run. Remarks By default, uses XunitRunnerHelper to fail the test cases. OnTestMethodCleanupFailure(TContext, Exception) This method is called when an exception was thrown while cleaning up, after the test method has run. By default, this sends TestMethodCleanupFailure. protected virtual ValueTask<bool> OnTestMethodCleanupFailure(TContext ctxt, Exception exception) Parameters ctxt TContext The context that describes the current test method exception Exception The exception that caused the cleanup failure (may be an instance of AggregateException if more than one exception occurred). Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown are converted into fatal exception messages (via IErrorMessage) and sent to the message bus in ctxt. OnTestMethodFinished(TContext, RunSummary) This method will be called when the test method has finished running. By default, this sends TestMethodFinished. Override this to enable any extensibility related to test method finish. protected virtual ValueTask<bool> OnTestMethodFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test method summary RunSummary The execution summary for the test method Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test method cleanup failure. OnTestMethodStarting(TContext) This method will be called before the test method has started running. By default, this sends TestMethodStarting. Override this to enable any extensibility related to test method start. protected virtual ValueTask<bool> OnTestMethodStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test method Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test method failure (and will prevent the test method from running). Even if this method records exceptions, OnTestMethodFinished(TContext, RunSummary) will be called. Run(TContext) Runs the tests in the test method. protected ValueTask<RunSummary> Run(TContext ctxt) Parameters ctxt TContext The context that describes the current test method Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestCase(TContext, TTestCase) Override this method to run an individual test case. protected abstract ValueTask<RunSummary> RunTestCase(TContext ctxt, TTestCase testCase) Parameters ctxt TContext The context that describes the current test method testCase TTestCase The test case to be run. Returns ValueTask<RunSummary> Returns summary information about the test case run. RunTestCases(TContext, Exception?) Runs the list of test cases. By default, it runs the cases in order, synchronously. protected virtual ValueTask<RunSummary> RunTestCases(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test method exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run. SetTestContext(TContext, TestEngineStatus) Sets the current TestContext for the current test method and the given test method status. protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testMethodStatus) Parameters ctxt TContext The context that describes the current test method testMethodStatus TestEngineStatus The current test method status. Remarks This method must never throw. Behavior is undefined if it does. Instead, exceptions that occur should be recorded in the aggregator in ctxt and will be reflected in a way that's appropriate based on when this method is called."
  },
  "v3/2.0.0/Xunit.v3.TestMethodRunnerContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodRunnerContext-2.html",
    "title": "Class TestMethodRunnerContext<TTestMethod, TTestCase> | xunit",
    "summary": "Class TestMethodRunnerContext<TTestMethod, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestMethodRunner<TContext, TTestMethod, TTestCase>. public class TestMethodRunnerContext<TTestMethod, TTestCase> : ContextBase, IAsyncLifetime, IAsyncDisposable where TTestMethod : class, ITestMethod where TTestCase : class, ITestCase Type Parameters TTestMethod The type of the test method used by the test framework. Must derive from ITestMethod. TTestCase The type of the test case used by the test framework. Must derive from ITestCase. Inheritance object ContextBase TestMethodRunnerContext<TTestMethod, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> Inherited Members ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestMethodRunnerContext(TTestMethod, IReadOnlyCollection<TTestCase>, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource) Base context class for TestMethodRunner<TContext, TTestMethod, TTestCase>. public TestMethodRunnerContext(TTestMethod testMethod, IReadOnlyCollection<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters testMethod TTestMethod The test method testCases IReadOnlyCollection<TTestCase> The test cases from the test method explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties TestCases Gets the test cases that are derived from this test method. public IReadOnlyCollection<TTestCase> TestCases { get; } Property Value IReadOnlyCollection<TTestCase> TestMethod Gets the test method that is being executed. public TTestMethod TestMethod { get; } Property Value TTestMethod"
  },
  "v3/2.0.0/Xunit.v3.TestMethodStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestMethodStarting.html",
    "title": "Class TestMethodStarting | xunit",
    "summary": "Class TestMethodStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestMethodStarting. [JsonTypeID(\"test-method-starting\")] public sealed class TestMethodStarting : TestMethodMessage, ITestMethodStarting, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestMethodMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestMethodStarting Implements ITestMethodStarting ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestMethodMetadata Inherited Members TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties MethodName Gets the name of the test method that is associated with this message. public required string MethodName { get; set; } Property Value string Traits Gets the trait values associated with this test method (and the test class, test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestNotRun.html": {
    "href": "v3/2.0.0/Xunit.v3.TestNotRun.html",
    "title": "Class TestNotRun | xunit",
    "summary": "Class TestNotRun Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestNotRun. [JsonTypeID(\"test-not-run\")] public sealed class TestNotRun : TestResultMessage, ITestNotRun, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestNotRun Implements ITestNotRun ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestResultMessage.ToString() TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.TestOutput.html": {
    "href": "v3/2.0.0/Xunit.v3.TestOutput.html",
    "title": "Class TestOutput | xunit",
    "summary": "Class TestOutput Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestOutput. [JsonTypeID(\"test-output\")] public sealed class TestOutput : TestMessage, ITestOutput, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestOutput Implements ITestOutput ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Output Gets the line of output. public required string Output { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestOutputHelper.html": {
    "href": "v3/2.0.0/Xunit.v3.TestOutputHelper.html",
    "title": "Class TestOutputHelper | xunit",
    "summary": "Class TestOutputHelper Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestOutputHelper. public class TestOutputHelper : ITestOutputHelper Inheritance object TestOutputHelper Implements ITestOutputHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Output Gets the output provided by the test. public string Output { get; } Property Value string Remarks Note: This also ensures that any partial output that hasn't been reported yet gets reported. Calling in the middle of test execution is therefore not recommend. Methods Initialize(IMessageBus, ITest) Initialize the test output helper with information about a test. public void Initialize(IMessageBus messageBus, ITest test) Parameters messageBus IMessageBus test ITest Uninitialize() Resets the test output helper to its uninitialized state. public void Uninitialize() Write(string) Adds text to the output. public void Write(string message) Parameters message string The message Write(string, params object[]) Adds formatted text to the output. public void Write(string format, params object[] args) Parameters format string The message format args object[] The format arguments WriteLine(string) Adds text to the output, followed by NewLine. public void WriteLine(string message) Parameters message string The message WriteLine(string, params object[]) Adds formatted text to the output, followed by NewLine. public void WriteLine(string format, params object[] args) Parameters format string The message format args object[] The format arguments"
  },
  "v3/2.0.0/Xunit.v3.TestPassed.html": {
    "href": "v3/2.0.0/Xunit.v3.TestPassed.html",
    "title": "Class TestPassed | xunit",
    "summary": "Class TestPassed Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestPassed. [JsonTypeID(\"test-passed\")] public sealed class TestPassed : TestResultMessage, ITestPassed, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestPassed Implements ITestPassed ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestResultMessage.ToString() TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string)"
  },
  "v3/2.0.0/Xunit.v3.TestPipelineStartupAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.TestPipelineStartupAttribute.html",
    "title": "Class TestPipelineStartupAttribute | xunit",
    "summary": "Class TestPipelineStartupAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code that runs during the test pipeline startup and shutdown (including both discovery and execution). [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)] public sealed class TestPipelineStartupAttribute : Attribute, ITestPipelineStartupAttribute Inheritance object Attribute TestPipelineStartupAttribute Implements ITestPipelineStartupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestPipelineStartupAttribute(Type) Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code that runs during the test pipeline startup and shutdown (including both discovery and execution). public TestPipelineStartupAttribute(Type testPipelineStartupType) Parameters testPipelineStartupType Type Properties TestPipelineStartupType Gets the test pipeline startup type. Must implement ITestPipelineStartup. public Type TestPipelineStartupType { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.TestResultMessage.html": {
    "href": "v3/2.0.0/Xunit.v3.TestResultMessage.html",
    "title": "Class TestResultMessage | xunit",
    "summary": "Class TestResultMessage Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestResultMessage. public abstract class TestResultMessage : TestMessage, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage Implements ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Derived TestFailed TestFinished TestNotRun TestPassed TestSkipped Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ValidatePropertyIsNotNull(object, string, HashSet<string>) MessageSinkMessage.ToDisplayString(string[]) MessageSinkMessage.ToDisplayString<T>(T[]) MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties ExecutionTime The time spent executing the test, in seconds. Will be 0 if the test was not executed. public required decimal ExecutionTime { get; set; } Property Value decimal FinishTime Gets the date and time when the test execution finished. public required DateTimeOffset FinishTime { get; set; } Property Value DateTimeOffset Output The captured output of the test. Will be Empty if there was no output. public required string Output { get; set; } Property Value string Warnings Gets a list of the warning messages that were recorded during execution. Will be null if there were no warnings. public required string[]? Warnings { get; set; } Property Value string[] Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestRunner-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestRunner-2.html",
    "title": "Class TestRunner<TContext, TTest> | xunit",
    "summary": "Class TestRunner<TContext, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running a test. This includes support for skipping tests. public abstract class TestRunner<TContext, TTest> : TestRunnerBase<TContext, TTest> where TContext : TestRunnerContext<TTest> where TTest : class, ITest Type Parameters TContext The context type used by the runner TTest The test type used by the test framework. Must derive from ITest. Inheritance object TestRunnerBase<TContext, TTest> TestRunner<TContext, TTest> Derived XunitTestRunnerBase<TContext, TTest> Inherited Members TestRunnerBase<TContext, TTest>.GetAttachments(TContext) TestRunnerBase<TContext, TTest>.GetTestOutput(TContext) TestRunnerBase<TContext, TTest>.GetWarnings(TContext) TestRunnerBase<TContext, TTest>.OnTestCleanupFailure(TContext, Exception) TestRunnerBase<TContext, TTest>.OnTestFailed(TContext, Exception, decimal, string, string[]) TestRunnerBase<TContext, TTest>.OnTestFinished(TContext, decimal, string, string[], IReadOnlyDictionary<string, TestAttachment>) TestRunnerBase<TContext, TTest>.OnTestNotRun(TContext, string, string[]) TestRunnerBase<TContext, TTest>.OnTestPassed(TContext, decimal, string, string[]) TestRunnerBase<TContext, TTest>.OnTestSkipped(TContext, string, decimal, string, string[]) TestRunnerBase<TContext, TTest>.OnTestStarting(TContext) TestRunnerBase<TContext, TTest>.OnTestStarting(TContext, bool, int) TestRunnerBase<TContext, TTest>.Run(TContext) TestRunnerBase<TContext, TTest>.RunTest(TContext) TestRunnerBase<TContext, TTest>.SetTestContext(TContext, TestEngineStatus, TestResultState, object) TestRunnerBase<TContext, TTest>.ShouldTestRun(TContext) TestRunnerBase<TContext, TTest>.UpdateTestContext(object, TestResultState) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks This class does not make any assumptions about what it means to run an individual test, just that at some point, the test will be run. The intention with this base class is that it can serve as a base for non-traditional tests. Constructors TestRunner() Initializes a new instance of the TestRunner<TContext, TTest> class. protected TestRunner() Methods CreateTestClassInstance(TContext) Override to creates and initialize the instance of the test class. protected abstract ValueTask<(object? Instance, SynchronizationContext? SyncContext, ExecutionContext? ExecutionContext)> CreateTestClassInstance(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<(object Instance, SynchronizationContext SyncContext, ExecutionContext ExecutionContext)> Returns the test class instance, the sync context that is current after the creation, and a capture of the execution context so that it can be restored later. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. Since the method is potentially async, we depend on it to capture and return the sync context so that it may be propagated appropriately. DisposeTestClassInstance(TContext, object) Disposes the test class instance. By default, will call DisposeAsync() if it's implemented, falling back to Dispose() if not. protected virtual ValueTask DisposeTestClassInstance(TContext ctxt, object testClassInstance) Parameters ctxt TContext The context that describes the current test testClassInstance object The test class instance Returns ValueTask Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test cleanup failure. InvokeTest(TContext, object?) Invokes the test method and returns the amount of time spent executing. protected virtual ValueTask<TimeSpan> InvokeTest(TContext ctxt, object? testClassInstance) Parameters ctxt TContext The context that describes the current test testClassInstance object The instance of the test class (may be null when running a static test method) Returns ValueTask<TimeSpan> Returns the execution time (in seconds) spent running the test method. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. IsTestClassCreatable(TContext) Override to determine whether a test class should be created. protected abstract bool IsTestClassCreatable(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns bool Remarks This method runs during Running and any exceptions thrown will contribute to test failure (and test class creation will not take place). IsTestClassDisposable(TContext, object) Determine whether a test class instance should be disposed. The pipeline will only call DisposeTestClassInstance(TContext, object) if this returns true. By default, looks to see if the class implements IAsyncDisposable or IDisposable. protected virtual bool IsTestClassDisposable(TContext ctxt, object testClassInstance) Parameters ctxt TContext The context that describes the current test testClassInstance object The test class instance Returns bool Remarks This method runs during Running and any exceptions thrown will contribute to test failure. OnTestClassConstructionFinished(TContext) This method will be called when a test class instance has finished being constructed. By default, this sends TestClassConstructionFinished. protected virtual ValueTask<bool> OnTestClassConstructionFinished(TContext ctxt) Parameters ctxt TContext The invoker context Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. OnTestClassConstructionStarting(TContext) This method will be called when a test class instance is about to be constructed. By default, this sends TestClassConstructionStarting. protected virtual ValueTask<bool> OnTestClassConstructionStarting(TContext ctxt) Parameters ctxt TContext The invoker context Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Running and any exceptions thrown will contribute to test failure (and test class creation will not take place). OnTestClassDisposeFinished(TContext) This method will be called when a test class instance has finished being disposed. By default, this sends TestClassDisposeFinished. protected virtual ValueTask<bool> OnTestClassDisposeFinished(TContext ctxt) Parameters ctxt TContext The invoker context Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. OnTestClassDisposeStarting(TContext) This method will be called when a test class instance is about to be disposed. By default, this sends TestClassDisposeStarting. protected virtual ValueTask<bool> OnTestClassDisposeStarting(TContext ctxt) Parameters ctxt TContext The invoker context Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. PostInvoke(TContext) Override this method to call code just after the test invocation has completed, but before the test class instance has been disposed. protected virtual void PostInvoke(TContext ctxt) Parameters ctxt TContext The context that describes the current test PreInvoke(TContext) Override this method to call code just after the test class instance has been created, but before the test has been invoked. protected virtual void PreInvoke(TContext ctxt) Parameters ctxt TContext The context that describes the current test RunTest(TContext) Override this method to run the test. protected override ValueTask<TimeSpan> RunTest(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<TimeSpan>"
  },
  "v3/2.0.0/Xunit.v3.TestRunnerBase-2.html": {
    "href": "v3/2.0.0/Xunit.v3.TestRunnerBase-2.html",
    "title": "Class TestRunnerBase<TContext, TTest> | xunit",
    "summary": "Class TestRunnerBase<TContext, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll A base class that provides default behavior when running a test. This includes support for skipping tests. public abstract class TestRunnerBase<TContext, TTest> where TContext : TestRunnerBaseContext<TTest> where TTest : class, ITest Type Parameters TContext The context type used by the runner TTest The test type used by the test framework. Must derive from ITest. Inheritance object TestRunnerBase<TContext, TTest> Derived TestRunner<TContext, TTest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks This class does not make any assumptions about what it means to run an individual test, just that at some point, the test will be run. The intention with this base class is that it can serve as a base for non-traditional tests (e.g., tests that are not derived from invoking CLR methods). Constructors TestRunnerBase() Initializes a new instance of the TestRunner<TContext, TTest> class. protected TestRunnerBase() Methods GetAttachments(TContext) Gets the attachments for the test. If the test framework did not collect attachments (or does not support attachments), then it should return null. protected virtual ValueTask<IReadOnlyDictionary<string, TestAttachment>?> GetAttachments(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<IReadOnlyDictionary<string, TestAttachment>> Remarks By default, this method returns Attachments from the current context. This method runs during Running and any exceptions thrown will contribute to test failure. GetTestOutput(TContext) Gets any output collected from the test after execution is complete. If the test framework did not collect any output, or does not support collecting output, then it should return Empty. protected virtual ValueTask<string> GetTestOutput(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<string> Remarks This method runs during Running and any exceptions thrown will contribute to test failure. GetWarnings(TContext) Gets the warnings that will be reported during test results. By default, returns null, indicating that there were no warnings protected virtual ValueTask<string[]?> GetWarnings(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<string[]> Remarks This method runs during Running and any exceptions thrown will contribute to test failure. OnTestCleanupFailure(TContext, Exception) This method is called when an exception was thrown while cleaning up, after the test has run. By default, this sends (like TestCleanupFailure). protected virtual ValueTask<bool> OnTestCleanupFailure(TContext ctxt, Exception exception) Parameters ctxt TContext The context that describes the current test exception Exception The exception that caused the cleanup failure (may be an instance of AggregateException if more than one exception occurred). Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown are converted into fatal exception messages (via IErrorMessage) and sent to the message bus in ctxt. OnTestFailed(TContext, Exception, decimal, string, string[]?) This method is called when a test has failed. By default, this sends TestFailed. protected virtual ValueTask<(bool Continue, TestResultState ResultState)> OnTestFailed(TContext ctxt, Exception exception, decimal executionTime, string output, string[]? warnings) Parameters ctxt TContext The context that describes the current test exception Exception The exception that caused the test failure executionTime decimal The time spent running the test output string The output from the test warnings string[] The warnings that were generated during the test Returns ValueTask<(bool Continue, TestResultState ResultState)> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test cleanup failure. OnTestFinished(TContext, decimal, string, string[]?, IReadOnlyDictionary<string, TestAttachment>?) This method is called just after the test has finished running. By default, this sends TestFinished. Override this to enable any extensibility related to test finish. protected virtual ValueTask<bool> OnTestFinished(TContext ctxt, decimal executionTime, string output, string[]? warnings, IReadOnlyDictionary<string, TestAttachment>? attachments) Parameters ctxt TContext The context that describes the current test executionTime decimal The time spent running the test output string The output from the test warnings string[] The warnings that were generated during the test attachments IReadOnlyDictionary<string, TestAttachment> The attachments that were assocated with the test Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test cleanup failure. OnTestNotRun(TContext, string, string[]?) This method is called when a test was not run. By default, this sends TestNotRun. protected virtual ValueTask<(bool Continue, TestResultState ResultState)> OnTestNotRun(TContext ctxt, string output, string[]? warnings) Parameters ctxt TContext The context that describes the current test output string The output from the test warnings string[] The warnings that were generated during the test Returns ValueTask<(bool Continue, TestResultState ResultState)> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test cleanup failure. OnTestPassed(TContext, decimal, string, string[]?) This method is called when a test has passed. By default, this sends TestPassed. protected virtual ValueTask<(bool Continue, TestResultState ResultState)> OnTestPassed(TContext ctxt, decimal executionTime, string output, string[]? warnings) Parameters ctxt TContext The context that describes the current test executionTime decimal The time spent running the test output string The output from the test warnings string[] The warnings that were generated during the test Returns ValueTask<(bool Continue, TestResultState ResultState)> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test cleanup failure. OnTestSkipped(TContext, string, decimal, string, string[]?) This method is called when a test is skipped. By default, this sends TestSkipped. protected virtual ValueTask<(bool Continue, TestResultState ResultState)> OnTestSkipped(TContext ctxt, string skipReason, decimal executionTime, string output, string[]? warnings) Parameters ctxt TContext The context that describes the current test skipReason string The reason given for skipping the test executionTime decimal The time spent running the test output string The output from the test warnings string[] The warnings that were generated during the test Returns ValueTask<(bool Continue, TestResultState ResultState)> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test cleanup failure. OnTestStarting(TContext) This method is called just before the test is run. By default, this sends TestStarting. Override this to enable any extensibility related to test start. protected virtual ValueTask<bool> OnTestStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test failure (and will prevent the test from running). Even if this method records exceptions, OnTestFinished(TContext, decimal, string, string[]?, IReadOnlyDictionary<string, TestAttachment>?) will be called. OnTestStarting(TContext, bool, int) This is a helper that allows passing explicit and timeout values, since those are not part of the core object model. protected ValueTask<bool> OnTestStarting(TContext ctxt, bool @explicit, int timeout) Parameters ctxt TContext The context that describes the current test explicit bool A flag which indicates whether this is an explicit test timeout int The timeout for running this test Returns ValueTask<bool> Run(TContext) Runs the test. protected ValueTask<RunSummary> Run(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<RunSummary> Returns summary information about the test that was run. Remarks This function is the primary orchestrator of test execution. RunTest(TContext) Override this method to run the test. protected abstract ValueTask<TimeSpan> RunTest(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<TimeSpan> SetTestContext(TContext, TestEngineStatus, TestResultState?, object?) Sets the test context for the given test state and engine status. protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testStatus, TestResultState? testState = null, object? testClassInstance = null) Parameters ctxt TContext The context that describes the current test testStatus TestEngineStatus The current engine status for the test testState TestResultState The current test state testClassInstance object The instance of the test class Remarks This method must never throw. Behavior is undefined if it does. Instead, exceptions that occur should be recorded in the aggregator in ctxt and will be reflected in a way that's appropriate based on when this method is called. ShouldTestRun(TContext) Override this to determine whether a test should be run or not (meaning, if you return false, it will be reported with a status of NotRun). By default, this method will return true. This is typically used to implement the ability to exclude specific tests unless they've been explicitly asked to be run. protected virtual bool ShouldTestRun(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns bool Remarks This method runs during Running and any exceptions thrown will contribute to test failure. UpdateTestContext(object?, TestResultState?) Updates the test context values while the test is running, without swapping out the test context itself. This preserves the values in the existing context (notably, the cancellation token, which is wrapped and passed, and as such cannot be replaced). protected void UpdateTestContext(object? testClassInstance, TestResultState? testState = null) Parameters testClassInstance object testState TestResultState"
  },
  "v3/2.0.0/Xunit.v3.TestRunnerBaseContext-1.html": {
    "href": "v3/2.0.0/Xunit.v3.TestRunnerBaseContext-1.html",
    "title": "Class TestRunnerBaseContext<TTest> | xunit",
    "summary": "Class TestRunnerBaseContext<TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestRunnerBase<TContext, TTest>. public class TestRunnerBaseContext<TTest> : ContextBase, IAsyncLifetime, IAsyncDisposable where TTest : class, ITest Type Parameters TTest Inheritance object ContextBase TestRunnerBaseContext<TTest> Implements IAsyncLifetime IAsyncDisposable Derived TestRunnerContext<TTest> Inherited Members ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestRunnerBaseContext(TTest, IMessageBus, string?, ExplicitOption, ExceptionAggregator, CancellationTokenSource) Base context class for TestRunnerBase<TContext, TTest>. public TestRunnerBaseContext(TTest test, IMessageBus messageBus, string? skipReason, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters test TTest The test messageBus IMessageBus The message bus to send execution messages to skipReason string The skip reason for the test, if it's being skipped explicitOption ExplicitOption The user's choice on how to treat explicit tests aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source Properties Test Gets the test that's being invoked. public TTest Test { get; } Property Value TTest Methods GetSkipReason(Exception?) Gets the runtime skip reason for the test. public virtual string? GetSkipReason(Exception? exception) Parameters exception Exception The exception that was thrown during test invocation Returns string The skip reason, if the test is skipped; null, otherwise"
  },
  "v3/2.0.0/Xunit.v3.TestRunnerContext-1.html": {
    "href": "v3/2.0.0/Xunit.v3.TestRunnerContext-1.html",
    "title": "Class TestRunnerContext<TTest> | xunit",
    "summary": "Class TestRunnerContext<TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll Base context class for TestRunner<TContext, TTest>. This includes an assumption that a test means invoking a method on a class. public class TestRunnerContext<TTest> : TestRunnerBaseContext<TTest>, IAsyncLifetime, IAsyncDisposable where TTest : class, ITest Type Parameters TTest Inheritance object ContextBase TestRunnerBaseContext<TTest> TestRunnerContext<TTest> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestRunnerBaseContext<TTest> Inherited Members TestRunnerBaseContext<TTest>.Test TestRunnerBaseContext<TTest>.GetSkipReason(Exception) ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors TestRunnerContext(TTest, IMessageBus, string?, ExplicitOption, ExceptionAggregator, CancellationTokenSource, MethodInfo, object?[]) Base context class for TestRunner<TContext, TTest>. This includes an assumption that a test means invoking a method on a class. public TestRunnerContext(TTest test, IMessageBus messageBus, string? skipReason, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, MethodInfo testMethod, object?[] testMethodArguments) Parameters test TTest The test messageBus IMessageBus The message bus to send execution messages to skipReason string The skip reason for the test, if it's being skipped explicitOption ExplicitOption The user's choice on how to treat explicit tests aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source testMethod MethodInfo The test method testMethodArguments object[] The method arguments for the test method Properties TestMethod Gets the method that this test originated in. public MethodInfo TestMethod { get; } Property Value MethodInfo TestMethodArguments Gets the arguments to be passed to the test method during invocation. public object?[] TestMethodArguments { get; } Property Value object[]"
  },
  "v3/2.0.0/Xunit.v3.TestSkipped.html": {
    "href": "v3/2.0.0/Xunit.v3.TestSkipped.html",
    "title": "Class TestSkipped | xunit",
    "summary": "Class TestSkipped Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestSkipped. [JsonTypeID(\"test-skipped\")] public sealed class TestSkipped : TestResultMessage, ITestSkipped, ITestResultMessage, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, IExecutionMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestResultMessage TestSkipped Implements ITestSkipped ITestResultMessage ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable IExecutionMetadata Inherited Members TestResultMessage.ExecutionTime TestResultMessage.FinishTime TestResultMessage.Output TestResultMessage.Warnings TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Reason Gets the reason given for skipping the test. public required string Reason { get; set; } Property Value string Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TestStarting.html": {
    "href": "v3/2.0.0/Xunit.v3.TestStarting.html",
    "title": "Class TestStarting | xunit",
    "summary": "Class TestStarting Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of ITestStarting. [JsonTypeID(\"test-starting\")] public sealed class TestStarting : TestMessage, ITestStarting, ITestMessage, ITestCaseMessage, ITestMethodMessage, ITestClassMessage, ITestCollectionMessage, ITestAssemblyMessage, IMessageSinkMessage, IJsonSerializable, ITestMetadata Inheritance object MessageSinkMessage TestAssemblyMessage TestCollectionMessage TestClassMessage TestMethodMessage TestCaseMessage TestMessage TestStarting Implements ITestStarting ITestMessage ITestCaseMessage ITestMethodMessage ITestClassMessage ITestCollectionMessage ITestAssemblyMessage IMessageSinkMessage IJsonSerializable ITestMetadata Inherited Members TestMessage.TestUniqueID TestCaseMessage.TestCaseUniqueID TestMethodMessage.TestMethodUniqueID TestClassMessage.TestClassUniqueID TestCollectionMessage.TestCollectionUniqueID TestAssemblyMessage.AssemblyUniqueID MessageSinkMessage.ValidateObjectState() MessageSinkMessage.ToJson() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Properties Explicit Gets a flag which indicates whether the test is marked as explicit or not. public required bool Explicit { get; set; } Property Value bool StartTime Gets the date and time when the test execution began. public required DateTimeOffset StartTime { get; set; } Property Value DateTimeOffset TestDisplayName Gets the display name of the test. public required string TestDisplayName { get; set; } Property Value string Timeout Gets the timeout for the test, in milliseconds; if 0, there is no timeout. public required int Timeout { get; set; } Property Value int Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public required IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; set; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> Methods Serialize(JsonObjectSerializer) Override to serialize the values in the message into JSON. protected override void Serialize(JsonObjectSerializer serializer) Parameters serializer JsonObjectSerializer The serializer to write values to. ToString() public override string ToString() Returns string ValidateObjectState(HashSet<string>) Called before serializing the message. Implementers are expected to call ValidatePropertyIsNotNull(object?, string, HashSet<string>) for each property that must have a value, to record invalid property values into the provided hash set. protected override void ValidateObjectState(HashSet<string> invalidProperties) Parameters invalidProperties HashSet<string> The hash set to record invalid properties into"
  },
  "v3/2.0.0/Xunit.v3.TheoryDiscoverer.html": {
    "href": "v3/2.0.0/Xunit.v3.TheoryDiscoverer.html",
    "title": "Class TheoryDiscoverer | xunit",
    "summary": "Class TheoryDiscoverer Namespace Xunit.v3 Assembly xunit.v3.core.dll Implementation of IXunitTestCaseDiscoverer that supports finding test cases on methods decorated with ITheoryAttribute. public class TheoryDiscoverer : IXunitTestCaseDiscoverer Inheritance object TheoryDiscoverer Implements IXunitTestCaseDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods CreateTestCasesForDataRow(ITestFrameworkDiscoveryOptions, IXunitTestMethod, ITheoryAttribute, ITheoryDataRow, object?[]) Creates test cases for a single row of data. By default, returns a single instance of XunitTestCase with the data row inside of it. protected virtual ValueTask<IReadOnlyCollection<IXunitTestCase>> CreateTestCasesForDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, ITheoryAttribute theoryAttribute, ITheoryDataRow dataRow, object?[] testMethodArguments) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod IXunitTestMethod The test method the test cases belong to. theoryAttribute ITheoryAttribute The theory attribute attached to the test method. dataRow ITheoryDataRow The data row that generated testMethodArguments. testMethodArguments object[] The arguments for the test method. Returns ValueTask<IReadOnlyCollection<IXunitTestCase>> The test cases CreateTestCasesForTheory(ITestFrameworkDiscoveryOptions, IXunitTestMethod, ITheoryAttribute) Creates test cases for the entire theory. This is used when one or more of the theory data items are not serializable, or if the user has requested to skip theory pre-enumeration, or if the user has requested the entire theory be skipped. By default, returns a single instance of XunitDelayEnumeratedTheoryTestCase (which performs the data discovery at runtime, for non-skipped theories) or XunitTestCase (for skipped theories). protected virtual ValueTask<IReadOnlyCollection<IXunitTestCase>> CreateTestCasesForTheory(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, ITheoryAttribute theoryAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod IXunitTestMethod The test method the test cases belong to. theoryAttribute ITheoryAttribute The theory attribute attached to the test method. Returns ValueTask<IReadOnlyCollection<IXunitTestCase>> The test case Discover(ITestFrameworkDiscoveryOptions, IXunitTestMethod, IFactAttribute) Discover test cases from a test method. public virtual ValueTask<IReadOnlyCollection<IXunitTestCase>> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod IXunitTestMethod The test method the test cases belong to. factAttribute IFactAttribute The theory attribute attached to the test method. Returns ValueTask<IReadOnlyCollection<IXunitTestCase>> Returns zero or more test cases represented by the test method. Remarks This method performs the following steps: If the theory attribute is marked with Skip, or pre-enumeration is off, or any of the test data is non serializable, returns the result of CreateTestCasesForTheory(ITestFrameworkDiscoveryOptions, IXunitTestMethod, ITheoryAttribute); If there is no theory data, returns a single test case of ExecutionErrorTestCase with the error in it; Otherwise, it returns one test case per data row, created by calling CreateTestCasesForDataRow(ITestFrameworkDiscoveryOptions, IXunitTestMethod, ITheoryAttribute, ITheoryDataRow, object?[])."
  },
  "v3/2.0.0/Xunit.v3.XunitDelayEnumeratedTheoryTestCase.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitDelayEnumeratedTheoryTestCase.html",
    "title": "Class XunitDelayEnumeratedTheoryTestCase | xunit",
    "summary": "Class XunitDelayEnumeratedTheoryTestCase Namespace Xunit.v3 Assembly xunit.v3.core.dll Represents a test case which runs multiple tests for theory data, either because theory data pre-enumeration was disabled or because the data was not serializable. public class XunitDelayEnumeratedTheoryTestCase : XunitTestCase, IXunitSerializable, IAsyncDisposable, IXunitDelayEnumeratedTestCase, IXunitTestCase, ITestCase, ITestCaseMetadata Inheritance object XunitTestCase XunitDelayEnumeratedTheoryTestCase Implements IXunitSerializable IAsyncDisposable IXunitDelayEnumeratedTestCase IXunitTestCase ITestCase ITestCaseMetadata Inherited Members XunitTestCase.DisposalTracker XunitTestCase.Explicit XunitTestCase.SkipExceptions XunitTestCase.SkipReason XunitTestCase.SkipType XunitTestCase.SkipUnless XunitTestCase.SkipWhen XunitTestCase.SourceFilePath XunitTestCase.SourceLineNumber XunitTestCase.TestCaseDisplayName XunitTestCase.TestCollection XunitTestCase.TestClass XunitTestCase.TestClassMetadataToken XunitTestCase.TestClassName XunitTestCase.TestClassNamespace XunitTestCase.TestClassSimpleName XunitTestCase.TestMethod XunitTestCase.TestMethodArguments XunitTestCase.TestMethodMetadataToken XunitTestCase.TestMethodName XunitTestCase.TestMethodParameterTypesVSTest XunitTestCase.TestMethodReturnTypeVSTest XunitTestCase.Timeout XunitTestCase.Traits XunitTestCase.UniqueID XunitTestCase.DisposeAsync() XunitTestCase.PostInvoke() XunitTestCase.PreInvoke() XunitTestCase.ResolveTestMethodArguments(ParameterInfo[], object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitDelayEnumeratedTheoryTestCase() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public XunitDelayEnumeratedTheoryTestCase() XunitDelayEnumeratedTheoryTestCase(IXunitTestMethod, string, string, bool, bool, Type[]?, string?, Type?, string?, string?, Dictionary<string, HashSet<string>>?, string?, int?, int?) Initializes a new instance of the XunitDelayEnumeratedTheoryTestCase class. public XunitDelayEnumeratedTheoryTestCase(IXunitTestMethod testMethod, string testCaseDisplayName, string uniqueID, bool @explicit, bool skipTestWithoutData, Type[]? skipExceptions = null, string? skipReason = null, Type? skipType = null, string? skipUnless = null, string? skipWhen = null, Dictionary<string, HashSet<string>>? traits = null, string? sourceFilePath = null, int? sourceLineNumber = null, int? timeout = null) Parameters testMethod IXunitTestMethod The test method this test case belongs to. testCaseDisplayName string The display name for the test case. uniqueID string The optional unique ID for the test case; if not provided, will be calculated. explicit bool Indicates whether the test case was marked as explicit. skipTestWithoutData bool Set to true to skip if the test has no data, rather than fail. skipExceptions Type[] The value obtained from SkipExceptions. skipReason string The value from Skip skipType Type The value from SkipType skipUnless string The value from SkipUnless skipWhen string The value from SkipWhen traits Dictionary<string, HashSet<string>> The optional traits list. sourceFilePath string The optional source file in where this test case originated. sourceLineNumber int? The optional source line number where this test case originated. timeout int? The optional timeout for the test case (in milliseconds). Properties SkipTestWithoutData Gets a flag which indicates whether a theory without data is skipped rather than failed. public bool SkipTestWithoutData { get; } Property Value bool Methods CreateTests() Enumerates the theory data and creates tests to be run. public override ValueTask<IReadOnlyCollection<IXunitTest>> CreateTests() Returns ValueTask<IReadOnlyCollection<IXunitTest>> Deserialize(IXunitSerializationInfo) Called when the test case should populate itself with data from the serialization info. protected override void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from Serialize(IXunitSerializationInfo) Called when the test case should store its serialized values into the serialization info. protected override void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.XunitRunnerHelper.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitRunnerHelper.html",
    "title": "Class XunitRunnerHelper | xunit",
    "summary": "Class XunitRunnerHelper Namespace Xunit.v3 Assembly xunit.v3.core.dll Helper functions for xUnit.net v3 runners. public static class XunitRunnerHelper Inheritance object XunitRunnerHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FailTest(IMessageBus, CancellationTokenSource, ITest, Exception) Fail a test with the given exception. public static RunSummary FailTest(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, ITest test, Exception exception) Parameters messageBus IMessageBus The message bus to send the messages to cancellationTokenSource CancellationTokenSource The cancellation token source to cancel if requested test ITest The test to fail exception Exception The exception to fail the test cases with Returns RunSummary FailTestCases(IMessageBus, CancellationTokenSource, IReadOnlyCollection<ITestCase>, Exception, bool, bool, bool, bool, bool) Fail a set of test cases with the given exception. public static RunSummary FailTestCases(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection<ITestCase> testCases, Exception exception, bool sendTestCollectionMessages = false, bool sendTestClassMessages = false, bool sendTestMethodMessages = false, bool sendTestCaseMessages = true, bool sendTestMessages = true) Parameters messageBus IMessageBus The message bus to send the messages to cancellationTokenSource CancellationTokenSource The cancellation token source to cancel if requested testCases IReadOnlyCollection<ITestCase> The test cases to fail exception Exception The exception to fail the test cases with sendTestCollectionMessages bool Set to true to send ITestCollectionStarting and ITestCollectionFinished messages; set to false to skip sendTestClassMessages bool Set to true to send ITestClassStarting and ITestClassFinished messages; set to false to skip sendTestMethodMessages bool Set to true to send ITestMethodStarting and ITestMethodFinished messages; set to false to skip sendTestCaseMessages bool Set to true to send ITestCaseStarting and ITestCaseFinished messages; set to false to skip sendTestMessages bool Set to true to send ITestStarting and ITestFinished messages; set to false to skip Returns RunSummary FailTestCases(IMessageBus, CancellationTokenSource, IReadOnlyCollection<ITestCase>, string, bool, bool, bool, bool, bool) Fail a set of test cases with the given message. public static RunSummary FailTestCases(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection<ITestCase> testCases, string messageFormat, bool sendTestCollectionMessages = false, bool sendTestClassMessages = false, bool sendTestMethodMessages = false, bool sendTestCaseMessages = true, bool sendTestMessages = true) Parameters messageBus IMessageBus The message bus to send the messages to cancellationTokenSource CancellationTokenSource The cancellation token source to cancel if requested testCases IReadOnlyCollection<ITestCase> The test cases to fail messageFormat string A message template where {0} will be replaced with the display name of the test case during failure processing sendTestCollectionMessages bool Set to true to send ITestCollectionStarting and ITestCollectionFinished messages; set to false to skip sendTestClassMessages bool Set to true to send ITestClassStarting and ITestClassFinished messages; set to false to skip sendTestMethodMessages bool Set to true to send ITestMethodStarting and ITestMethodFinished messages; set to false to skip sendTestCaseMessages bool Set to true to send ITestCaseStarting and ITestCaseFinished messages; set to false to skip sendTestMessages bool Set to true to send ITestStarting and ITestFinished messages; set to false to skip Returns RunSummary RunXunitTestCase(IXunitTestCase, IMessageBus, CancellationTokenSource, ExceptionAggregator, ExplicitOption, object?[]) Runs a single test case (which implements IXunitTestCase) using the XunitTestCaseRunner after enumerating all tests. public static ValueTask<RunSummary> RunXunitTestCase(IXunitTestCase testCase, IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, ExceptionAggregator aggregator, ExplicitOption explicitOption, object?[] constructorArguments) Parameters testCase IXunitTestCase The test case to run messageBus IMessageBus The message bus to send the messages to cancellationTokenSource CancellationTokenSource The cancellation token source to cancel if requested aggregator ExceptionAggregator The exception aggregator to record exceptions to explicitOption ExplicitOption A flag to indicate which types of tests to run (non-explicit, explicit, or both) constructorArguments object[] The arguments to pass to the test class constructor Returns ValueTask<RunSummary> SkipTestCases(IMessageBus, CancellationTokenSource, IReadOnlyCollection<ITestCase>, string, bool, bool, bool, bool, bool) Skips a set of test cases with the given skip reason. public static RunSummary SkipTestCases(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection<ITestCase> testCases, string skipReason, bool sendTestCollectionMessages = false, bool sendTestClassMessages = false, bool sendTestMethodMessages = false, bool sendTestCaseMessages = true, bool sendTestMessages = true) Parameters messageBus IMessageBus The message bus to send the messages to cancellationTokenSource CancellationTokenSource The cancellation token source to cancel if requested testCases IReadOnlyCollection<ITestCase> The test cases to fail skipReason string The skip reason sendTestCollectionMessages bool Set to true to send ITestCollectionStarting and ITestCollectionFinished messages; set to false to skip sendTestClassMessages bool Set to true to send ITestClassStarting and ITestClassFinished messages; set to false to skip sendTestMethodMessages bool Set to true to send ITestMethodStarting and ITestMethodFinished messages; set to false to skip sendTestCaseMessages bool Set to true to send ITestCaseStarting and ITestCaseFinished messages; set to false to skip sendTestMessages bool Set to true to send ITestStarting and ITestFinished messages; set to false to skip Returns RunSummary"
  },
  "v3/2.0.0/Xunit.v3.XunitTest.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTest.html",
    "title": "Class XunitTest | xunit",
    "summary": "Class XunitTest Namespace Xunit.v3 Assembly xunit.v3.core.dll An implementation of ITest for xUnit v3. public class XunitTest : IXunitTest, ITest, ITestMetadata Inheritance object XunitTest Implements IXunitTest ITest ITestMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTest(IXunitTestCase, IXunitTestMethod, bool?, string?, string, int, IReadOnlyDictionary<string, IReadOnlyCollection<string>>, int?, object?[]) Initializes a new instance of the XunitTest class. public XunitTest(IXunitTestCase testCase, IXunitTestMethod testMethod, bool? @explicit, string? skipReason, string testDisplayName, int testIndex, IReadOnlyDictionary<string, IReadOnlyCollection<string>> traits, int? timeout, object?[] testMethodArguments) Parameters testCase IXunitTestCase The test case this test belongs to. testMethod IXunitTestMethod The test method to be run; may differ from the test method embedded into the test case explicit bool? A flag to indicate the test was marked as explicit; if not set, will fall back to the test case skipReason string The skip reason for this test. testDisplayName string The display name for this test. testIndex int The index of this test inside the test case. Used for computing UniqueID. traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> The traits for the given test. timeout int? The timeout for the test; if not set, will fall back to the test case testMethodArguments object[] The arguments to be passed to the test method XunitTest(IXunitTestCase, IXunitTestMethod, bool?, string?, string, string, IReadOnlyDictionary<string, IReadOnlyCollection<string>>?, int?, object?[]?) This constructor is for testing purposes only. Do not use in production code. public XunitTest(IXunitTestCase testCase, IXunitTestMethod testMethod, bool? @explicit, string? skipReason, string testDisplayName, string uniqueID, IReadOnlyDictionary<string, IReadOnlyCollection<string>>? traits = null, int? timeout = null, object?[]? testMethodArguments = null) Parameters testCase IXunitTestCase testMethod IXunitTestMethod explicit bool? skipReason string testDisplayName string uniqueID string traits IReadOnlyDictionary<string, IReadOnlyCollection<string>> timeout int? testMethodArguments object[] Properties Explicit Gets a flag indicating whether this test was marked as explicit or not. public bool Explicit { get; } Property Value bool SkipReason Gets a skip reason for this test. public string? SkipReason { get; } Property Value string Remarks This value may not line up the with SkipReason, as you can skip individual data rows during delay enumeration. TestCase Gets the xUnit v3 test case. public IXunitTestCase TestCase { get; } Property Value IXunitTestCase TestDisplayName Gets the display name of the test. public string TestDisplayName { get; } Property Value string TestMethod Gets the test method to run. May different from the test method embedded in the test case. public IXunitTestMethod TestMethod { get; } Property Value IXunitTestMethod TestMethodArguments Gets the arguments to be passed to the test method during invocation. public object?[] TestMethodArguments { get; } Property Value object[] Timeout Gets the timeout for the test, in milliseconds; if 0, there is no timeout. public int Timeout { get; } Property Value int Remarks WARNING: Using this with Aggressive will result in undefined behavior. Timeout is only supported by Conservative (or when parallelization is disabled completely). Traits Gets the trait values associated with this test case. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets a unique identifier for the test. public string UniqueID { get; } Property Value string Remarks The unique identifier for a test should be able to discriminate among test, even those which are varied invocations against the same test method (i.e., theories). This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, class name, test name, or test data). Recompilation of the test assembly is reasonable as a stability changing event."
  },
  "v3/2.0.0/Xunit.v3.XunitTestAssembly.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestAssembly.html",
    "title": "Class XunitTestAssembly | xunit",
    "summary": "Class XunitTestAssembly Namespace Xunit.v3 Assembly xunit.v3.core.dll The default implementation of IXunitTestAssembly for xUnit.net v3. public class XunitTestAssembly : IXunitTestAssembly, ITestAssembly, IAssemblyMetadata, IXunitSerializable Inheritance object XunitTestAssembly Implements IXunitTestAssembly ITestAssembly IAssemblyMetadata IXunitSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestAssembly() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public XunitTestAssembly() XunitTestAssembly(Assembly, string?, Version?, string?) Initializes a new instance of the XunitTestAssembly class. public XunitTestAssembly(Assembly assembly, string? configFileName = null, Version? version = null, string? uniqueID = null) Parameters assembly Assembly The test assembly. configFileName string The optional configuration filename version Version The version number of the assembly (defaults to \"0.0.0.0\") uniqueID string The unique ID for the test assembly (only used to override default behavior in testing scenarios) Properties Assembly Gets the assembly of this test assembly. public Assembly Assembly { get; } Property Value Assembly Remarks This should only be used to execute a test assembly. All reflection should be abstracted here instead for better testability. AssemblyFixtureTypes Gets a list of fixture types associated with the test assembly. public IReadOnlyCollection<Type> AssemblyFixtureTypes { get; } Property Value IReadOnlyCollection<Type> AssemblyName Gets the assembly name. May return a simple assembly name (i.e., \"mscorlib\"), or may return a fully qualified name (i.e., \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). public string AssemblyName { get; } Property Value string AssemblyPath Gets the on-disk location of the assembly under test. public string AssemblyPath { get; } Property Value string BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test assembly. public IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> CollectionBehavior Gets the collection behavior associated with the assembly, if present. public ICollectionBehaviorAttribute? CollectionBehavior { get; } Property Value ICollectionBehaviorAttribute CollectionDefinitions Gets the collection definitions attached to the test assembly, by collection name. public IReadOnlyDictionary<string, (Type Type, CollectionDefinitionAttribute Attribute)> CollectionDefinitions { get; } Property Value IReadOnlyDictionary<string, (Type Type, CollectionDefinitionAttribute Attribute)> ConfigFilePath Gets the full path of the configuration file name, if one is present. May be null if there is no configuration file. public string? ConfigFilePath { get; } Property Value string ModuleVersionID Returns the module version ID of the test assembly. Used as the basis for randomization. public Guid ModuleVersionID { get; } Property Value Guid TargetFramework Gets the target framework the test assembly was compiled against. Will be in a form like \".NETFramework,Version=v4.7.2\" or \".NETCoreApp,Version=v6.0\". public string TargetFramework { get; } Property Value string TestCaseOrderer Gets the test case orderer for the test assembly, if present. public ITestCaseOrderer? TestCaseOrderer { get; } Property Value ITestCaseOrderer TestCollectionOrderer Gets the test collection orderer for the test assembly, if present. public ITestCollectionOrderer? TestCollectionOrderer { get; } Property Value ITestCollectionOrderer Traits Gets the trait values associated with this test assembly. If there are none, or the framework does not support traits, this should return an empty dictionary (not null). public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test assembly. public string UniqueID { get; } Property Value string Remarks The unique identifier for a test assembly should be able to discriminate among test assemblies with their associated configuration file (so the same assembly with two different configuration files should have two different unique IDs). This identifier should remain stable until such time as the developer changes some fundamental part of the identity. Recompilation of the test assembly is reasonable as a stability changing event. Version Gets the assembly version. public Version Version { get; } Property Value Version Methods Deserialize(IXunitSerializationInfo) Called when the object should populate itself with data from the serialization info. public void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from Serialize(IXunitSerializationInfo) Called when the object should store its serialized values into the serialization info. public void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunner.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunner.html",
    "title": "Class XunitTestAssemblyRunner | xunit",
    "summary": "Class XunitTestAssemblyRunner Namespace Xunit.v3 Assembly xunit.v3.core.dll The test assembly runner for xUnit.net v3 tests. public class XunitTestAssemblyRunner : XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase> Inheritance object TestAssemblyRunner<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase> XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase> XunitTestAssemblyRunner Inherited Members XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.GetTestFrameworkDisplayName(XunitTestAssemblyRunnerContext) XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.OnTestAssemblyFinished(XunitTestAssemblyRunnerContext, RunSummary) XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.OnTestAssemblyStarting(XunitTestAssemblyRunnerContext) XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.OrderTestCollections(XunitTestAssemblyRunnerContext) XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.RunTestCollections(XunitTestAssemblyRunnerContext, Exception) XunitTestAssemblyRunnerBase<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.RunTestCollection(XunitTestAssemblyRunnerContext, IXunitTestCollection, IReadOnlyCollection<IXunitTestCase>) TestAssemblyRunner<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.FailTestCollection(XunitTestAssemblyRunnerContext, IXunitTestCollection, IReadOnlyCollection<IXunitTestCase>, Exception) TestAssemblyRunner<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.OnTestAssemblyCleanupFailure(XunitTestAssemblyRunnerContext, Exception) TestAssemblyRunner<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.Run(XunitTestAssemblyRunnerContext) TestAssemblyRunner<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase>.SetTestContext(XunitTestAssemblyRunnerContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestAssemblyRunner() Initializes a new instance of the XunitTestAssemblyRunner class. protected XunitTestAssemblyRunner() Properties Instance Gets the singleton instance of XunitTestAssemblyRunner. public static XunitTestAssemblyRunner Instance { get; } Property Value XunitTestAssemblyRunner Methods Run(IXunitTestAssembly, IReadOnlyCollection<IXunitTestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken) Runs the test assembly. public ValueTask<RunSummary> Run(IXunitTestAssembly testAssembly, IReadOnlyCollection<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken cancellationToken) Parameters testAssembly IXunitTestAssembly The test assembly to be executed. testCases IReadOnlyCollection<IXunitTestCase> The test cases associated with the test assembly. executionMessageSink IMessageSink The message sink to send execution messages to. executionOptions ITestFrameworkExecutionOptions The execution options to use when running tests. cancellationToken CancellationToken The cancellation token used to cancel test execution. Returns ValueTask<RunSummary>"
  },
  "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunnerBase-4.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunnerBase-4.html",
    "title": "Class XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase> | xunit",
    "summary": "Class XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll The test assembly runner for xUnit.net v3 tests (with overridable context). public class XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase> : TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> where TContext : XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> where TTestAssembly : class, IXunitTestAssembly where TTestCollection : class, IXunitTestCollection where TTestCase : class, IXunitTestCase Type Parameters TContext TTestAssembly TTestCollection TTestCase Inheritance object TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase> Derived XunitTestAssemblyRunner Inherited Members TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.FailTestCollection(TContext, TTestCollection, IReadOnlyCollection<TTestCase>, Exception) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.GetTestFrameworkDisplayName(TContext) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.OnTestAssemblyCleanupFailure(TContext, Exception) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.OnTestAssemblyFinished(TContext, RunSummary) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.OnTestAssemblyStarting(TContext) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.OrderTestCollections(TContext) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.Run(TContext) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.RunTestCollections(TContext, Exception) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.RunTestCollection(TContext, TTestCollection, IReadOnlyCollection<TTestCase>) TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>.SetTestContext(TContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods GetTestFrameworkDisplayName(TContext) Gets the display name for the test framework. Used to populate TestAssemblyStarting during OnTestAssemblyStarting(TContext). protected override ValueTask<string> GetTestFrameworkDisplayName(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns ValueTask<string> OnTestAssemblyFinished(TContext, RunSummary) This method will be called when the test assembly has finished running. By default this sends TestAssemblyFinished. Override this to enable any extensibility related to test assembly finish. protected override ValueTask<bool> OnTestAssemblyFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test assembly summary RunSummary The execution summary for the test assembly Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test assembly cleanup failure. OnTestAssemblyStarting(TContext) This method will be called before the test assembly has started running. TBy default this sends TestAssemblyStarting. Override this to enable any extensibility related to test assembly start. protected override ValueTask<bool> OnTestAssemblyStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test assembly failure (and will prevent the test assembly from running). Even if this method records exceptions, OnTestAssemblyFinished(TContext, RunSummary) will be called. OrderTestCollections(TContext) Orders the test collections in the assembly. By default does not re-order the test collections. Override this to provide custom test collection ordering. protected override List<(TTestCollection Collection, List<TTestCase> TestCases)> OrderTestCollections(TContext ctxt) Parameters ctxt TContext The context that describes the current test assembly Returns List<(TTestCollection Collection, List<TTestCase> TestCases)> Test collections in run order (and associated, not-yet-ordered test cases). RunTestCollection(TContext, TTestCollection, IReadOnlyCollection<TTestCase>) Override this method to run the tests in an individual test collection. protected override ValueTask<RunSummary> RunTestCollection(TContext ctxt, TTestCollection testCollection, IReadOnlyCollection<TTestCase> testCases) Parameters ctxt TContext The context that describes the current test assembly testCollection TTestCollection The test collection that is being run. testCases IReadOnlyCollection<TTestCase> The test cases that belong to the test collection. Returns ValueTask<RunSummary> Returns summary information about the tests that were run. RunTestCollections(TContext, Exception?) Runs the list of test collections. By default, groups the tests by collection and runs them synchronously. protected override ValueTask<RunSummary> RunTestCollections(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test assembly exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunnerBaseContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunnerBaseContext-2.html",
    "title": "Class XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> | xunit",
    "summary": "Class XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase>. public class XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> : TestAssemblyRunnerContext<TTestAssembly, TTestCase>, IAsyncLifetime, IAsyncDisposable where TTestAssembly : class, IXunitTestAssembly where TTestCase : class, IXunitTestCase Type Parameters TTestAssembly TTestCase Inheritance object TestAssemblyRunnerContext<TTestAssembly, TTestCase> XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestAssemblyRunnerContext Inherited Members TestAssemblyRunnerContext<TTestAssembly, TTestCase>.Aggregator TestAssemblyRunnerContext<TTestAssembly, TTestCase>.CancellationTokenSource TestAssemblyRunnerContext<TTestAssembly, TTestCase>.ExecutionMessageSink TestAssemblyRunnerContext<TTestAssembly, TTestCase>.ExecutionOptions TestAssemblyRunnerContext<TTestAssembly, TTestCase>.MessageBus TestAssemblyRunnerContext<TTestAssembly, TTestCase>.TargetFramework TestAssemblyRunnerContext<TTestAssembly, TTestCase>.TestAssembly TestAssemblyRunnerContext<TTestAssembly, TTestCase>.TestCases TestAssemblyRunnerContext<TTestAssembly, TTestCase>.TestEnvironment TestAssemblyRunnerContext<TTestAssembly, TTestCase>.CreateMessageBus() TestAssemblyRunnerContext<TTestAssembly, TTestCase>.DisposeAsync() TestAssemblyRunnerContext<TTestAssembly, TTestCase>.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestAssemblyRunnerBaseContext(TTestAssembly, IReadOnlyCollection<TTestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken) Context class for XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase>. public XunitTestAssemblyRunnerBaseContext(TTestAssembly testAssembly, IReadOnlyCollection<TTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken cancellationToken) Parameters testAssembly TTestAssembly The test assembly testCases IReadOnlyCollection<TTestCase> The test cases from the assembly executionMessageSink IMessageSink The message sink to send execution messages to executionOptions ITestFrameworkExecutionOptions The options used during test execution cancellationToken CancellationToken The cancellation token used to cancel execution Properties AssemblyFixtureMappings Gets the mapping manager for assembly-level fixtures. public FixtureMappingManager AssemblyFixtureMappings { get; } Property Value FixtureMappingManager AssemblyTestCaseOrderer Gets the assembly-level test case orderer, if one is present. public ITestCaseOrderer? AssemblyTestCaseOrderer { get; } Property Value ITestCaseOrderer AssemblyTestCollectionOrderer Gets the assembly-level test collection orderer, if one is present. public ITestCollectionOrderer? AssemblyTestCollectionOrderer { get; } Property Value ITestCollectionOrderer DisableParallelization Gets a flag which indicates whether the user has requested that parallelization be disabled. public bool DisableParallelization { get; } Property Value bool ExplicitOption Gets a flag which indicates how explicit tests should be handled. public ExplicitOption ExplicitOption { get; } Property Value ExplicitOption MaxParallelThreads Gets the maximum number of threads to use when running tests in parallel. If this returns a positive integer, that is the maximum number of threads; if it returns -1, that indicates that unlimited threads should be allowed. public int MaxParallelThreads { get; } Property Value int ParallelAlgorithm Gets the algorithm used for parallelism. public ParallelAlgorithm ParallelAlgorithm { get; } Property Value ParallelAlgorithm TargetFramework Gets the target framework that the test assembly is targeting. By default, this returns null. Test frameworks that are based on .NET runtime assemblies can look for TargetFrameworkAttribute decorated at the assembly level, which is added automatically by the compiler. public override string TargetFramework { get; } Property Value string TestAssembly Gets the assembly that is being executed. public TTestAssembly TestAssembly { get; } Property Value TTestAssembly TestEnvironment Gets the environment that the test are running in. By default, returns a string which indicates process bitness, processor architecture (when known), and the description of the runtime environment (from FrameworkDescription). public override string TestEnvironment { get; } Property Value string Remarks Example: \"64-bit (x64) .NET 8.0.11\" Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public override ValueTask DisposeAsync() Returns ValueTask InitializeAsync() Called immediately after the class has been created, before it is used. public override ValueTask InitializeAsync() Returns ValueTask RunTestCollection(IXunitTestCollection, IReadOnlyCollection<TTestCase>, ITestCaseOrderer) Delegation of RunTestCollection(TContext, TTestCollection, IReadOnlyCollection<TTestCase>) that properly obeys the parallel algorithm requirements. public ValueTask<RunSummary> RunTestCollection(IXunitTestCollection testCollection, IReadOnlyCollection<TTestCase> testCases, ITestCaseOrderer testCaseOrderer) Parameters testCollection IXunitTestCollection testCases IReadOnlyCollection<TTestCase> testCaseOrderer ITestCaseOrderer Returns ValueTask<RunSummary> SetupParallelism() Sets up the mechanics for parallelism. public virtual void SetupParallelism()"
  },
  "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunnerContext.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestAssemblyRunnerContext.html",
    "title": "Class XunitTestAssemblyRunnerContext | xunit",
    "summary": "Class XunitTestAssemblyRunnerContext Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestAssemblyRunner. public class XunitTestAssemblyRunnerContext : XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>, IAsyncLifetime, IAsyncDisposable Inheritance object TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase> XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase> XunitTestAssemblyRunnerContext Implements IAsyncLifetime IAsyncDisposable Inherited Members XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.AssemblyFixtureMappings XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.AssemblyTestCaseOrderer XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.AssemblyTestCollectionOrderer XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.DisableParallelization XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.ExplicitOption XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.MaxParallelThreads XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.ParallelAlgorithm XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.TestAssembly XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.TargetFramework XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.TestEnvironment XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.DisposeAsync() XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.InitializeAsync() XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.RunTestCollection(IXunitTestCollection, IReadOnlyCollection<IXunitTestCase>, ITestCaseOrderer) XunitTestAssemblyRunnerBaseContext<IXunitTestAssembly, IXunitTestCase>.SetupParallelism() TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.Aggregator TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.CancellationTokenSource TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.ExecutionMessageSink TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.ExecutionOptions TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.MessageBus TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.TestCases TestAssemblyRunnerContext<IXunitTestAssembly, IXunitTestCase>.CreateMessageBus() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestAssemblyRunnerContext(IXunitTestAssembly, IReadOnlyCollection<IXunitTestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken) Context class for XunitTestAssemblyRunner. public XunitTestAssemblyRunnerContext(IXunitTestAssembly testAssembly, IReadOnlyCollection<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken cancellationToken) Parameters testAssembly IXunitTestAssembly The test assembly testCases IReadOnlyCollection<IXunitTestCase> The test cases from the assembly executionMessageSink IMessageSink The message sink to send execution messages to executionOptions ITestFrameworkExecutionOptions The options used during test execution cancellationToken CancellationToken The cancellation token used to cancel execution"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCase.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCase.html",
    "title": "Class XunitTestCase | xunit",
    "summary": "Class XunitTestCase Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IXunitTestCase for xUnit.net v3 that supports test methods decorated with FactAttribute. Test methods decorated with derived attributes may use this as a base class to build from. public class XunitTestCase : IXunitTestCase, ITestCase, ITestCaseMetadata, IXunitSerializable, IAsyncDisposable Inheritance object XunitTestCase Implements IXunitTestCase ITestCase ITestCaseMetadata IXunitSerializable IAsyncDisposable Derived ExecutionErrorTestCase XunitDelayEnumeratedTheoryTestCase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCase() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public XunitTestCase() XunitTestCase(IXunitTestMethod, string, string, bool, Type[]?, string?, Type?, string?, string?, Dictionary<string, HashSet<string>>?, object?[]?, string?, int?, int?) Initializes a new instance of the XunitTestCase class. public XunitTestCase(IXunitTestMethod testMethod, string testCaseDisplayName, string uniqueID, bool @explicit, Type[]? skipExceptions = null, string? skipReason = null, Type? skipType = null, string? skipUnless = null, string? skipWhen = null, Dictionary<string, HashSet<string>>? traits = null, object?[]? testMethodArguments = null, string? sourceFilePath = null, int? sourceLineNumber = null, int? timeout = null) Parameters testMethod IXunitTestMethod The test method this test case belongs to. testCaseDisplayName string The display name for the test case. uniqueID string The unique ID for the test case. explicit bool Indicates whether the test case was marked as explicit. skipExceptions Type[] The value obtained from SkipExceptions. skipReason string The value obtained from Skip. skipType Type The value obtained from SkipType. skipUnless string The value obtained from SkipUnless. skipWhen string The value obtained from SkipWhen. traits Dictionary<string, HashSet<string>> The optional traits list. testMethodArguments object[] The optional arguments for the test method. sourceFilePath string The optional source file in where this test case originated. sourceLineNumber int? The optional source line number where this test case originated. timeout int? The optional timeout for the test case (in milliseconds). Properties DisposalTracker Used to dispose of test method arguments when the test case is disposed. public DisposalTracker DisposalTracker { get; } Property Value DisposalTracker Explicit Gets a flag indicating whether this test case was marked as explicit or not. public bool Explicit { get; } Property Value bool SkipExceptions Gets the exception types that, when thrown, will cause a public Type[]? SkipExceptions { get; } Property Value Type[] SkipReason Gets the display text for the reason a test that might being skipped. public string? SkipReason { get; protected set; } Property Value string Remarks This differs from the contract of SkipReason by virtue of the fact that when this value is non-null, it may indicate that a test is statically skipped (if both SkipUnless and SkipWhen are null) or dynamically skipped (if one is non-null). SkipType When set, indicates the type to use when resolving SkipUnless or SkipWhen. If not set, uses the test class type. public Type? SkipType { get; protected set; } Property Value Type SkipUnless When set, indicates a public static property that is used at runtime to determine whether the test is skipped or not (true to run, false to skip). public string? SkipUnless { get; protected set; } Property Value string Remarks Note: It is an error condition for both SkipUnless and SkipWhen to return a non-null value. SkipWhen When set, indicates a public static property that is used at runtime to determine whether the test is skipped or not (false to run, true to skip). public string? SkipWhen { get; protected set; } Property Value string Remarks Note: It is an error condition for both SkipUnless and SkipWhen to return a non-null value. SourceFilePath Gets the source file name. A null value indicates that the source file name is not known. public string? SourceFilePath { get; set; } Property Value string SourceLineNumber Gets the source file line number. A null value indicates that the source file line number is not known. public int? SourceLineNumber { get; set; } Property Value int? TestCaseDisplayName Gets the display name of the test case. public string TestCaseDisplayName { get; } Property Value string TestClass Gets the test class that this test case belongs to. public IXunitTestClass TestClass { get; } Property Value IXunitTestClass TestClassMetadataToken Gets the MetadataToken for the test class. public int TestClassMetadataToken { get; } Property Value int TestClassName Gets the full name of the class where the test is defined (i.e. FullName). public string TestClassName { get; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. If the test did not originate in a class, or the class it originated in does not reside in a namespace, will return null. public string? TestClassNamespace { get; } Property Value string TestClassSimpleName Gets the simple name of the class where the test is defined (i.e. Name). public string TestClassSimpleName { get; } Property Value string TestCollection Gets the test collection this test case belongs to. public IXunitTestCollection TestCollection { get; } Property Value IXunitTestCollection TestMethod Gets the test method this test case belongs to. public IXunitTestMethod TestMethod { get; } Property Value IXunitTestMethod TestMethodArguments public object?[] TestMethodArguments { get; } Property Value object[] TestMethodMetadataToken Gets the MetadataToken for the test method. public int TestMethodMetadataToken { get; } Property Value int TestMethodName Gets the method name where the test is defined. public string TestMethodName { get; } Property Value string TestMethodParameterTypesVSTest Gets the types for the test method parameters. public string[] TestMethodParameterTypesVSTest { get; } Property Value string[] Remarks The values here are formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. TestMethodReturnTypeVSTest Gets the test method return type. public string TestMethodReturnTypeVSTest { get; } Property Value string Remarks The value here is formatted according to VSTest rules in order to support Test Explorer. Note that this is not the same as FullName. Timeout Gets the timeout of the test, in milliseconds; if zero or negative, means the test case has no timeout. public int Timeout { get; } Property Value int Traits Gets the traits associated with this test case. public Dictionary<string, HashSet<string>> Traits { get; } Property Value Dictionary<string, HashSet<string>> UniqueID Gets a unique identifier for the test case. public virtual string UniqueID { get; } Property Value string Remarks The unique identifier for a test case should be able to discriminate among test cases, even those which are varied invocations against the same test method (i.e., theories). This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, class name, test name, or test data). Recompilation of the test assembly is reasonable as a stability changing event. Methods CreateTests() Creates the tests that are emitted from this test case. Exceptions thrown here will be caught and converted into a test case failure. public virtual ValueTask<IReadOnlyCollection<IXunitTest>> CreateTests() Returns ValueTask<IReadOnlyCollection<IXunitTest>> Remarks By default, this method returns a single XunitTest that is appropriate for a one-to-one mapping between test and test case. Override this method to change the tests that are associated with this test case. Deserialize(IXunitSerializationInfo) Called when the test case should populate itself with data from the serialization info. protected virtual void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask PostInvoke() Allows the test case to run some code just after the test case is finished running. public virtual void PostInvoke() PreInvoke() Allows the test case to run some code just before the test case is run. public virtual void PreInvoke() ResolveTestMethodArguments(ParameterInfo[], object?[]) Computes values from the test case and resolves the test method arguments just before execution. Typically used from CreateTests() so that the executed test has an appropriately typed argument, regardless of the type that was used to serialize the argument. protected static object?[] ResolveTestMethodArguments(ParameterInfo[] parameters, object?[] arguments) Parameters parameters ParameterInfo[] arguments object[] Returns object[] Serialize(IXunitSerializationInfo) Called when the test case should store its serialized values into the serialization info. protected virtual void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCaseDiscovererAttribute.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCaseDiscovererAttribute.html",
    "title": "Class XunitTestCaseDiscovererAttribute | xunit",
    "summary": "Class XunitTestCaseDiscovererAttribute Namespace Xunit.v3 Assembly xunit.v3.core.dll An attribute used to decorate classes which implement IFactAttribute, to indicate how test cases should be discovered. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class XunitTestCaseDiscovererAttribute : Attribute Inheritance object Attribute XunitTestCaseDiscovererAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCaseDiscovererAttribute(Type) An attribute used to decorate classes which implement IFactAttribute, to indicate how test cases should be discovered. public XunitTestCaseDiscovererAttribute(Type type) Parameters type Type The type of the discoverer; must implement IXunitTestCaseDiscoverer. Properties Type Gets the type of the test case discoverer. public Type Type { get; } Property Value Type"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCaseRunner.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCaseRunner.html",
    "title": "Class XunitTestCaseRunner | xunit",
    "summary": "Class XunitTestCaseRunner Namespace Xunit.v3 Assembly xunit.v3.core.dll The test case runner for xUnit.net v3 tests. public class XunitTestCaseRunner : XunitTestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase, IXunitTest> Inheritance object TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase> TestCaseRunner<XunitTestCaseRunnerContext, IXunitTestCase, IXunitTest> XunitTestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase, IXunitTest> XunitTestCaseRunner Inherited Members XunitTestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase, IXunitTest>.RunTestCase(XunitTestCaseRunnerContext, Exception) TestCaseRunner<XunitTestCaseRunnerContext, IXunitTestCase, IXunitTest>.FailTest(XunitTestCaseRunnerContext, IXunitTest, Exception) TestCaseRunner<XunitTestCaseRunnerContext, IXunitTestCase, IXunitTest>.RunTest(XunitTestCaseRunnerContext, IXunitTest) TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase>.OnTestCaseCleanupFailure(XunitTestCaseRunnerContext, Exception) TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase>.OnTestCaseFinished(XunitTestCaseRunnerContext, RunSummary) TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase>.OnTestCaseStarting(XunitTestCaseRunnerContext) TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase>.Run(XunitTestCaseRunnerContext) TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase>.RunTestCase(XunitTestCaseRunnerContext, Exception) TestCaseRunnerBase<XunitTestCaseRunnerContext, IXunitTestCase>.SetTestContext(XunitTestCaseRunnerContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCaseRunner() Initializes a new instance of the XunitTestCaseRunner class. protected XunitTestCaseRunner() Properties Instance Gets the singleton instance of the XunitTestCaseRunner class. public static XunitTestCaseRunner Instance { get; } Property Value XunitTestCaseRunner Methods Run(IXunitTestCase, IReadOnlyCollection<IXunitTest>, IMessageBus, ExceptionAggregator, CancellationTokenSource, string, string?, ExplicitOption, object?[]) Runs the test case. public ValueTask<RunSummary> Run(IXunitTestCase testCase, IReadOnlyCollection<IXunitTest> tests, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string? skipReason, ExplicitOption explicitOption, object?[] constructorArguments) Parameters testCase IXunitTestCase The test case that this invocation belongs to. tests IReadOnlyCollection<IXunitTest> The tests for the test case. messageBus IMessageBus The message bus to report run status to. aggregator ExceptionAggregator The exception aggregator used to run code and collect exceptions. cancellationTokenSource CancellationTokenSource The task cancellation token source, used to cancel the test run. displayName string The display name of the test case. skipReason string The skip reason, if the test is to be skipped. explicitOption ExplicitOption A flag to indicate how explicit tests should be treated. constructorArguments object[] The arguments to be passed to the test class constructor. Returns ValueTask<RunSummary> Returns summary information about the test that was run. Remarks This entry point is used for both single-test (like FactAttribute and individual data rows for TheoryAttribute tests) and multi-test test cases (like TheoryAttribute when pre-enumeration is disable or the theory data was not serializable). RunTest(XunitTestCaseRunnerContext, IXunitTest) Override this method to run an individual test. protected override ValueTask<RunSummary> RunTest(XunitTestCaseRunnerContext ctxt, IXunitTest test) Parameters ctxt XunitTestCaseRunnerContext The context that describes the current test method test IXunitTest The test to be run. Returns ValueTask<RunSummary> Returns summary information about the test case run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestCaseRunnerBase-3.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCaseRunnerBase-3.html",
    "title": "Class XunitTestCaseRunnerBase<TContext, TTestCase, TTest> | xunit",
    "summary": "Class XunitTestCaseRunnerBase<TContext, TTestCase, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll The test case runner for xUnit.net v3 tests (with overridable context). public abstract class XunitTestCaseRunnerBase<TContext, TTestCase, TTest> : TestCaseRunner<TContext, TTestCase, TTest> where TContext : XunitTestCaseRunnerBaseContext<TTestCase, TTest> where TTestCase : class, IXunitTestCase where TTest : class, IXunitTest Type Parameters TContext TTestCase TTest Inheritance object TestCaseRunnerBase<TContext, TTestCase> TestCaseRunner<TContext, TTestCase, TTest> XunitTestCaseRunnerBase<TContext, TTestCase, TTest> Derived XunitTestCaseRunner Inherited Members TestCaseRunner<TContext, TTestCase, TTest>.FailTest(TContext, TTest, Exception) TestCaseRunner<TContext, TTestCase, TTest>.RunTest(TContext, TTest) TestCaseRunner<TContext, TTestCase, TTest>.RunTestCase(TContext, Exception) TestCaseRunnerBase<TContext, TTestCase>.OnTestCaseCleanupFailure(TContext, Exception) TestCaseRunnerBase<TContext, TTestCase>.OnTestCaseFinished(TContext, RunSummary) TestCaseRunnerBase<TContext, TTestCase>.OnTestCaseStarting(TContext) TestCaseRunnerBase<TContext, TTestCase>.Run(TContext) TestCaseRunnerBase<TContext, TTestCase>.RunTestCase(TContext, Exception) TestCaseRunnerBase<TContext, TTestCase>.SetTestContext(TContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods RunTestCase(TContext, Exception?) Override this to run the test case. protected override ValueTask<RunSummary> RunTestCase(TContext ctxt, Exception? exception) Parameters ctxt TContext The context that describes the current test case exception Exception The exception that was caused during startup; should be used as an indicator that the downstream tests should fail with the provided exception rather than going through standard execution Returns ValueTask<RunSummary> Returns summary information about the tests that were run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestCaseRunnerBaseContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCaseRunnerBaseContext-2.html",
    "title": "Class XunitTestCaseRunnerBaseContext<TTestCase, TTest> | xunit",
    "summary": "Class XunitTestCaseRunnerBaseContext<TTestCase, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestCaseRunnerBase<TContext, TTestCase, TTest>. public class XunitTestCaseRunnerBaseContext<TTestCase, TTest> : TestCaseRunnerContext<TTestCase, TTest>, IAsyncLifetime, IAsyncDisposable where TTestCase : class, IXunitTestCase where TTest : class, IXunitTest Type Parameters TTestCase TTest Inheritance object ContextBase TestCaseRunnerBaseContext<TTestCase> TestCaseRunnerContext<TTestCase, TTest> XunitTestCaseRunnerBaseContext<TTestCase, TTest> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestCaseRunnerContext Inherited Members TestCaseRunnerContext<TTestCase, TTest>.Tests TestCaseRunnerBaseContext<TTestCase>.TestCase ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCaseRunnerBaseContext(TTestCase, IReadOnlyCollection<TTest>, IMessageBus, ExceptionAggregator, CancellationTokenSource, string, string?, ExplicitOption, object?[]) Context class for XunitTestCaseRunnerBase<TContext, TTestCase, TTest>. public XunitTestCaseRunnerBaseContext(TTestCase testCase, IReadOnlyCollection<TTest> tests, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string? skipReason, ExplicitOption explicitOption, object?[] constructorArguments) Parameters testCase TTestCase The test case tests IReadOnlyCollection<TTest> The tests for the test case messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source displayName string The display name of the test case skipReason string The skip reason, if the test case is being skipped explicitOption ExplicitOption The user's choice on how to treat explicit tests constructorArguments object[] The constructor arguments for the test class Properties BeforeAfterTestAttributes Gets the list of IBeforeAfterTestAttribute instances for this test case. public IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> ConstructorArguments Gets the arguments to pass to the constructor of the test class when creating it. public object?[] ConstructorArguments { get; } Property Value object[] DisplayName Gets the display name of the test case. public string DisplayName { get; } Property Value string SkipReason Gets the statically specified skip reason for the test. Note that this only covers values passed via Skip, and not dynamically skipped tests. public string? SkipReason { get; } Property Value string Tests Gets the tests for the given test case. public override IReadOnlyCollection<TTest> Tests { get; } Property Value IReadOnlyCollection<TTest>"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCaseRunnerContext.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCaseRunnerContext.html",
    "title": "Class XunitTestCaseRunnerContext | xunit",
    "summary": "Class XunitTestCaseRunnerContext Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestCaseRunner. public class XunitTestCaseRunnerContext : XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest>, IAsyncLifetime, IAsyncDisposable Inheritance object ContextBase TestCaseRunnerBaseContext<IXunitTestCase> TestCaseRunnerContext<IXunitTestCase, IXunitTest> XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest> XunitTestCaseRunnerContext Implements IAsyncLifetime IAsyncDisposable Inherited Members XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest>.BeforeAfterTestAttributes XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest>.ConstructorArguments XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest>.DisplayName XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest>.SkipReason XunitTestCaseRunnerBaseContext<IXunitTestCase, IXunitTest>.Tests TestCaseRunnerBaseContext<IXunitTestCase>.TestCase ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCaseRunnerContext(IXunitTestCase, IReadOnlyCollection<IXunitTest>, IMessageBus, ExceptionAggregator, CancellationTokenSource, string, string?, ExplicitOption, object?[]) Context class for XunitTestCaseRunner. public XunitTestCaseRunnerContext(IXunitTestCase testCase, IReadOnlyCollection<IXunitTest> tests, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string? skipReason, ExplicitOption explicitOption, object?[] constructorArguments) Parameters testCase IXunitTestCase The test case tests IReadOnlyCollection<IXunitTest> The tests for the test case messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source displayName string The display name of the test case skipReason string The skip reason, if the test case is being skipped explicitOption ExplicitOption The user's choice on how to treat explicit tests constructorArguments object[] The constructor arguments for the test class"
  },
  "v3/2.0.0/Xunit.v3.XunitTestClass.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestClass.html",
    "title": "Class XunitTestClass | xunit",
    "summary": "Class XunitTestClass Namespace Xunit.v3 Assembly xunit.v3.core.dll Default implementation of IXunitTestClass for xUnit v3 tests based on reflection. public class XunitTestClass : IXunitTestClass, ITestClass, ITestClassMetadata, IXunitSerializable Inheritance object XunitTestClass Implements IXunitTestClass ITestClass ITestClassMetadata IXunitSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestClass() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public XunitTestClass() XunitTestClass(Type, IXunitTestCollection, string?) Initializes a new instance of the XunitTestClass class. public XunitTestClass(Type @class, IXunitTestCollection testCollection, string? uniqueID = null) Parameters class Type The test class testCollection IXunitTestCollection The test collection the class belongs to uniqueID string The unique ID for the test class (only used to override default behavior in testing scenarios) Properties BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test class (and the test collection and test assembly). public IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> Class Gets the type that this test class refers to. public Type Class { get; } Property Value Type Remarks This should only be used to execute a test class. All reflection should be abstracted here instead for better testability. ClassFixtureTypes Gets a list of class fixture types associated with the test class (and the test collection). public IReadOnlyCollection<Type> ClassFixtureTypes { get; } Property Value IReadOnlyCollection<Type> Constructors Gets the public constructors on the test class. If the test class is static, will return null. public IReadOnlyCollection<ConstructorInfo>? Constructors { get; } Property Value IReadOnlyCollection<ConstructorInfo> Methods Gets the public methods on the test class. public IReadOnlyCollection<MethodInfo> Methods { get; } Property Value IReadOnlyCollection<MethodInfo> TestCaseOrderer Gets the test case orderer for the test class, if present. public ITestCaseOrderer? TestCaseOrderer { get; } Property Value ITestCaseOrderer TestClassName Gets the full name of the test class (i.e., FullName). public string TestClassName { get; } Property Value string TestClassNamespace Gets the namespace of the class where the test is defined. Will return null for classes not residing in a namespace. public string? TestClassNamespace { get; } Property Value string TestClassSimpleName Gets the simple name of the test class (the class name without namespace). public string TestClassSimpleName { get; } Property Value string TestCollection Gets the test collection this test class belongs to. public IXunitTestCollection TestCollection { get; } Property Value IXunitTestCollection Traits Gets the trait values associated with this test class (and the test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test class. public string UniqueID { get; } Property Value string Remarks The unique identifier for a test class should be able to discriminate among test classes in the same test assembly. This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, collection, or test class). Recompilation of the test assembly is reasonable as a stability changing event. Methods Deserialize(IXunitSerializationInfo) Called when the object should populate itself with data from the serialization info. public void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from Serialize(IXunitSerializationInfo) Called when the object should store its serialized values into the serialization info. public void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.XunitTestClassRunner.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestClassRunner.html",
    "title": "Class XunitTestClassRunner | xunit",
    "summary": "Class XunitTestClassRunner Namespace Xunit.v3 Assembly xunit.v3.core.dll The test class runner for xUnit.net v3 tests. public class XunitTestClassRunner : XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase> Inheritance object TestClassRunner<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase> XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase> XunitTestClassRunner Inherited Members XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.CreateTestClassConstructorArguments(XunitTestClassRunnerContext) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.FormatConstructorArgsMissingMessage(XunitTestClassRunnerContext, ConstructorInfo, IReadOnlyList<Tuple<int, ParameterInfo>>) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.GetConstructorArgument(XunitTestClassRunnerContext, ConstructorInfo, int, ParameterInfo) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.OnTestClassFinished(XunitTestClassRunnerContext, RunSummary) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.OnTestClassStarting(XunitTestClassRunnerContext) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.OrderTestCases(XunitTestClassRunnerContext) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.SelectTestClassConstructor(XunitTestClassRunnerContext) XunitTestClassRunnerBase<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.SetTestContext(XunitTestClassRunnerContext, TestEngineStatus) TestClassRunner<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.FailTestMethod(XunitTestClassRunnerContext, IXunitTestMethod, IReadOnlyCollection<IXunitTestCase>, object[], Exception) TestClassRunner<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.OnTestClassCleanupFailure(XunitTestClassRunnerContext, Exception) TestClassRunner<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.Run(XunitTestClassRunnerContext) TestClassRunner<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.RunTestMethods(XunitTestClassRunnerContext, Exception) TestClassRunner<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase>.RunTestMethod(XunitTestClassRunnerContext, IXunitTestMethod, IReadOnlyCollection<IXunitTestCase>, object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestClassRunner() Initializes a new instance of the XunitTestClassRunner class. protected XunitTestClassRunner() Properties Instance Gets the singleton instance of the XunitTestClassRunner class. public static XunitTestClassRunner Instance { get; } Property Value XunitTestClassRunner Methods Run(IXunitTestClass, IReadOnlyCollection<IXunitTestCase>, ExplicitOption, IMessageBus, ITestCaseOrderer, ExceptionAggregator, CancellationTokenSource, FixtureMappingManager) Runs the test class. public ValueTask<RunSummary> Run(IXunitTestClass testClass, IReadOnlyCollection<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager collectionFixtureMappings) Parameters testClass IXunitTestClass The test class to be run. testCases IReadOnlyCollection<IXunitTestCase> The test cases to be run. Cannot be empty. explicitOption ExplicitOption A flag to indicate how explicit tests should be treated. messageBus IMessageBus The message bus to report run status to. testCaseOrderer ITestCaseOrderer The test case orderer that will be used to decide how to order the test. aggregator ExceptionAggregator The exception aggregator used to run code and collect exceptions. cancellationTokenSource CancellationTokenSource The task cancellation token source, used to cancel the test run. collectionFixtureMappings FixtureMappingManager The mapping of collection fixture types to fixtures. Returns ValueTask<RunSummary> RunTestMethod(XunitTestClassRunnerContext, IXunitTestMethod?, IReadOnlyCollection<IXunitTestCase>, object?[]) Override this method to run the tests in an individual test method. protected override ValueTask<RunSummary> RunTestMethod(XunitTestClassRunnerContext ctxt, IXunitTestMethod? testMethod, IReadOnlyCollection<IXunitTestCase> testCases, object?[] constructorArguments) Parameters ctxt XunitTestClassRunnerContext The context that describes the current test class testMethod IXunitTestMethod The test method that contains the test cases. May be null for test cases that do not support classes and methods. testCases IReadOnlyCollection<IXunitTestCase> The test cases to be run. constructorArguments object[] The constructor arguments that will be used to create the test class. Returns ValueTask<RunSummary> Returns summary information about the tests that were run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestClassRunnerBase-4.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestClassRunnerBase-4.html",
    "title": "Class XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase> | xunit",
    "summary": "Class XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll The test class runner for xUnit.net v3 tests (with overridable context). public abstract class XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase> : TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> where TContext : XunitTestClassRunnerBaseContext<TTestClass, TTestCase> where TTestClass : class, IXunitTestClass where TTestMethod : class, IXunitTestMethod where TTestCase : class, IXunitTestCase Type Parameters TContext TTestClass TTestMethod TTestCase Inheritance object TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase> Derived XunitTestClassRunner Inherited Members TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.CreateTestClassConstructorArguments(TContext) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.FailTestMethod(TContext, TTestMethod, IReadOnlyCollection<TTestCase>, object[], Exception) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.OnTestClassCleanupFailure(TContext, Exception) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.OnTestClassFinished(TContext, RunSummary) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.OnTestClassStarting(TContext) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.OrderTestCases(TContext) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.Run(TContext) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.RunTestMethods(TContext, Exception) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.RunTestMethod(TContext, TTestMethod, IReadOnlyCollection<TTestCase>, object[]) TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase>.SetTestContext(TContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods CreateTestClassConstructorArguments(TContext) Creates the arguments for the test class constructor. By default just returns an empty set of arguments. Override to find the arguments for the constructor. protected override ValueTask<object?[]> CreateTestClassConstructorArguments(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns ValueTask<object[]> The test class constructor arguments. Remarks This method runs during Initializing and any exceptions thrown will contribute to test class failure (and will prevent the test class from running) FormatConstructorArgsMissingMessage(TContext, ConstructorInfo, IReadOnlyList<Tuple<int, ParameterInfo>>) Gets the message to be used when the constructor is missing arguments. protected virtual string FormatConstructorArgsMissingMessage(TContext ctxt, ConstructorInfo constructor, IReadOnlyList<Tuple<int, ParameterInfo>> unusedArguments) Parameters ctxt TContext The context that describes the current test class constructor ConstructorInfo The constructor that was selected unusedArguments IReadOnlyList<Tuple<int, ParameterInfo>> The arguments that had no matching parameter values Returns string GetConstructorArgument(TContext, ConstructorInfo, int, ParameterInfo) Tries to supply a test class constructor argument. protected virtual ValueTask<object?> GetConstructorArgument(TContext ctxt, ConstructorInfo constructor, int index, ParameterInfo parameter) Parameters ctxt TContext The context that describes the current test class constructor ConstructorInfo The constructor that will be used to create the test class. index int The parameter index. parameter ParameterInfo The parameter information. Returns ValueTask<object> Returns the constructor argument if available, null otherwise. OnTestClassFinished(TContext, RunSummary) This method will be called when the test class has finished running. By default, this sends TestClassFinished. Override this to enable any extensibility related to test class finish. protected override ValueTask<bool> OnTestClassFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test class summary RunSummary The execution summary for the test class Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test class cleanup failure. OnTestClassStarting(TContext) This method will be called before the test class has started running. By default, this sends TestClassStarting. Override this to enable any extensibility related to test class start. protected override ValueTask<bool> OnTestClassStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test class failure (and will prevent the test class from running). Even if this method records exceptions, OnTestClassFinished(TContext, RunSummary) will be called. OrderTestCases(TContext) Orders the test cases in the class. By default does not re-order the test cases. Override this to provide custom test case ordering. protected override IReadOnlyCollection<TTestCase> OrderTestCases(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns IReadOnlyCollection<TTestCase> Remarks This method runs during Running and any exceptions thrown will contribute to test class failure SelectTestClassConstructor(TContext) Selects the test constructor. protected virtual ConstructorInfo? SelectTestClassConstructor(TContext ctxt) Parameters ctxt TContext The context that describes the current test class Returns ConstructorInfo SetTestContext(TContext, TestEngineStatus) Sets the current TestContext for the current test class and the given test class status. protected override void SetTestContext(TContext ctxt, TestEngineStatus testClassStatus) Parameters ctxt TContext The context that describes the current test class testClassStatus TestEngineStatus The current test class status. Remarks This method must never throw. Behavior is undefined if it does. Instead, exceptions that occur should be recorded in the aggregator in ctxt and will be reflected in a way that's appropriate based on when this method is called."
  },
  "v3/2.0.0/Xunit.v3.XunitTestClassRunnerBaseContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestClassRunnerBaseContext-2.html",
    "title": "Class XunitTestClassRunnerBaseContext<TTestClass, TTestCase> | xunit",
    "summary": "Class XunitTestClassRunnerBaseContext<TTestClass, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase>. public class XunitTestClassRunnerBaseContext<TTestClass, TTestCase> : TestClassRunnerContext<TTestClass, TTestCase>, IAsyncLifetime, IAsyncDisposable where TTestClass : class, IXunitTestClass where TTestCase : class, IXunitTestCase Type Parameters TTestClass TTestCase Inheritance object ContextBase TestClassRunnerContext<TTestClass, TTestCase> XunitTestClassRunnerBaseContext<TTestClass, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestClassRunnerContext Inherited Members TestClassRunnerContext<TTestClass, TTestCase>.TestCases TestClassRunnerContext<TTestClass, TTestCase>.TestClass ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestClassRunnerBaseContext(TTestClass, IReadOnlyCollection<TTestCase>, ExplicitOption, IMessageBus, ITestCaseOrderer, ExceptionAggregator, CancellationTokenSource, FixtureMappingManager) Context class for XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase>. public XunitTestClassRunnerBaseContext(TTestClass testClass, IReadOnlyCollection<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager collectionFixtureMappings) Parameters testClass TTestClass The test class testCases IReadOnlyCollection<TTestCase> The test from the test class explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to testCaseOrderer ITestCaseOrderer The orderer used to sort the test cases for executiong aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source collectionFixtureMappings FixtureMappingManager The fixtures attached to the test collection Properties ClassFixtureMappings Gets the mapping manager for class-level fixtures. public FixtureMappingManager ClassFixtureMappings { get; } Property Value FixtureMappingManager TestCaseOrderer Gets or sets the orderer used to order the test cases. public ITestCaseOrderer TestCaseOrderer { get; set; } Property Value ITestCaseOrderer Methods InitializeAsync() Called immediately after the class has been created, before it is used. public override ValueTask InitializeAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.XunitTestClassRunnerContext.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestClassRunnerContext.html",
    "title": "Class XunitTestClassRunnerContext | xunit",
    "summary": "Class XunitTestClassRunnerContext Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestClassRunner. public class XunitTestClassRunnerContext : XunitTestClassRunnerBaseContext<IXunitTestClass, IXunitTestCase>, IAsyncLifetime, IAsyncDisposable Inheritance object ContextBase TestClassRunnerContext<IXunitTestClass, IXunitTestCase> XunitTestClassRunnerBaseContext<IXunitTestClass, IXunitTestCase> XunitTestClassRunnerContext Implements IAsyncLifetime IAsyncDisposable Inherited Members XunitTestClassRunnerBaseContext<IXunitTestClass, IXunitTestCase>.ClassFixtureMappings XunitTestClassRunnerBaseContext<IXunitTestClass, IXunitTestCase>.TestCaseOrderer XunitTestClassRunnerBaseContext<IXunitTestClass, IXunitTestCase>.InitializeAsync() TestClassRunnerContext<IXunitTestClass, IXunitTestCase>.TestCases TestClassRunnerContext<IXunitTestClass, IXunitTestCase>.TestClass ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestClassRunnerContext(IXunitTestClass, IReadOnlyCollection<IXunitTestCase>, ExplicitOption, IMessageBus, ITestCaseOrderer, ExceptionAggregator, CancellationTokenSource, FixtureMappingManager) Context class for XunitTestClassRunner. public XunitTestClassRunnerContext(IXunitTestClass testClass, IReadOnlyCollection<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager collectionFixtureMappings) Parameters testClass IXunitTestClass The test class testCases IReadOnlyCollection<IXunitTestCase> The test from the test class explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to testCaseOrderer ITestCaseOrderer The orderer used to sort the test cases for executiong aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source collectionFixtureMappings FixtureMappingManager The fixtures attached to the test collection"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCollection.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCollection.html",
    "title": "Class XunitTestCollection | xunit",
    "summary": "Class XunitTestCollection Namespace Xunit.v3 Assembly xunit.v3.core.dll The default implementation of IXunitTestCollection for xUnit.net v3. public class XunitTestCollection : IXunitTestCollection, ITestCollection, ITestCollectionMetadata, IXunitSerializable Inheritance object XunitTestCollection Implements IXunitTestCollection ITestCollection ITestCollectionMetadata IXunitSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCollection() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public XunitTestCollection() XunitTestCollection(IXunitTestAssembly, Type?, bool, string, string?) Initializes a new instance of the XunitTestCollection class. public XunitTestCollection(IXunitTestAssembly testAssembly, Type? collectionDefinition, bool disableParallelization, string displayName, string? uniqueID = null) Parameters testAssembly IXunitTestAssembly The test assembly the collection belongs to collectionDefinition Type The optional type which contains the collection definition disableParallelization bool A flag to indicate whether this test collection opts out of parallelization displayName string The display name for the test collection uniqueID string The unique ID for the test collection (only used to override default behavior in testing scenarios) Properties BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test collection (and the test assembly). public IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> ClassFixtureTypes Gets a list of collection fixture types associated with the test collection. public IReadOnlyCollection<Type> ClassFixtureTypes { get; } Property Value IReadOnlyCollection<Type> CollectionDefinition Gets the type that this collection definition derived from, if it derives from one. Untyped collections are possible when test classes are decorated using CollectionAttribute(string) and there is no test collection class declared with the same name. public Type? CollectionDefinition { get; } Property Value Type Remarks This should only be used to execute a test collection. All reflection should be abstracted here instead for better testability. CollectionFixtureTypes Gets a list of collection fixture types associated with the test collection. public IReadOnlyCollection<Type> CollectionFixtureTypes { get; } Property Value IReadOnlyCollection<Type> DisableParallelization Determines whether tests in this collection runs in parallel with any other collections. public bool DisableParallelization { get; } Property Value bool TestAssembly Gets the test assembly this test collection belongs to. public IXunitTestAssembly TestAssembly { get; } Property Value IXunitTestAssembly TestCaseOrderer Gets the test case orderer for the test collection, if present. public ITestCaseOrderer? TestCaseOrderer { get; } Property Value ITestCaseOrderer TestCollectionClassName Gets the type that the test collection was defined with, if available; may be null if the test collection didn't have a definition type. public string? TestCollectionClassName { get; } Property Value string TestCollectionDisplayName Gets the display name of the test collection. public string TestCollectionDisplayName { get; } Property Value string Traits Gets the trait values associated with this test collection (and the test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test collection. public string UniqueID { get; } Property Value string Remarks The unique identifier for a test collection should be able to discriminate among test collections in the same test assembly. This identifier should remain stable until such time as the developer changes some fundamental part of the identity (the test assembly, the collection definition class, or the collection name). Recompilation of the test assembly is reasonable as a stability changing event. Methods Deserialize(IXunitSerializationInfo) Called when the object should populate itself with data from the serialization info. public void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from Serialize(IXunitSerializationInfo) Called when the object should store its serialized values into the serialization info. public void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCollectionRunner.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCollectionRunner.html",
    "title": "Class XunitTestCollectionRunner | xunit",
    "summary": "Class XunitTestCollectionRunner Namespace Xunit.v3 Assembly xunit.v3.core.dll The test collection runner for xUnit.net v3 tests. public class XunitTestCollectionRunner : XunitTestCollectionRunnerBase<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase> Inheritance object TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase> XunitTestCollectionRunnerBase<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase> XunitTestCollectionRunner Inherited Members XunitTestCollectionRunnerBase<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.GetTestCaseOrderer(XunitTestCollectionRunnerContext) XunitTestCollectionRunnerBase<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.OnTestCollectionFinished(XunitTestCollectionRunnerContext, RunSummary) XunitTestCollectionRunnerBase<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.OnTestCollectionStarting(XunitTestCollectionRunnerContext) TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.FailTestClass(XunitTestCollectionRunnerContext, IXunitTestClass, IReadOnlyCollection<IXunitTestCase>, Exception) TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.OnTestCollectionCleanupFailure(XunitTestCollectionRunnerContext, Exception) TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.Run(XunitTestCollectionRunnerContext) TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.RunTestClasses(XunitTestCollectionRunnerContext, Exception) TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.RunTestClass(XunitTestCollectionRunnerContext, IXunitTestClass, IReadOnlyCollection<IXunitTestCase>) TestCollectionRunner<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase>.SetTestContext(XunitTestCollectionRunnerContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCollectionRunner() Initializes a new instance of the XunitTestCollectionRunner class. protected XunitTestCollectionRunner() Properties Instance Gets the singleton instance of XunitTestCollectionRunner. public static XunitTestCollectionRunner Instance { get; } Property Value XunitTestCollectionRunner Methods Run(IXunitTestCollection, IReadOnlyCollection<IXunitTestCase>, ExplicitOption, IMessageBus, ITestCaseOrderer, ExceptionAggregator, CancellationTokenSource, FixtureMappingManager) Runs the test collection. public ValueTask<RunSummary> Run(IXunitTestCollection testCollection, IReadOnlyCollection<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager assemblyFixtureMappings) Parameters testCollection IXunitTestCollection The test collection to be run. testCases IReadOnlyCollection<IXunitTestCase> The test cases to be run. Cannot be empty. explicitOption ExplicitOption A flag to indicate how explicit tests should be treated. messageBus IMessageBus The message bus to report run status to. testCaseOrderer ITestCaseOrderer The test case orderer that was applied at the assembly level. aggregator ExceptionAggregator The exception aggregator used to run code and collection exceptions. cancellationTokenSource CancellationTokenSource The task cancellation token source, used to cancel the test run. assemblyFixtureMappings FixtureMappingManager The mapping manager for assembly fixtures. Returns ValueTask<RunSummary> RunTestClass(XunitTestCollectionRunnerContext, IXunitTestClass?, IReadOnlyCollection<IXunitTestCase>) Override this method to run the tests in an individual test class. protected override ValueTask<RunSummary> RunTestClass(XunitTestCollectionRunnerContext ctxt, IXunitTestClass? testClass, IReadOnlyCollection<IXunitTestCase> testCases) Parameters ctxt XunitTestCollectionRunnerContext The context that describes the current test collection testClass IXunitTestClass The test class to be run. May be null for test cases that do not support classes and methods. testCases IReadOnlyCollection<IXunitTestCase> The test cases to be run. Returns ValueTask<RunSummary> Returns summary information about the tests that were run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestCollectionRunnerBase-4.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCollectionRunnerBase-4.html",
    "title": "Class XunitTestCollectionRunnerBase<TContext, TTestCollection, TTestClass, TTestCase> | xunit",
    "summary": "Class XunitTestCollectionRunnerBase<TContext, TTestCollection, TTestClass, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll The test collection runner for xUnit.net v3 tests (with overridable context). public abstract class XunitTestCollectionRunnerBase<TContext, TTestCollection, TTestClass, TTestCase> : TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> where TContext : XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> where TTestCollection : class, IXunitTestCollection where TTestClass : class, IXunitTestClass where TTestCase : class, IXunitTestCase Type Parameters TContext TTestCollection TTestClass TTestCase Inheritance object TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> XunitTestCollectionRunnerBase<TContext, TTestCollection, TTestClass, TTestCase> Derived XunitTestCollectionRunner Inherited Members TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.FailTestClass(TContext, TTestClass, IReadOnlyCollection<TTestCase>, Exception) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.OnTestCollectionCleanupFailure(TContext, Exception) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.OnTestCollectionFinished(TContext, RunSummary) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.OnTestCollectionStarting(TContext) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.Run(TContext) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.RunTestClasses(TContext, Exception) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.RunTestClass(TContext, TTestClass, IReadOnlyCollection<TTestCase>) TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>.SetTestContext(TContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods GetTestCaseOrderer(TContext) Gives an opportunity to override test case orderer. By default, this method gets the orderer from the collection definition. If this function returns null, the test case orderer passed into the constructor will be used. protected virtual ITestCaseOrderer? GetTestCaseOrderer(TContext ctxt) Parameters ctxt TContext The context that describes the current test collection Returns ITestCaseOrderer OnTestCollectionFinished(TContext, RunSummary) This method will be called when the test collection has finished running. By default this sends TestCollectionFinished. Override this to enable any extensibility related to test collection finish. protected override ValueTask<bool> OnTestCollectionFinished(TContext ctxt, RunSummary summary) Parameters ctxt TContext The context that describes the current test collection summary RunSummary The execution summary for the test collection Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during CleaningUp and any exceptions thrown will contribute to test collection cleanup failure. OnTestCollectionStarting(TContext) This method will be called before the test collection has started running. By default this sends TestCollectionStarting. Override this to enable any extensibility related to test collection start. protected override ValueTask<bool> OnTestCollectionStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test collection Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test collection failure (and will prevent the test collection from running). Even if this method records exceptions, OnTestCollectionFinished(TContext, RunSummary) will be called."
  },
  "v3/2.0.0/Xunit.v3.XunitTestCollectionRunnerBaseContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCollectionRunnerBaseContext-2.html",
    "title": "Class XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> | xunit",
    "summary": "Class XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase>. public class XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> : TestCollectionRunnerContext<TTestCollection, TTestCase>, IAsyncLifetime, IAsyncDisposable where TTestCollection : class, IXunitTestCollection where TTestCase : class, IXunitTestCase Type Parameters TTestCollection TTestCase Inheritance object ContextBase TestCollectionRunnerContext<TTestCollection, TTestCase> XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestCollectionRunnerContext Inherited Members TestCollectionRunnerContext<TTestCollection, TTestCase>.TestCases TestCollectionRunnerContext<TTestCollection, TTestCase>.TestCollection ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCollectionRunnerBaseContext(TTestCollection, IReadOnlyCollection<TTestCase>, ExplicitOption, IMessageBus, ITestCaseOrderer, ExceptionAggregator, CancellationTokenSource, FixtureMappingManager) Context class for XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase>. public XunitTestCollectionRunnerBaseContext(TTestCollection testCollection, IReadOnlyCollection<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager assemblyFixtureMappings) Parameters testCollection TTestCollection The test collection testCases IReadOnlyCollection<TTestCase> The test cases from the test collection explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to testCaseOrderer ITestCaseOrderer The order used to order tests cases in the collection aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source assemblyFixtureMappings FixtureMappingManager The fixtures associated with the test assembly Properties CollectionFixtureMappings Gets the mapping manager for collection-level fixtures. public FixtureMappingManager CollectionFixtureMappings { get; } Property Value FixtureMappingManager TestCaseOrderer Gets or sets the orderer used to order test cases within the test collection. public ITestCaseOrderer TestCaseOrderer { get; set; } Property Value ITestCaseOrderer Methods InitializeAsync() Called immediately after the class has been created, before it is used. public override ValueTask InitializeAsync() Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.XunitTestCollectionRunnerContext.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestCollectionRunnerContext.html",
    "title": "Class XunitTestCollectionRunnerContext | xunit",
    "summary": "Class XunitTestCollectionRunnerContext Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestCollectionRunner. public class XunitTestCollectionRunnerContext : XunitTestCollectionRunnerBaseContext<IXunitTestCollection, IXunitTestCase>, IAsyncLifetime, IAsyncDisposable Inheritance object ContextBase TestCollectionRunnerContext<IXunitTestCollection, IXunitTestCase> XunitTestCollectionRunnerBaseContext<IXunitTestCollection, IXunitTestCase> XunitTestCollectionRunnerContext Implements IAsyncLifetime IAsyncDisposable Inherited Members XunitTestCollectionRunnerBaseContext<IXunitTestCollection, IXunitTestCase>.CollectionFixtureMappings XunitTestCollectionRunnerBaseContext<IXunitTestCollection, IXunitTestCase>.TestCaseOrderer XunitTestCollectionRunnerBaseContext<IXunitTestCollection, IXunitTestCase>.InitializeAsync() TestCollectionRunnerContext<IXunitTestCollection, IXunitTestCase>.TestCases TestCollectionRunnerContext<IXunitTestCollection, IXunitTestCase>.TestCollection ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestCollectionRunnerContext(IXunitTestCollection, IReadOnlyCollection<IXunitTestCase>, ExplicitOption, IMessageBus, ITestCaseOrderer, ExceptionAggregator, CancellationTokenSource, FixtureMappingManager) Context class for XunitTestCollectionRunner. public XunitTestCollectionRunnerContext(IXunitTestCollection testCollection, IReadOnlyCollection<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager assemblyFixtureMappings) Parameters testCollection IXunitTestCollection The test collection testCases IReadOnlyCollection<IXunitTestCase> The test cases from the test collection explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to testCaseOrderer ITestCaseOrderer The order used to order tests cases in the collection aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source assemblyFixtureMappings FixtureMappingManager The fixtures associated with the test assembly"
  },
  "v3/2.0.0/Xunit.v3.XunitTestFramework.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestFramework.html",
    "title": "Class XunitTestFramework | xunit",
    "summary": "Class XunitTestFramework Namespace Xunit.v3 Assembly xunit.v3.core.dll The implementation of ITestFramework that supports discovery and execution of unit tests linked against xunit.v3.core.dll. public class XunitTestFramework : TestFramework, ITestFramework, IAsyncDisposable Inheritance object TestFramework XunitTestFramework Implements ITestFramework IAsyncDisposable Inherited Members TestFramework.DisposalTracker TestFramework.TestPipelineStartup TestFramework.DisposeAsync() TestFramework.GetDiscoverer(Assembly) TestFramework.GetExecutor(Assembly) TestFramework.SetTestPipelineStartup(ITestPipelineStartup) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestFramework() Initializes a new instance of the XunitTestFramework class. public XunitTestFramework() XunitTestFramework(string?) Initializes a new instance of the XunitTestFramework class. public XunitTestFramework(string? configFileName) Parameters configFileName string The optional test configuration file. Properties TestFrameworkDisplayName Returns the display name of the test framework that this discoverer is running tests for. public override string TestFrameworkDisplayName { get; } Property Value string Methods CreateDiscoverer(Assembly) Override this method to provide the implementation of ITestFrameworkDiscoverer. protected override ITestFrameworkDiscoverer CreateDiscoverer(Assembly assembly) Parameters assembly Assembly The assembly that is being discovered. Returns ITestFrameworkDiscoverer Returns the test framework discoverer. CreateExecutor(Assembly) Override this method to provide the implementation of ITestFrameworkExecutor. protected override ITestFrameworkExecutor CreateExecutor(Assembly assembly) Parameters assembly Assembly The assembly that is being executed. Returns ITestFrameworkExecutor Returns the test framework executor."
  },
  "v3/2.0.0/Xunit.v3.XunitTestFrameworkDiscoverer.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestFrameworkDiscoverer.html",
    "title": "Class XunitTestFrameworkDiscoverer | xunit",
    "summary": "Class XunitTestFrameworkDiscoverer Namespace Xunit.v3 Assembly xunit.v3.core.dll The implementation of ITestFrameworkDiscoverer that supports discovery of unit tests linked against xunit.v3.core.dll. public class XunitTestFrameworkDiscoverer : TestFrameworkDiscoverer<IXunitTestClass>, ITestFrameworkDiscoverer, IAsyncDisposable Inheritance object TestFrameworkDiscoverer<IXunitTestClass> XunitTestFrameworkDiscoverer Implements ITestFrameworkDiscoverer IAsyncDisposable Inherited Members TestFrameworkDiscoverer<IXunitTestClass>.DisposalTracker TestFrameworkDiscoverer<IXunitTestClass>.DisposeAsync() TestFrameworkDiscoverer<IXunitTestClass>.IsValidTestClass(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestFrameworkDiscoverer(IXunitTestAssembly, IXunitTestCollectionFactory?) Initializes a new instance of the XunitTestFrameworkDiscoverer class. public XunitTestFrameworkDiscoverer(IXunitTestAssembly testAssembly, IXunitTestCollectionFactory? collectionFactory = null) Parameters testAssembly IXunitTestAssembly The test assembly collectionFactory IXunitTestCollectionFactory The test collection factory used to look up test collections. Properties DiscovererTypeCache Gets the mapping dictionary of fact attribute type to discoverer type. The key is a type that implements IFactAttribute; the value is the discoverer type, if known; null if not. protected Dictionary<Type, Type?> DiscovererTypeCache { get; } Property Value Dictionary<Type, Type> TestAssembly public IXunitTestAssembly TestAssembly { get; } Property Value IXunitTestAssembly TestCollectionFactory Gets the test collection factory that makes test collections. public IXunitTestCollectionFactory TestCollectionFactory { get; } Property Value IXunitTestCollectionFactory Methods CreateTestClass(Type) Implement this method to create a test class for the given CLR type. protected override ValueTask<IXunitTestClass> CreateTestClass(Type @class) Parameters class Type The CLR type. Returns ValueTask<IXunitTestClass> The test class. Find(Func<ITestCase, ValueTask<bool>>, ITestFrameworkDiscoveryOptions, Type[]?, CancellationToken?) Finds tests inside an assembly. Calls the callback for each discovered test. public override ValueTask Find(Func<ITestCase, ValueTask<bool>> callback, ITestFrameworkDiscoveryOptions discoveryOptions, Type[]? types = null, CancellationToken? cancellationToken = null) Parameters callback Func<ITestCase, ValueTask<bool>> Called for each discovered test. Return true to continue test discovery; return false to cancel test discovery. discoveryOptions ITestFrameworkDiscoveryOptions The options used by the test framework during discovery. types Type[] When passed a non-null collection, only returns tests found from one of the provided types; when passed a null collection, discovers all tests in the assembly. cancellationToken CancellationToken? The optional cancellation token which can be used to cancel the test discovery process. Returns ValueTask FindTestsForMethod(IXunitTestMethod, ITestFrameworkDiscoveryOptions, Func<ITestCase, ValueTask<bool>>) Finds the tests on a test method. protected virtual ValueTask<bool> FindTestsForMethod(IXunitTestMethod testMethod, ITestFrameworkDiscoveryOptions discoveryOptions, Func<ITestCase, ValueTask<bool>> discoveryCallback) Parameters testMethod IXunitTestMethod The test method. discoveryOptions ITestFrameworkDiscoveryOptions The options used by the test framework during discovery. discoveryCallback Func<ITestCase, ValueTask<bool>> The callback that is called for each discovered test case. Returns ValueTask<bool> Return true to continue test discovery, false, otherwise. FindTestsForType(IXunitTestClass, ITestFrameworkDiscoveryOptions, Func<ITestCase, ValueTask<bool>>) Core implementation to discover unit tests in a given test class. protected override ValueTask<bool> FindTestsForType(IXunitTestClass testClass, ITestFrameworkDiscoveryOptions discoveryOptions, Func<ITestCase, ValueTask<bool>> discoveryCallback) Parameters testClass IXunitTestClass The test class. discoveryOptions ITestFrameworkDiscoveryOptions The options used by the test framework during discovery. discoveryCallback Func<ITestCase, ValueTask<bool>> The callback that is called for each discovered test case. The return value of the callback indicates the same thing as the return value of this function: return true to continue discovery, or false to halt it. Returns ValueTask<bool> Returns true if discovery should continue; false otherwise. GetDiscoverer(Type) Gets the test case discover instance for the given discoverer type. The instances are cached and reused, since they should not be stateful. protected static IXunitTestCaseDiscoverer? GetDiscoverer(Type discovererType) Parameters discovererType Type The discoverer type. Returns IXunitTestCaseDiscoverer Returns the test case discoverer instance, if known; may return null when an error occurs (which is logged to the diagnostic message sink). GetExportedTypes() Override this to provide a list of the exported types in the assembly. protected override Type[] GetExportedTypes() Returns Type[]"
  },
  "v3/2.0.0/Xunit.v3.XunitTestFrameworkExecutor.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestFrameworkExecutor.html",
    "title": "Class XunitTestFrameworkExecutor | xunit",
    "summary": "Class XunitTestFrameworkExecutor Namespace Xunit.v3 Assembly xunit.v3.core.dll The implementation of ITestFrameworkExecutor that supports execution of unit tests linked against xunit.v3.core.dll. public class XunitTestFrameworkExecutor : TestFrameworkExecutor<IXunitTestCase>, ITestFrameworkExecutor, IAsyncDisposable Inheritance object TestFrameworkExecutor<IXunitTestCase> XunitTestFrameworkExecutor Implements ITestFrameworkExecutor IAsyncDisposable Inherited Members TestFrameworkExecutor<IXunitTestCase>.DisposalTracker TestFrameworkExecutor<IXunitTestCase>.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Remarks Initializes a new instance of the XunitTestFrameworkExecutor class. Constructors XunitTestFrameworkExecutor(IXunitTestAssembly) The implementation of ITestFrameworkExecutor that supports execution of unit tests linked against xunit.v3.core.dll. public XunitTestFrameworkExecutor(IXunitTestAssembly testAssembly) Parameters testAssembly IXunitTestAssembly The test assembly. Remarks Initializes a new instance of the XunitTestFrameworkExecutor class. Properties TestAssembly Gets the test assembly that contains the test. protected IXunitTestAssembly TestAssembly { get; } Property Value IXunitTestAssembly Methods CreateDiscoverer() Override to create a test framework discoverer that can be used to discover tests when the user asks to run all test. protected override ITestFrameworkDiscoverer CreateDiscoverer() Returns ITestFrameworkDiscoverer The test framework discoverer RunTestCases(IReadOnlyCollection<IXunitTestCase>, IMessageSink, ITestFrameworkExecutionOptions, CancellationToken) Runs selected test cases in the assembly. public override ValueTask RunTestCases(IReadOnlyCollection<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions, CancellationToken cancellationToken) Parameters testCases IReadOnlyCollection<IXunitTestCase> The test cases to run. executionMessageSink IMessageSink The message sink to report results back to. executionOptions ITestFrameworkExecutionOptions The options to be used during test execution. cancellationToken CancellationToken The cancellation token which can be used to cancel the test execution process. Returns ValueTask"
  },
  "v3/2.0.0/Xunit.v3.XunitTestMethod.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestMethod.html",
    "title": "Class XunitTestMethod | xunit",
    "summary": "Class XunitTestMethod Namespace Xunit.v3 Assembly xunit.v3.core.dll The default implementation of IXunitTestMethod for xUnit.net v3 based on MethodInfo. public class XunitTestMethod : IXunitTestMethod, ITestMethod, ITestMethodMetadata, IXunitSerializable Inheritance object XunitTestMethod Implements IXunitTestMethod ITestMethod ITestMethodMetadata IXunitSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestMethod() Called by the de-serializer; should only be called by deriving classes for de-serialization purposes [Obsolete(\"Called by the de-serializer; should only be called by deriving classes for de-serialization purposes\")] public XunitTestMethod() XunitTestMethod(IXunitTestClass, MethodInfo, object?[], string?) Initializes a new instance of the XunitTestMethod class. public XunitTestMethod(IXunitTestClass testClass, MethodInfo method, object?[] testMethodArguments, string? uniqueID = null) Parameters testClass IXunitTestClass The test class method MethodInfo The test method testMethodArguments object[] The arguments to pass to the test method uniqueID string The unique ID for the test method (only used to override default behavior in testing scenarios) Properties BeforeAfterTestAttributes Gets the IBeforeAfterTestAttributes attached to the test method (and the test class, test collection, and test assembly). public IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> DataAttributes Gets the IDataAttributes attached to the test method. public IReadOnlyCollection<IDataAttribute> DataAttributes { get; } Property Value IReadOnlyCollection<IDataAttribute> FactAttributes Gets the IFactAttributes attached to the test method. public IReadOnlyCollection<IFactAttribute> FactAttributes { get; } Property Value IReadOnlyCollection<IFactAttribute> IsGenericMethodDefinition Gets a flag which indicates whether this is a generic method definition. public bool IsGenericMethodDefinition { get; } Property Value bool Method Gets the method that this test method refers to. public MethodInfo Method { get; } Property Value MethodInfo Remarks This should only be used to execute a test method. All reflection should be abstracted here instead for better testability. MethodName Gets the name of the test method that is associated with this message. public string MethodName { get; } Property Value string Parameters Gets the parameters of the test method. public IReadOnlyCollection<ParameterInfo> Parameters { get; } Property Value IReadOnlyCollection<ParameterInfo> ReturnType Gets the return type of the test method. public Type ReturnType { get; } Property Value Type TestClass Gets the test class that this test method belongs to. public IXunitTestClass TestClass { get; } Property Value IXunitTestClass TestMethodArguments Gets the arguments that will be passed to the test method. public object?[] TestMethodArguments { get; } Property Value object[] Traits Gets the trait values associated with this test method (and the test class, test collection, and test assembly). If there are none, or the framework does not support traits, this returns an empty dictionary (not null). public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Traits { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> UniqueID Gets the unique ID for this test method. public string UniqueID { get; } Property Value string Remarks The unique identifier for a test method should be able to discriminate among test methods in the same test assembly. This identifier should remain stable until such time as the developer changes some fundamental part of the identity (assembly, collection, test class, or test method). Recompilation of the test assembly is reasonable as a stability changing event. Methods Deserialize(IXunitSerializationInfo) Called when the object should populate itself with data from the serialization info. public void Deserialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to get the object data from GetDisplayName(string, object?[]?, Type[]?) Gets the display name for the test method, factoring in arguments and generic types. public string GetDisplayName(string baseDisplayName, object?[]? testMethodArguments, Type[]? methodGenericTypes) Parameters baseDisplayName string The base display name. testMethodArguments object[] The test method arguments. methodGenericTypes Type[] The generic types of the method. Returns string MakeGenericMethod(Type[]) Creates a generic version of the test method with the given generic types. public MethodInfo MakeGenericMethod(Type[] genericTypes) Parameters genericTypes Type[] The generic types Returns MethodInfo ResolveGenericTypes(object?[]) Resolves the generic types for the test method given the method's arguments. If the method is not generic, will return null. public Type[]? ResolveGenericTypes(object?[] arguments) Parameters arguments object[] The method arguments Returns Type[] ResolveMethodArguments(object?[]) Resolves argument values for the test method, ensuring they are the correct type, including support for optional method arguments. public object?[] ResolveMethodArguments(object?[] arguments) Parameters arguments object[] The test method arguments Returns object[] Serialize(IXunitSerializationInfo) Called when the object should store its serialized values into the serialization info. public void Serialize(IXunitSerializationInfo info) Parameters info IXunitSerializationInfo The info to store the object data into"
  },
  "v3/2.0.0/Xunit.v3.XunitTestMethodRunner.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestMethodRunner.html",
    "title": "Class XunitTestMethodRunner | xunit",
    "summary": "Class XunitTestMethodRunner Namespace Xunit.v3 Assembly xunit.v3.core.dll The test method runner for xUnit.net v3 tests. public class XunitTestMethodRunner : XunitTestMethodRunnerBase<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase> Inheritance object TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase> XunitTestMethodRunnerBase<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase> XunitTestMethodRunner Inherited Members XunitTestMethodRunnerBase<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.RunTestCase(XunitTestMethodRunnerContext, IXunitTestCase) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.FailTestCase(XunitTestMethodRunnerContext, IXunitTestCase, Exception) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.OnTestMethodCleanupFailure(XunitTestMethodRunnerContext, Exception) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.OnTestMethodFinished(XunitTestMethodRunnerContext, RunSummary) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.OnTestMethodStarting(XunitTestMethodRunnerContext) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.Run(XunitTestMethodRunnerContext) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.RunTestCases(XunitTestMethodRunnerContext, Exception) TestMethodRunner<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase>.SetTestContext(XunitTestMethodRunnerContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestMethodRunner() Initializes a new instance of the XunitTestMethodRunner class. protected XunitTestMethodRunner() Properties Instance Gets the singleton instance of the XunitTestMethodRunner class. public static XunitTestMethodRunner Instance { get; } Property Value XunitTestMethodRunner Methods Run(IXunitTestMethod, IReadOnlyCollection<IXunitTestCase>, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource, object?[]) Runs the test test method. public ValueTask<RunSummary> Run(IXunitTestMethod testMethod, IReadOnlyCollection<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, object?[] constructorArguments) Parameters testMethod IXunitTestMethod The test method to be run. testCases IReadOnlyCollection<IXunitTestCase> The test cases to be run. Cannot be empty. explicitOption ExplicitOption A flag to indicate how explicit tests should be treated. messageBus IMessageBus The message bus to report run status to. aggregator ExceptionAggregator The exception aggregator used to run code and collect exceptions. cancellationTokenSource CancellationTokenSource The task cancellation token source, used to cancel the test run. constructorArguments object[] The constructor arguments for the test class. Returns ValueTask<RunSummary>"
  },
  "v3/2.0.0/Xunit.v3.XunitTestMethodRunnerBase-3.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestMethodRunnerBase-3.html",
    "title": "Class XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase> | xunit",
    "summary": "Class XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll The base test method runner for xUnit.net v3 tests (with overridable context). public class XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase> : TestMethodRunner<TContext, TTestMethod, TTestCase> where TContext : XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> where TTestMethod : class, IXunitTestMethod where TTestCase : class, IXunitTestCase Type Parameters TContext TTestMethod TTestCase Inheritance object TestMethodRunner<TContext, TTestMethod, TTestCase> XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase> Derived XunitTestMethodRunner Inherited Members TestMethodRunner<TContext, TTestMethod, TTestCase>.FailTestCase(TContext, TTestCase, Exception) TestMethodRunner<TContext, TTestMethod, TTestCase>.OnTestMethodCleanupFailure(TContext, Exception) TestMethodRunner<TContext, TTestMethod, TTestCase>.OnTestMethodFinished(TContext, RunSummary) TestMethodRunner<TContext, TTestMethod, TTestCase>.OnTestMethodStarting(TContext) TestMethodRunner<TContext, TTestMethod, TTestCase>.Run(TContext) TestMethodRunner<TContext, TTestMethod, TTestCase>.RunTestCases(TContext, Exception) TestMethodRunner<TContext, TTestMethod, TTestCase>.RunTestCase(TContext, TTestCase) TestMethodRunner<TContext, TTestMethod, TTestCase>.SetTestContext(TContext, TestEngineStatus) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods RunTestCase(TContext, TTestCase) Runs the test case. protected override ValueTask<RunSummary> RunTestCase(TContext ctxt, TTestCase testCase) Parameters ctxt TContext The context that describes the current test method testCase TTestCase The test case to be run. Returns ValueTask<RunSummary> Returns summary information about the test case run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestMethodRunnerBaseContext-2.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestMethodRunnerBaseContext-2.html",
    "title": "Class XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> | xunit",
    "summary": "Class XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase>. public class XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> : TestMethodRunnerContext<TTestMethod, TTestCase>, IAsyncLifetime, IAsyncDisposable where TTestMethod : class, IXunitTestMethod where TTestCase : class, IXunitTestCase Type Parameters TTestMethod TTestCase Inheritance object ContextBase TestMethodRunnerContext<TTestMethod, TTestCase> XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestMethodRunnerContext Inherited Members TestMethodRunnerContext<TTestMethod, TTestCase>.TestCases TestMethodRunnerContext<TTestMethod, TTestCase>.TestMethod ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestMethodRunnerBaseContext(TTestMethod, IReadOnlyCollection<TTestCase>, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource, object?[]) Context class for XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase>. public XunitTestMethodRunnerBaseContext(TTestMethod testMethod, IReadOnlyCollection<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, object?[] constructorArguments) Parameters testMethod TTestMethod The test method testCases IReadOnlyCollection<TTestCase> The test cases from the test method explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source constructorArguments object[] The constructor arguments for the test class Properties ConstructorArguments Gets the arguments to send to the test class constructor. public object?[] ConstructorArguments { get; } Property Value object[]"
  },
  "v3/2.0.0/Xunit.v3.XunitTestMethodRunnerContext.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestMethodRunnerContext.html",
    "title": "Class XunitTestMethodRunnerContext | xunit",
    "summary": "Class XunitTestMethodRunnerContext Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestMethodRunner. public class XunitTestMethodRunnerContext : XunitTestMethodRunnerBaseContext<IXunitTestMethod, IXunitTestCase>, IAsyncLifetime, IAsyncDisposable Inheritance object ContextBase TestMethodRunnerContext<IXunitTestMethod, IXunitTestCase> XunitTestMethodRunnerBaseContext<IXunitTestMethod, IXunitTestCase> XunitTestMethodRunnerContext Implements IAsyncLifetime IAsyncDisposable Inherited Members XunitTestMethodRunnerBaseContext<IXunitTestMethod, IXunitTestCase>.ConstructorArguments TestMethodRunnerContext<IXunitTestMethod, IXunitTestCase>.TestCases TestMethodRunnerContext<IXunitTestMethod, IXunitTestCase>.TestMethod ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestMethodRunnerContext(IXunitTestMethod, IReadOnlyCollection<IXunitTestCase>, ExplicitOption, IMessageBus, ExceptionAggregator, CancellationTokenSource, object?[]) Context class for XunitTestMethodRunner. public XunitTestMethodRunnerContext(IXunitTestMethod testMethod, IReadOnlyCollection<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, object?[] constructorArguments) Parameters testMethod IXunitTestMethod The test method testCases IReadOnlyCollection<IXunitTestCase> The test cases from the test method explicitOption ExplicitOption The user's choice on how to treat explicit tests messageBus IMessageBus The message bus to send execution messages to aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source constructorArguments object[] The constructor arguments for the test class"
  },
  "v3/2.0.0/Xunit.v3.XunitTestRunner.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestRunner.html",
    "title": "Class XunitTestRunner | xunit",
    "summary": "Class XunitTestRunner Namespace Xunit.v3 Assembly xunit.v3.core.dll The test runner for xUnit.net v3 tests. public class XunitTestRunner : XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest> Inheritance object TestRunnerBase<XunitTestRunnerContext, IXunitTest> TestRunner<XunitTestRunnerContext, IXunitTest> XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest> XunitTestRunner Inherited Members XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.CreateTestClassInstance(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.GetAttachments(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.GetTestOutput(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.GetWarnings(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.InvokeTest(XunitTestRunnerContext, object) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.IsTestClassCreatable(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.PostInvoke(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.PreInvoke(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestStarting(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.RunTest(XunitTestRunnerContext) XunitTestRunnerBase<XunitTestRunnerContext, IXunitTest>.ShouldTestRun(XunitTestRunnerContext) TestRunner<XunitTestRunnerContext, IXunitTest>.DisposeTestClassInstance(XunitTestRunnerContext, object) TestRunner<XunitTestRunnerContext, IXunitTest>.IsTestClassDisposable(XunitTestRunnerContext, object) TestRunner<XunitTestRunnerContext, IXunitTest>.OnTestClassConstructionFinished(XunitTestRunnerContext) TestRunner<XunitTestRunnerContext, IXunitTest>.OnTestClassConstructionStarting(XunitTestRunnerContext) TestRunner<XunitTestRunnerContext, IXunitTest>.OnTestClassDisposeFinished(XunitTestRunnerContext) TestRunner<XunitTestRunnerContext, IXunitTest>.OnTestClassDisposeStarting(XunitTestRunnerContext) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestCleanupFailure(XunitTestRunnerContext, Exception) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestFailed(XunitTestRunnerContext, Exception, decimal, string, string[]) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestFinished(XunitTestRunnerContext, decimal, string, string[], IReadOnlyDictionary<string, TestAttachment>) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestNotRun(XunitTestRunnerContext, string, string[]) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestPassed(XunitTestRunnerContext, decimal, string, string[]) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestSkipped(XunitTestRunnerContext, string, decimal, string, string[]) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.OnTestStarting(XunitTestRunnerContext, bool, int) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.Run(XunitTestRunnerContext) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.SetTestContext(XunitTestRunnerContext, TestEngineStatus, TestResultState, object) TestRunnerBase<XunitTestRunnerContext, IXunitTest>.UpdateTestContext(object, TestResultState) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestRunner() Initializes a new instance of the XunitTestRunner class. protected XunitTestRunner() Fields Instance Gets the singleton instance of the XunitTestRunner. public static XunitTestRunner Instance Field Value XunitTestRunner Methods Run(IXunitTest, IMessageBus, object?[], ExplicitOption, ExceptionAggregator, CancellationTokenSource, IReadOnlyCollection<IBeforeAfterTestAttribute>) Runs the test. public ValueTask<RunSummary> Run(IXunitTest test, IMessageBus messageBus, object?[] constructorArguments, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection<IBeforeAfterTestAttribute> beforeAfterAttributes) Parameters test IXunitTest The test that this invocation belongs to. messageBus IMessageBus The message bus to report run status to. constructorArguments object[] The arguments to be passed to the test class constructor. explicitOption ExplicitOption A flag to indicate how explicit tests should be treated. aggregator ExceptionAggregator The exception aggregator used to run code and collect exceptions. cancellationTokenSource CancellationTokenSource The task cancellation token source, used to cancel the test run. beforeAfterAttributes IReadOnlyCollection<IBeforeAfterTestAttribute> The list of IBeforeAfterTestAttributes for this test. Returns ValueTask<RunSummary> Returns summary information about the test that was run."
  },
  "v3/2.0.0/Xunit.v3.XunitTestRunnerBase-2.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestRunnerBase-2.html",
    "title": "Class XunitTestRunnerBase<TContext, TTest> | xunit",
    "summary": "Class XunitTestRunnerBase<TContext, TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll The base test runner for xUnit.net v3 tests (with overridable context). public class XunitTestRunnerBase<TContext, TTest> : TestRunner<TContext, TTest> where TContext : XunitTestRunnerBaseContext<TTest> where TTest : class, IXunitTest Type Parameters TContext TTest Inheritance object TestRunnerBase<TContext, TTest> TestRunner<TContext, TTest> XunitTestRunnerBase<TContext, TTest> Derived XunitTestRunner Inherited Members TestRunner<TContext, TTest>.CreateTestClassInstance(TContext) TestRunner<TContext, TTest>.DisposeTestClassInstance(TContext, object) TestRunner<TContext, TTest>.InvokeTest(TContext, object) TestRunner<TContext, TTest>.IsTestClassCreatable(TContext) TestRunner<TContext, TTest>.IsTestClassDisposable(TContext, object) TestRunner<TContext, TTest>.OnTestClassConstructionFinished(TContext) TestRunner<TContext, TTest>.OnTestClassConstructionStarting(TContext) TestRunner<TContext, TTest>.OnTestClassDisposeFinished(TContext) TestRunner<TContext, TTest>.OnTestClassDisposeStarting(TContext) TestRunner<TContext, TTest>.PostInvoke(TContext) TestRunner<TContext, TTest>.PreInvoke(TContext) TestRunner<TContext, TTest>.RunTest(TContext) TestRunnerBase<TContext, TTest>.GetAttachments(TContext) TestRunnerBase<TContext, TTest>.GetTestOutput(TContext) TestRunnerBase<TContext, TTest>.GetWarnings(TContext) TestRunnerBase<TContext, TTest>.OnTestCleanupFailure(TContext, Exception) TestRunnerBase<TContext, TTest>.OnTestFailed(TContext, Exception, decimal, string, string[]) TestRunnerBase<TContext, TTest>.OnTestFinished(TContext, decimal, string, string[], IReadOnlyDictionary<string, TestAttachment>) TestRunnerBase<TContext, TTest>.OnTestNotRun(TContext, string, string[]) TestRunnerBase<TContext, TTest>.OnTestPassed(TContext, decimal, string, string[]) TestRunnerBase<TContext, TTest>.OnTestSkipped(TContext, string, decimal, string, string[]) TestRunnerBase<TContext, TTest>.OnTestStarting(TContext) TestRunnerBase<TContext, TTest>.OnTestStarting(TContext, bool, int) TestRunnerBase<TContext, TTest>.Run(TContext) TestRunnerBase<TContext, TTest>.RunTest(TContext) TestRunnerBase<TContext, TTest>.SetTestContext(TContext, TestEngineStatus, TestResultState, object) TestRunnerBase<TContext, TTest>.ShouldTestRun(TContext) TestRunnerBase<TContext, TTest>.UpdateTestContext(object, TestResultState) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Methods CreateTestClassInstance(TContext) Override to creates and initialize the instance of the test class. protected override ValueTask<(object? Instance, SynchronizationContext? SyncContext, ExecutionContext? ExecutionContext)> CreateTestClassInstance(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<(object Instance, SynchronizationContext SyncContext, ExecutionContext ExecutionContext)> Returns the test class instance, the sync context that is current after the creation, and a capture of the execution context so that it can be restored later. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. Since the method is potentially async, we depend on it to capture and return the sync context so that it may be propagated appropriately. GetAttachments(TContext) Gets the attachments for the test. If the test framework did not collect attachments (or does not support attachments), then it should return null. protected override ValueTask<IReadOnlyDictionary<string, TestAttachment>?> GetAttachments(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<IReadOnlyDictionary<string, TestAttachment>> Remarks By default, this method returns Attachments from the current context. This method runs during Running and any exceptions thrown will contribute to test failure. GetTestOutput(TContext) Gets any output collected from the test after execution is complete. If the test framework did not collect any output, or does not support collecting output, then it should return Empty. protected override ValueTask<string> GetTestOutput(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<string> Remarks This method runs during Running and any exceptions thrown will contribute to test failure. GetWarnings(TContext) Gets the warnings that will be reported during test results. By default, returns null, indicating that there were no warnings protected override ValueTask<string[]?> GetWarnings(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<string[]> Remarks This method runs during Running and any exceptions thrown will contribute to test failure. InvokeTest(TContext, object?) Invokes the test method and returns the amount of time spent executing. protected override ValueTask<TimeSpan> InvokeTest(TContext ctxt, object? testClassInstance) Parameters ctxt TContext The context that describes the current test testClassInstance object The instance of the test class (may be null when running a static test method) Returns ValueTask<TimeSpan> Returns the execution time (in seconds) spent running the test method. Remarks This method runs during Running and any exceptions thrown will contribute to test failure. IsTestClassCreatable(TContext) Override to determine whether a test class should be created. protected override bool IsTestClassCreatable(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns bool Remarks This method runs during Running and any exceptions thrown will contribute to test failure (and test class creation will not take place). OnTestStarting(TContext) This method is called just before the test is run. By default, this sends TestStarting. Override this to enable any extensibility related to test start. protected override ValueTask<bool> OnTestStarting(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<bool> Return true if test execution should continue; false if it should be shut down. Remarks This method runs during Initializing and any exceptions thrown will contribute to test failure (and will prevent the test from running). Even if this method records exceptions, OnTestFinished(TContext, decimal, string, string[]?, IReadOnlyDictionary<string, TestAttachment>?) will be called. PostInvoke(TContext) Override this method to call code just after the test invocation has completed, but before the test class instance has been disposed. protected override void PostInvoke(TContext ctxt) Parameters ctxt TContext The context that describes the current test PreInvoke(TContext) Override this method to call code just after the test class instance has been created, but before the test has been invoked. protected override void PreInvoke(TContext ctxt) Parameters ctxt TContext The context that describes the current test RunTest(TContext) Override this method to run the test. protected override ValueTask<TimeSpan> RunTest(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns ValueTask<TimeSpan> ShouldTestRun(TContext) Override this to determine whether a test should be run or not (meaning, if you return false, it will be reported with a status of NotRun). By default, this method will return true. This is typically used to implement the ability to exclude specific tests unless they've been explicitly asked to be run. protected override bool ShouldTestRun(TContext ctxt) Parameters ctxt TContext The context that describes the current test Returns bool Remarks This method runs during Running and any exceptions thrown will contribute to test failure."
  },
  "v3/2.0.0/Xunit.v3.XunitTestRunnerBaseContext-1.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestRunnerBaseContext-1.html",
    "title": "Class XunitTestRunnerBaseContext<TTest> | xunit",
    "summary": "Class XunitTestRunnerBaseContext<TTest> Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestRunner. public class XunitTestRunnerBaseContext<TTest> : TestRunnerContext<TTest>, IAsyncLifetime, IAsyncDisposable where TTest : class, IXunitTest Type Parameters TTest Inheritance object ContextBase TestRunnerBaseContext<TTest> TestRunnerContext<TTest> XunitTestRunnerBaseContext<TTest> Implements IAsyncLifetime IAsyncDisposable Derived XunitTestRunnerContext Inherited Members TestRunnerContext<TTest>.TestMethod TestRunnerContext<TTest>.TestMethodArguments TestRunnerBaseContext<TTest>.Test ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestRunnerBaseContext(TTest, IMessageBus, ExplicitOption, ExceptionAggregator, CancellationTokenSource, IReadOnlyCollection<IBeforeAfterTestAttribute>, object?[]) Initializes a new instance of the XunitTestRunnerBaseContext<TTest> class. public XunitTestRunnerBaseContext(TTest test, IMessageBus messageBus, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection<IBeforeAfterTestAttribute> beforeAfterTestAttributes, object?[] constructorArguments) Parameters test TTest The test messageBus IMessageBus The message bus to send execution messages to explicitOption ExplicitOption The user's choice on how to treat explicit tests aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source beforeAfterTestAttributes IReadOnlyCollection<IBeforeAfterTestAttribute> The IBeforeAfterTestAttributes that are applied to the test constructorArguments object[] The constructor arguments for the test class Properties BeforeAfterTestAttributes Gets the collection of IBeforeAfterTestAttribute used for this test. public IReadOnlyCollection<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; } Property Value IReadOnlyCollection<IBeforeAfterTestAttribute> ConstructorArguments Gets the arguments that should be passed to the test class when it's constructed. public object?[] ConstructorArguments { get; } Property Value object[] Methods GetSkipReason(Exception?) Gets the runtime skip reason for the test, inspecting the provided exception to see if it contractually matches a \"dynamically skipped\" exception (that is, any exception message that starts with Value). If the exception does not match the pattern, consults the base skip reason (from Skip), as well as SkipUnless and SkipWhen to determine if the test should be dynamically skipped. public override string? GetSkipReason(Exception? exception) Parameters exception Exception The exception to inspect Returns string The skip reason, if the test is skipped; null, otherwise RunAfterAttributes() Runs the After(MethodInfo, IXunitTest) side of the before after attributes. public void RunAfterAttributes() RunBeforeAttributes() Runs the Before(MethodInfo, IXunitTest) side of the before after attributes. public void RunBeforeAttributes()"
  },
  "v3/2.0.0/Xunit.v3.XunitTestRunnerContext.html": {
    "href": "v3/2.0.0/Xunit.v3.XunitTestRunnerContext.html",
    "title": "Class XunitTestRunnerContext | xunit",
    "summary": "Class XunitTestRunnerContext Namespace Xunit.v3 Assembly xunit.v3.core.dll Context class for XunitTestRunner. public class XunitTestRunnerContext : XunitTestRunnerBaseContext<IXunitTest>, IAsyncLifetime, IAsyncDisposable Inheritance object ContextBase TestRunnerBaseContext<IXunitTest> TestRunnerContext<IXunitTest> XunitTestRunnerBaseContext<IXunitTest> XunitTestRunnerContext Implements IAsyncLifetime IAsyncDisposable Inherited Members XunitTestRunnerBaseContext<IXunitTest>.BeforeAfterTestAttributes XunitTestRunnerBaseContext<IXunitTest>.ConstructorArguments XunitTestRunnerBaseContext<IXunitTest>.GetSkipReason(Exception) XunitTestRunnerBaseContext<IXunitTest>.RunAfterAttributes() XunitTestRunnerBaseContext<IXunitTest>.RunBeforeAttributes() TestRunnerContext<IXunitTest>.TestMethod TestRunnerContext<IXunitTest>.TestMethodArguments TestRunnerBaseContext<IXunitTest>.Test ContextBase.Aggregator ContextBase.CancellationTokenSource ContextBase.ExplicitOption ContextBase.MessageBus ContextBase.DisposeAsync() ContextBase.InitializeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtensions.AsValueTask(object?) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) ObjectExtensions.ValidateNullablePropertyValue<T>(object, T?, string) Constructors XunitTestRunnerContext(IXunitTest, IMessageBus, ExplicitOption, ExceptionAggregator, CancellationTokenSource, IReadOnlyCollection<IBeforeAfterTestAttribute>, object?[]) Context class for XunitTestRunner. public XunitTestRunnerContext(IXunitTest test, IMessageBus messageBus, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection<IBeforeAfterTestAttribute> beforeAfterTestAttributes, object?[] constructorArguments) Parameters test IXunitTest The test messageBus IMessageBus The message bus to send execution messages to explicitOption ExplicitOption The user's choice on how to treat explicit tests aggregator ExceptionAggregator The exception aggregator cancellationTokenSource CancellationTokenSource The cancellation token source beforeAfterTestAttributes IReadOnlyCollection<IBeforeAfterTestAttribute> The IBeforeAfterTestAttributes that are applied to the test constructorArguments object[] The constructor arguments for the test class"
  },
  "v3/2.0.0/Xunit.v3.html": {
    "href": "v3/2.0.0/Xunit.v3.html",
    "title": "Namespace Xunit.v3 | xunit",
    "summary": "Namespace Xunit.v3 Classes AfterTestFinished Default implementation of IAfterTestFinished. AfterTestStarting Default implementation of IAfterTestStarting. BeforeAfterTestAttribute Default implementation of IBeforeAfterTestAttribute. BeforeTestFinished Default implementation of IBeforeTestFinished. BeforeTestStarting Default implementation of IBeforeTestStarting. CollectionPerAssemblyTestCollectionFactory Implementation of IXunitTestCollectionFactory that creates a single default test collection for the assembly, and places any tests classes which are not decorated by CollectionAttribute or CollectionAttribute<TCollectionDefinition> into the default test collection. CollectionPerClassTestCollectionFactory Implementation of IXunitTestCollectionFactory which creates a new test collection for each test class that isn't decorated with CollectionAttribute or CollectionAttribute<TCollectionDefinition>. ContextBase Base class for all execution pipeline context classes. DataAttribute Abstract attribute which represents a based implementation of IDataAttribute. Data source providers derive from this attribute and implement GetData(MethodInfo, DisposalTracker) to return the data for the theory. DefaultTestCaseOrderer Default implementation of ITestCaseOrderer. Orders tests in an unpredictable but stable order, so that repeated test runs of the identical test assembly run tests in the same order. DefaultTestCollectionOrderer Default implementation of ITestCollectionOrderer. Orders tests in an unpredictable and unstable order, so that repeated test runs of the identical test assembly run test collections in a random order. DelegatingMessageBus Implementation of IMessageBus that delegates to another implementation of IMessageBus while calling into an optional callback for each message. DelegatingMessageBus<TFinalMessage> Implementation of IMessageBus that delegates to another implementation of IMessageBus while calling into an optional callback for each message. In addition, it issues a Finished event when a message of the type TFinalMessage is seen and records the final message for later retrieval. DelegatingMessageSink Implementation of IMessageSink that delegates to another implementation of IMessageSink while calling into an optional callback for each message. DelegatingMessageSink<TFinalMessage> Implementation of IMessageSink that delegates to another implementation of IMessageSink while calling into an optional callback for each message. In addition, it issues a Finished event when a message of the type TFinalMessage is seen and records the final message for later retrieval. DiagnosticMessage Default implementation of IDiagnosticMessage. DiscoveryComplete Default implementation of IDiscoveryComplete. DiscoveryStarting Default implementation of IDiscoveryStarting. DisplayNameFormatter Represents a formatter that formats the display name of a class and/or method into a more human readable form using additional options. DynamicSkipToken Container class for token used to dynamically skip tests. ErrorMessage Default implementation of IErrorMessage. ExecutionErrorTestCase A simple implementation of IXunitTestCase that can be used to report an error rather than running a test. ExecutionTimer The methods on this static class can measure the time taken to execute actions (both synchronous and asynchronous). ExtensibilityPointFactory Represents a factory for the types used for extensibility throughout the system. FactDiscoverer Implementation of IXunitTestCaseDiscoverer that supports finding test cases on methods decorated with FactAttribute. FixtureMappingManager Maps fixture objects, including support for generic collection fixtures. InProcessFrontController This class is a \"philosophical\" implementation of IFrontController (which isn't a type that's available here), intended to be used by in-process runners, wrapped around an implementation of ITestFramework. The signatures of the methods are slightly different, as they permit and require direct access to ITestCase instances rather than forcing the test cases through a round of serialization and deserialization. It will also manufacture the IDiscoveryStarting and IDiscoveryComplete messages that the test framework is not responsible for. When connected to remote meta-runners, the in-process runner can convert ITestCase instances into TestCaseDiscovered instances by using a converter like Xunit.Runner.Common.TestCaseExtensions.ToTestCaseDiscovered (which should be called from a callback passed to Find(IMessageSink?, ITestFrameworkDiscoveryOptions, Func<ITestCase, bool>, CancellationTokenSource, Type[]?, Func<ITestCase, bool, ValueTask<bool>>?)). InProcessTestProcessLauncher Implementation of ITestProcessLauncher that will launch an xUnit.net v3 test in-process. InternalDiagnosticMessage Default implementation of IInternalDiagnosticMessage. LocalOutOfProcessTestProcessLauncher Implementation of ITestProcessLauncher that will launch an xUnit.net v3 test project out-of-process on the local machine. LocalTestProcess Implementation of ITestProcess for a process running on the local machine. MaxConcurrencySyncContext An implementation of SynchronizationContext which runs work on custom threads rather than in the thread pool, and limits the number of in-flight actions. MemberDataAttributeBase Provides a base class for attributes that will provide member data. MessageSinkMessage Default implementation of IMessageSinkMessage, with serialization support. OutOfProcessTestProcessLauncherBase Base implementation of ITestProcessLauncher designed to launch an xUnit.net v3 test project out of process (the default behavior). The base class abstracts away the actual launch and manipulation, so that replacement launchers to perform things like launching under a debugger. TestAssemblyCleanupFailure Default implementation of ITestAssemblyCleanupFailure. TestAssemblyFinished Default implementation of ITestAssemblyFinished. TestAssemblyMessage Default implementation of ITestAssemblyMessage. TestAssemblyRunnerContext<TTestAssembly, TTestCase> Base context class for TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase>. TestAssemblyRunner<TContext, TTestAssembly, TTestCollection, TTestCase> A base class that provides default behavior when running tests in an assembly. It groups the tests by test collection, and then runs the individual test collections. TestAssemblyStarting Default implementation of ITestAssemblyStarting. TestCaseCleanupFailure Default implementation of ITestCaseCleanupFailure. TestCaseDiscovered Default implementation of ITestCaseDiscovered. TestCaseFinished Default implementation of ITestCaseFinished. TestCaseMessage Default implementation of ITestCaseMessage. TestCaseRunnerBaseContext<TTestCase> Base context class for TestCaseRunnerBase<TContext, TTestCase>. TestCaseRunnerBase<TContext, TTestCase> A base class that provides default behavior when running test cases. TestCaseRunnerContext<TTestCase, TTest> Base context class for TestCaseRunner<TContext, TTestCase, TTest>. TestCaseRunner<TContext, TTestCase, TTest> A base class that provides default behavior when running test cases which are assumed to result in one or more tests (that implement ITest). TestCaseStarting Default implementation of ITestCaseStarting. TestClassCleanupFailure Default implementation of ITestClassCleanupFailure. TestClassComparer An implementation of IEqualityComparer<T> for ITestClass. Compares the fully qualified names of the types. TestClassConstructionFinished Default implementation of ITestClassConstructionFinished. TestClassConstructionStarting Default implementation of ITestClassConstructionStarting. TestClassDisposeFinished Default implementation of ITestClassDisposeFinished. TestClassDisposeStarting Default implementation of ITestClassDisposeStarting. TestClassFinished Default implementation of ITestClassFinished TestClassMessage Default implementation of ITestClassMessage. TestClassRunnerContext<TTestClass, TTestCase> Base context class for TestClassRunnerContext<TTestClass, TTestCase>. TestClassRunner<TContext, TTestClass, TTestMethod, TTestCase> A base class that provides default behavior when running tests in a test class. It groups the tests by test method, and then runs the individual test methods. TestClassStarting Default implementation of ITestClassStarting. TestCleanupFailure Default implementation of ITestCleanupFailure. TestCollectionCleanupFailure Default implementation of ITestCollectionCleanupFailure. TestCollectionComparer<TTestCollection> An implementation of IEqualityComparer<T> for ITestCollection. Compares the IDs of the test collections. TestCollectionFactoryBase Base class with common functionality between CollectionPerAssemblyTestCollectionFactory and CollectionPerClassTestCollectionFactory. TestCollectionFinished Default implementation of ITestCollectionFinished. TestCollectionMessage Default implementation of ITestCollectionMessage. TestCollectionRunnerContext<TTestCollection, TTestCase> Base context class for TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase>. TestCollectionRunner<TContext, TTestCollection, TTestClass, TTestCase> A base class that provides default behavior when running tests in a test collection. It groups the tests by test class, and then runs the individual test classes. TestCollectionStarting Default implementation of ITestCollectionStarting. TestContextAccessor Default implementation of ITestContextAccessor. TestFailed Default implementation of ITestFailed. TestFinished Default implementation of ITestFinished. TestFramework A default implementation of ITestFramework that tracks objects to be disposed when the framework is disposed. The discoverer and executor are automatically tracked for disposal, since those interfaces mandate an implementation of IDisposable. TestFrameworkDiscoverer<TTestClass> A base implementation of ITestFrameworkDiscoverer that supports test filtering and runs the discovery process on a thread pool thread. TestFrameworkExecutor<TTestCase> A reusable implementation of ITestFrameworkExecutor which contains the basic behavior for running tests. TestIntrospectionHelper Helper functions for retrieving and interpreting test and test case details from various sources (like IFactAttribute, IDataAttribute, and others). TestMessage Default implementation of ITestMessage. TestMethodCleanupFailure Default implementation of ITestMethodCleanupFailure. TestMethodComparer An implementation of IEqualityComparer<T> for ITestMethod. Compares the names of the methods. TestMethodFinished Default implementation of ITestMethodFinished. TestMethodMessage Default implementation of ITestMethodMessage. TestMethodRunnerContext<TTestMethod, TTestCase> Base context class for TestMethodRunner<TContext, TTestMethod, TTestCase>. TestMethodRunner<TContext, TTestMethod, TTestCase> A base class that provides default behavior when running tests in a test method. TestMethodStarting Default implementation of ITestMethodStarting. TestNotRun Default implementation of ITestNotRun. TestOutput Default implementation of ITestOutput. TestOutputHelper Default implementation of ITestOutputHelper. TestPassed Default implementation of ITestPassed. TestPipelineStartupAttribute Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code that runs during the test pipeline startup and shutdown (including both discovery and execution). TestResultMessage Default implementation of ITestResultMessage. TestRunnerBaseContext<TTest> Base context class for TestRunnerBase<TContext, TTest>. TestRunnerBase<TContext, TTest> A base class that provides default behavior when running a test. This includes support for skipping tests. TestRunnerContext<TTest> Base context class for TestRunner<TContext, TTest>. This includes an assumption that a test means invoking a method on a class. TestRunner<TContext, TTest> A base class that provides default behavior when running a test. This includes support for skipping tests. TestSkipped Default implementation of ITestSkipped. TestStarting Default implementation of ITestStarting. TheoryDiscoverer Implementation of IXunitTestCaseDiscoverer that supports finding test cases on methods decorated with ITheoryAttribute. XunitDelayEnumeratedTheoryTestCase Represents a test case which runs multiple tests for theory data, either because theory data pre-enumeration was disabled or because the data was not serializable. XunitRunnerHelper Helper functions for xUnit.net v3 runners. XunitTest An implementation of ITest for xUnit v3. XunitTestAssembly The default implementation of IXunitTestAssembly for xUnit.net v3. XunitTestAssemblyRunner The test assembly runner for xUnit.net v3 tests. XunitTestAssemblyRunnerBaseContext<TTestAssembly, TTestCase> Context class for XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase>. XunitTestAssemblyRunnerBase<TContext, TTestAssembly, TTestCollection, TTestCase> The test assembly runner for xUnit.net v3 tests (with overridable context). XunitTestAssemblyRunnerContext Context class for XunitTestAssemblyRunner. XunitTestCase Default implementation of IXunitTestCase for xUnit.net v3 that supports test methods decorated with FactAttribute. Test methods decorated with derived attributes may use this as a base class to build from. XunitTestCaseDiscovererAttribute An attribute used to decorate classes which implement IFactAttribute, to indicate how test cases should be discovered. XunitTestCaseRunner The test case runner for xUnit.net v3 tests. XunitTestCaseRunnerBaseContext<TTestCase, TTest> Context class for XunitTestCaseRunnerBase<TContext, TTestCase, TTest>. XunitTestCaseRunnerBase<TContext, TTestCase, TTest> The test case runner for xUnit.net v3 tests (with overridable context). XunitTestCaseRunnerContext Context class for XunitTestCaseRunner. XunitTestClass Default implementation of IXunitTestClass for xUnit v3 tests based on reflection. XunitTestClassRunner The test class runner for xUnit.net v3 tests. XunitTestClassRunnerBaseContext<TTestClass, TTestCase> Context class for XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase>. XunitTestClassRunnerBase<TContext, TTestClass, TTestMethod, TTestCase> The test class runner for xUnit.net v3 tests (with overridable context). XunitTestClassRunnerContext Context class for XunitTestClassRunner. XunitTestCollection The default implementation of IXunitTestCollection for xUnit.net v3. XunitTestCollectionRunner The test collection runner for xUnit.net v3 tests. XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase> Context class for XunitTestCollectionRunnerBaseContext<TTestCollection, TTestCase>. XunitTestCollectionRunnerBase<TContext, TTestCollection, TTestClass, TTestCase> The test collection runner for xUnit.net v3 tests (with overridable context). XunitTestCollectionRunnerContext Context class for XunitTestCollectionRunner. XunitTestFramework The implementation of ITestFramework that supports discovery and execution of unit tests linked against xunit.v3.core.dll. XunitTestFrameworkDiscoverer The implementation of ITestFrameworkDiscoverer that supports discovery of unit tests linked against xunit.v3.core.dll. XunitTestFrameworkExecutor The implementation of ITestFrameworkExecutor that supports execution of unit tests linked against xunit.v3.core.dll. XunitTestMethod The default implementation of IXunitTestMethod for xUnit.net v3 based on MethodInfo. XunitTestMethodRunner The test method runner for xUnit.net v3 tests. XunitTestMethodRunnerBaseContext<TTestMethod, TTestCase> Context class for XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase>. XunitTestMethodRunnerBase<TContext, TTestMethod, TTestCase> The base test method runner for xUnit.net v3 tests (with overridable context). XunitTestMethodRunnerContext Context class for XunitTestMethodRunner. XunitTestRunner The test runner for xUnit.net v3 tests. XunitTestRunnerBaseContext<TTest> Context class for XunitTestRunner. XunitTestRunnerBase<TContext, TTest> The base test runner for xUnit.net v3 tests (with overridable context). XunitTestRunnerContext Context class for XunitTestRunner. Structs ExceptionAggregator Aggregates exceptions. Intended to run one or more code blocks, and collect the exceptions thrown by those code blocks. RunSummary Represents the statistical summary from a run of one or more tests. Interfaces IAssemblyFixtureAttribute Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of the fixture data is initialized before any test in the assembly are run (including InitializeAsync() if it's implemented). After all the tests in the assembly have been run, it is cleaned up by calling DisposeAsync() if it's implemented, or it falls back to Dispose() if that's implemented. Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data from inside the test, a constructor argument should be added to the test class which exactly matches the fixture type. IBeforeAfterTestAttribute Indicates an attribute which is involved in test method interception (allows code to be run before and after a test is run). ICollectionAttribute Used to declare a specific test collection for a test class. Only valid on test classes, and only a single instance of a collection attribute may be present. ICollectionBehaviorAttribute Used to declare the default test collection behavior for the assembly. This is only valid at the assembly level, and there can be only one. IDataAttribute Base interface that all data attributes (that is, data providers for theories) are expected to implement. Data attributes are valid on methods only. IFactAttribute Attribute that is applied to a method to indicate that it is a test method that should be run by the default test runner. Implementations must be decorated by XunitTestCaseDiscovererAttribute to indicate which class is responsible for converting the test method into one or more tests. IMessageBus Used by discovery, execution, and extensibility code to send messages to the runner. ISelfExecutingXunitTestCase Represents an implementation of IXunitTestCase that is self-executing. This allows the test case to opt into the middle of the test execution pipeline without implementing everything that comes before it. ITestCaseOrderer A class implements this interface to participate in ordering tests for the test runner. Test case orderers are applied using an implementation of ITestCaseOrdererAttribute (most commonly TestCaseOrdererAttribute), which can be applied at the assembly, test collection, and test class level. ITestCaseOrdererAttribute Used to decorate an assembly, test collection, or test class to allow the use of a custom test case orderer. Only one may exist on a given element. ITestCollectionOrderer A class implements this interface to participate in ordering tests for the test runner. Test collection orderers are applied using the and implementation of ITestCollectionOrdererAttribute (most commonly TestCollectionOrdererAttribute), which can be applied at the assembly level. ITestCollectionOrdererAttribute Used to decorate an assembly, test collection, or test class to allow the use of a custom test collection orderer. Only one may exist on a given element. ITestFramework Represents a test framework. There are two pieces to test frameworks: discovery and execution. The two factory methods represent these two pieces. Test frameworks may optionally implement either IDisposable or IAsyncDisposable. They may implement a constructor which is either empty, or takes a single IMessageSink for diagnostic messages, or takes two instances of IMessageSink for diagnostic messages and internal diagnostic messages, respectively. ITestFrameworkAttribute Used to decorate an assembly to allow the use of a custom test framework. May only be placed at the assembly level, and only a single test framework is allowed. ITestFrameworkDiscoverer Represents an implementation of the discovery part of a test framework. Implementations may optionally implement IDisposable and/or IAsyncDisposable for cleanup operations. ITestFrameworkExecutor Represents an implementation of the execution part of a test framework. Implementations may optionally implement IDisposable and/or IAsyncDisposable for cleanup operations. ITestPipelineStartup Interface implemented by developers who want to run code during test pipeline startup and shutdown. A single instance of this may be decorated with an instance of ITestPipelineStartupAttribute (typically TestPipelineStartupAttribute) at the assembly level. ITestPipelineStartupAttribute Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code that runs during the test pipeline startup and shutdown (including both discovery and execution). ITestProcess Represents a v3 test process that has been launched. When the process is disposed, it should be allowed to cleaned up and exit within an appropriate amount of time, and then killed if it will not stop cleanly. ITestProcessLauncher Implement this to control the launch of an xUnit.net v3 test process. ITestTimeoutException This is a marker interface implemented to indicate that the exception is the result of a test timeout, resulting in a failure cause of Timeout. ITheoryAttribute Marks a test method as being a data theory. Data theories are tests which are fed various bits of data from a data source, mapping to parameters on the test method. If the data source contains multiple rows, then the test method is executed multiple times (once with each data row). Data is provided by attributes which implement IDataAttribute (most commonly, InlineDataAttribute and MemberDataAttribute). Implementations must be decorated by XunitTestCaseDiscovererAttribute to indicate which class is responsible for converting the test method into one or more tests. ITraitAttribute Base interface that all traits attributes (that is, anything with provides traits to a test). Trait attributes are valid on assemblies, classes, and methods. IXunitDelayEnumeratedTestCase Indicates a test case which delays enumeration of tests until execution time. IXunitTest Represents a test from xUnit.net v3 based on reflection. IXunitTestAssembly Represents a test assembly from xUnit.net v3 based on reflection. IXunitTestCase Represents a single test case from xUnit.net v3 based on reflection. IXunitTestCaseDiscoverer Interface to be implemented by classes which are used to discover tests cases attached to test methods that are attributed with an implementation of IFactAttribute. IXunitTestClass Represents a test class from xUnit.net v3 based on reflection. IXunitTestCollection Represents a test collection from xUnit.net v3 based on reflection. IXunitTestCollectionFactory This interface is intended to be implemented by components which generate test collections. End users specify the desired test collection factory by applying CollectionBehaviorAttribute (or any attribute that implements ICollectionBehaviorAttribute) at the assembly level. Classes which implement this interface must have a constructor that takes IXunitTestAssembly. IXunitTestMethod Represents a test class from xUnit.net v3 based on reflection."
  }
}